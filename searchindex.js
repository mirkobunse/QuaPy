Search.setIndex({"docnames": ["index", "modules", "quapy", "quapy.classification", "quapy.data", "quapy.method", "wiki/Datasets", "wiki/Evaluation", "wiki/ExplicitLossMinimization", "wiki/Methods", "wiki/Model-Selection", "wiki/Plotting", "wiki/Protocols"], "filenames": ["index.rst", "modules.rst", "quapy.rst", "quapy.classification.rst", "quapy.data.rst", "quapy.method.rst", "wiki/Datasets.md", "wiki/Evaluation.md", "wiki/ExplicitLossMinimization.md", "wiki/Methods.md", "wiki/Model-Selection.md", "wiki/Plotting.md", "wiki/Protocols.md"], "titles": ["Quickstart", "quapy", "quapy package", "quapy.classification package", "quapy.data package", "quapy.method package", "Datasets", "Evaluation", "Explicit Loss Minimization", "Quantification Methods", "Model Selection", "Plotting", "Protocols"], "terms": {"i": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "an": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "open": [0, 2, 4, 6], "sourc": [0, 2, 3, 4, 5, 8, 9], "framework": [0, 5, 9], "quantif": [0, 2, 3, 4, 5, 6, 7, 8, 12], "k": [0, 2, 3, 4, 5, 9], "supervis": [0, 10], "preval": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11], "estim": [0, 2, 3, 4, 5, 6, 7, 11], "learn": [0, 2, 3, 4, 5, 7, 9, 10], "quantifi": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12], "written": 0, "python": [0, 4, 6], "base": [0, 1, 2, 3, 6, 9], "concept": 0, "data": [0, 1, 2, 3, 5, 9, 11], "sampl": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11], "provid": [0, 2, 3, 4, 5, 6, 9, 11, 12], "implement": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "most": [0, 2, 4, 5, 6, 7, 9, 11, 12], "import": [0, 4, 5, 6, 9, 10, 11, 12], "aspect": 0, "workflow": 0, "baselin": 0, "advanc": [0, 2, 6, 10, 12], "method": [0, 1, 2, 6, 7, 8, 10, 11, 12], "orient": [0, 2, 5, 8, 9], "model": [0, 2, 3, 4, 5, 6, 7, 11, 12], "select": [0, 2, 4, 5, 6, 7, 9, 12], "mechan": [0, 2, 3, 5], "evalu": [0, 1, 3, 4, 5, 6, 9, 10, 11, 12], "measur": [0, 2, 5, 8, 9, 10, 11], "protocol": [0, 1, 4, 5, 6, 9, 10, 11], "us": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "also": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "make": [0, 2, 5, 6, 8, 9], "avail": [0, 3, 4, 5, 6, 7, 8, 9, 11], "commonli": [0, 12], "dataset": [0, 1, 2, 3, 5, 7, 9, 10, 11, 12], "offer": [0, 9], "visual": [0, 7, 11], "tool": [0, 7], "facilit": 0, "analysi": [0, 4, 6, 9], "interpret": [0, 4, 5, 6, 11], "experiment": [0, 9], "result": [0, 2, 5, 7, 8, 9, 11], "host": [0, 6], "github": [0, 6], "http": [0, 2, 4, 5, 6], "com": [0, 2, 6], "hlt": 0, "isti": 0, "pip": [0, 5, 9], "If": [0, 2, 4, 5, 9, 11], "you": [0, 2, 3, 5, 6, 9], "find": [0, 5, 6, 9, 10], "we": [0, 4, 6, 7, 9, 10, 11, 12], "hope": 0, "pleas": [0, 2, 3, 4, 5, 9], "consid": [0, 2, 4, 5, 9, 11, 12], "origin": [0, 2, 3, 4, 5, 6, 7, 9, 12], "paper": [0, 2, 3, 5, 6, 9], "your": [0, 6, 9], "research": [0, 9], "inproceed": 0, "moreo2021quapi": 0, "titl": [0, 2], "author": [0, 5], "moreo": [0, 4, 5, 6, 9, 10], "alejandro": [0, 10], "esuli": [0, 3, 4, 5, 6, 8, 9], "andrea": 0, "sebastiani": [0, 4, 5, 6, 9, 10], "fabrizio": [0, 10], "booktitl": 0, "proceed": [0, 4, 5, 6, 9], "30th": 0, "acm": [0, 4, 5, 6, 9], "intern": [0, 3, 4, 5, 6, 7, 9], "confer": [0, 3, 4, 6, 9], "inform": [0, 2, 3, 4, 5, 6, 9, 10, 12], "knowledg": [0, 4, 6, 9], "manag": [0, 4, 6, 9], "page": [0, 6], "4534": 0, "4543": 0, "year": 0, "2021": [0, 5, 9, 10], "The": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12], "follow": [0, 2, 4, 5, 6, 7, 9, 10, 11, 12], "script": [0, 4, 5, 6, 8, 9], "fetch": [0, 6], "tweet": [0, 4, 6, 9], "train": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "appli": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11], "adjust": [0, 2, 5, 9], "classifi": [0, 2, 3, 5, 6, 10, 11], "count": [0, 2, 4, 5, 10, 11], "mean": [0, 2, 4, 5, 6, 7, 9, 10, 11, 12], "absolut": [0, 2, 5, 7, 9, 11], "error": [0, 1, 3, 5, 6, 9, 10], "mae": [0, 1, 2, 3, 5, 7, 10, 12], "between": [0, 2, 3, 5, 11], "predict": [0, 1, 2, 3, 5, 7, 9, 11], "true": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "class": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "valu": [0, 2, 3, 4, 5, 6, 7, 9, 10, 12], "test": [0, 2, 4, 5, 6, 7, 9, 10, 11, 12], "set": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "qp": [0, 2, 4, 5, 6, 7, 9, 10, 11, 12], "from": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11], "sklearn": [0, 2, 3, 4, 5, 9, 10, 11, 12], "linear_model": [0, 3, 9, 10, 12], "logisticregress": [0, 3, 5, 9, 10, 12], "fetch_twitt": [0, 2, 4, 6, 9], "semeval16": [0, 4, 6], "creat": [0, 2, 5, 6], "aggreg": [0, 1, 2, 7, 10, 11, 12], "acc": [0, 1, 2, 5, 7, 9, 11, 12], "fit": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12], "estim_preval": [0, 9], "instanc": [0, 2, 3, 4, 5, 6, 7, 9, 11, 12], "true_preval": 0, "print": [0, 2, 3, 4, 6, 7, 9, 10, 12], "f": [0, 4, 5, 6, 7, 9, 10, 11, 12], "3f": [0, 7], "scenario": [0, 7, 9, 10, 11], "character": [0, 7, 9], "prior": [0, 2, 5, 7, 9, 10, 11, 12], "probabl": [0, 2, 3, 5, 6, 7, 9, 10, 11, 12], "shift": [0, 2, 3, 5, 7, 9, 10, 12], "In": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "other": [0, 2, 3, 4, 5, 6, 7, 9, 11], "word": [0, 2, 4, 7, 9], "would": [0, 4, 5, 6, 7, 9, 11], "littl": 0, "interest": [0, 2, 7, 11, 12], "could": [0, 4, 6, 7, 9, 10, 11, 12], "assum": [0, 5, 7, 9], "iid": [0, 5, 7, 11], "assumpt": [0, 7, 11], "hold": [0, 2, 5], "thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "roughli": [0, 6], "equival": [0, 5, 6], "For": [0, 2, 4, 5, 6, 7, 10, 11, 12], "reason": [0, 5, 9, 11, 12], "ani": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12], "should": [0, 2, 3, 4, 5, 6, 9, 10, 11], "across": [0, 2, 5, 6, 7, 11], "mani": [0, 2, 5, 6, 7, 9, 10, 11, 12], "even": [0, 2], "ones": [0, 2, 4, 5, 7, 11], "differ": [0, 2, 4, 5, 6, 9, 10, 11, 12], "veri": [0, 2, 6, 9, 11], "those": [0, 2, 3, 5, 7, 9, 10, 11], "found": [0, 2, 4, 5, 6, 9], "procedur": [0, 2, 7, 9], "autom": [0, 6], "see": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12], "detail": [0, 3, 4, 5, 6, 7, 8, 9], "exampl": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12], "illustr": [0, 9, 10, 11], "sever": [0, 4, 6, 8], "through": [0, 2, 9], "explicit": [0, 5], "loss": [0, 2, 3, 5], "minim": [0, 2, 5], "plot": [0, 1], "popular": [0, 7, 12], "its": [0, 2, 5, 9, 10, 12], "variant": [0, 2, 5, 11], "expect": [0, 5, 12], "maxim": [0, 5], "structur": [0, 5, 9], "output": [0, 2, 3, 4, 5, 6, 7, 9, 10, 12], "hdy": [0, 2, 5], "quanet": [0, 3], "ensembl": [0, 2, 4, 5, 6], "among": [0, 7, 9], "versatil": 0, "function": [0, 1, 3, 4, 5, 6, 7, 9, 10, 11, 12], "perform": [0, 2, 3, 5, 6, 7, 9, 10, 11, 12], "gener": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "e": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "g": [0, 2, 3, 4, 5, 6, 7, 9, 10, 12], "app": [0, 1, 2, 5, 10, 11, 12], "npp": [0, 1, 2, 12], "etc": [0, 9], "metric": [0, 2, 5, 9, 10], "ae": [0, 1, 2, 8, 9, 11], "rae": [0, 1, 2, 7, 8, 9], "nae": [0, 1, 2], "nrae": [0, 1, 2], "se": [0, 1, 2], "kld": [0, 1, 2, 3, 5, 8, 9], "nkld": [0, 1, 2, 3, 5, 8, 9], "frequent": 0, "textual": [0, 4, 6], "numer": [0, 2, 4, 6, 7, 9], "includ": [0, 4, 5, 6, 8, 9, 10, 11, 12], "32": [0, 6, 10], "uci": [0, 4], "machin": [0, 2, 3, 7, 9, 10], "binari": [0, 2, 3, 4, 5, 9, 11], "5": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "multiclass": [0, 2, 4, 5, 9, 12], "new": [0, 2, 3, 4, 5, 6, 12], "v0": [0, 12], "1": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12], "8": [0, 4, 5, 6, 9, 10, 11], "11": [0, 2, 6, 12], "twitter": [0, 4], "sentiment": [0, 4, 9], "3": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "product": [0, 4, 6, 9], "review": [0, 4, 11], "4": [0, 2, 4, 6, 7, 9, 10, 11, 12], "task": [0, 4, 6, 9, 10], "lequa": [0, 4, 12], "competit": [0, 4, 6], "7": [0, 2, 5, 6, 9, 10, 11, 12], "ifcb": [0, 4], "plankton": [0, 4], "water": [0, 6], "nativ": 0, "support": [0, 2, 4, 5, 9], "singl": [0, 2, 5, 6, 7, 9, 12], "label": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12], "analys": [0, 11], "case": [0, 2, 3, 4, 5, 6, 7, 9, 11, 12], "want": [0, 2, 9], "improv": [0, 2, 5, 9], "pull": 0, "request": [0, 2, 3, 4, 5, 6, 10], "devel": [0, 4], "branch": 0, "packag": [1, 6, 8, 9], "subpackag": 1, "classif": [1, 2, 4, 5, 6, 7, 9], "submodul": 1, "calibr": [1, 2, 9], "modul": [1, 6, 7, 9, 11, 12], "neural": [1, 2, 4, 6], "svmperf": [1, 2, 5, 8, 9], "content": 1, "preprocess": [1, 2, 6, 9], "reader": [1, 2], "meta": [1, 2, 3], "non_aggreg": [1, 2], "compos": [1, 2], "absolute_error": [1, 2], "acc_error": [1, 2], "f1_error": [1, 2], "f1e": [1, 2, 7], "from_nam": [1, 2, 7], "mean_absolute_error": [1, 2], "mean_normalized_absolute_error": [1, 2], "mean_normalized_relative_absolute_error": [1, 2], "mean_relative_absolute_error": [1, 2], "mkld": [1, 2, 5, 7], "mnae": [1, 2, 5], "mnkld": [1, 2, 5, 7], "mnrae": [1, 2, 5], "mrae": [1, 2, 3, 5, 7], "mse": [1, 2, 5, 7, 9], "normalized_absolute_error": [1, 2], "normalized_relative_absolute_error": [1, 2], "relative_absolute_error": [1, 2], "smooth": [1, 2, 7, 9], "evaluate_on_sampl": [1, 2], "evaluation_report": [1, 2, 7], "hellingerdist": [1, 2], "topsoedist": [1, 2], "argmin_preval": [1, 2], "as_binary_preval": [1, 2], "check_prevalence_vector": [1, 2], "clip": [1, 2, 5, 9], "condsoftmax": [1, 2, 5, 9], "counts_from_label": [1, 2], "get_diverg": [1, 2], "get_nprevpoints_approxim": [1, 2, 12], "l1_norm": [1, 2], "linear_search": [1, 2], "normalize_preval": [1, 2], "num_prevalence_combin": [1, 2, 12], "optim_minim": [1, 2, 5], "prevalence_from_label": [1, 2], "prevalence_from_prob": [1, 2], "prevalence_linspac": [1, 2], "projection_simplex_sort": [1, 2, 5, 9], "softmax": [1, 2, 5, 9], "solve_adjust": [1, 2], "solve_adjustment_binari": [1, 2], "strprev": [1, 2, 6, 7], "ternary_search": [1, 2], "uniform_preval": [1, 2], "uniform_prevalence_sampl": [1, 2], "uniform_simplex_sampl": [1, 2], "model_select": [1, 5, 10, 12], "configstatu": [1, 2], "fail": [1, 2], "success": [1, 2, 6], "gridsearchq": [1, 2, 5, 10, 12], "best_model": [1, 2], "get_param": [1, 2, 3, 5, 9], "set_fit_request": [1, 2, 5], "set_param": [1, 2, 3, 5, 9], "statu": [1, 2], "invalid": [1, 2], "timeout": [1, 2], "cross_val_predict": [1, 2], "expand_grid": [1, 2], "group_param": [1, 2], "binary_bias_bin": [1, 2, 11], "binary_bias_glob": [1, 2, 11], "binary_diagon": [1, 2, 11], "brokenbar_supremacy_by_drift": [1, 2], "error_by_drift": [1, 2, 11], "prevalence_grid": [1, 2], "samples_paramet": [1, 2], "total": [1, 2, 6, 12], "abstractprotocol": [1, 2, 4, 12], "abstractstochasticseededprotocol": [1, 2, 12], "collat": [1, 2], "random_st": [1, 2, 4, 5, 11, 12], "artificialprevalenceprotocol": [1, 2], "domainmix": [1, 2], "iterateprotocol": [1, 2], "naturalprevalenceprotocol": [1, 2], "onlabelledcollectionprotocol": [1, 2, 7, 12], "return_typ": [1, 2, 12], "get_col": [1, 2], "get_labelled_collect": [1, 2], "on_preclassified_inst": [1, 2], "upp": [1, 2], "uniformprevalenceprotocol": [1, 2], "util": [1, 3, 4, 5], "earlystop": [1, 2], "create_if_not_exist": [1, 2], "create_parent_dir": [1, 2], "download_fil": [1, 2], "download_file_if_not_exist": [1, 2], "get_quapy_hom": [1, 2], "load_report": [1, 2], "map_parallel": [1, 2], "parallel": [1, 2, 3, 4, 5, 9, 10], "parallel_unpack": [1, 2], "pickled_resourc": [1, 2], "save_text_fil": [1, 2], "temp_se": [1, 2], "bctscalibr": [2, 3], "nbvscalibr": [2, 3], "recalibratedprobabilisticclassifi": [2, 3], "recalibratedprobabilisticclassifierbas": [2, 3], "classes_": [2, 3, 4, 5], "fit_cv": [2, 3], "fit_tr_val": [2, 3], "predict_proba": [2, 3, 5, 9], "tscalibr": [2, 3], "vscalibr": [2, 3], "lowranklogisticregress": [2, 3], "transform": [2, 3, 4, 6], "decision_funct": [2, 3, 5], "set_score_request": [2, 3], "valid_loss": [2, 3, 5, 9], "splitstratifi": [2, 4], "kfcv": [2, 3, 4, 6], "load": [2, 4, 6, 9, 12], "n_class": [2, 3, 4, 5, 9, 12], "reduc": [2, 4, 6, 7], "stat": [2, 4], "train_test": [2, 4, 9, 10, 11, 12], "vocabulary_s": [2, 4, 9], "labelledcollect": [2, 4, 5, 6, 9, 12], "x": [2, 3, 4, 5, 7, 9, 11], "xp": [2, 4], "xy": [2, 4], "join": [2, 4], "p": [2, 3, 4, 5, 6, 9], "sampling_from_index": [2, 4, 6], "sampling_index": [2, 4, 6], "split_random": [2, 4], "split_stratifi": [2, 4, 6, 10, 12], "uniform_sampl": [2, 4], "uniform_sampling_index": [2, 4], "y": [2, 3, 4, 5, 11], "fetch_ifcb": [2, 4, 6], "fetch_ucibinarydataset": [2, 4, 6, 9], "fetch_ucibinarylabelledcollect": [2, 4, 6], "fetch_ucimulticlassdataset": [2, 4, 6], "fetch_ucimulticlasslabelledcollect": [2, 4, 6], "fetch_lequa2022": [2, 4, 6], "fetch_review": [2, 4, 6, 9, 10, 11, 12], "warn": [2, 4, 5], "indextransform": [2, 4], "add_word": [2, 4], "fit_transform": [2, 4], "index": [2, 4, 6, 9], "reduce_column": [2, 4, 6], "standard": [2, 3, 4, 5, 6, 9, 11, 12], "text2tfidf": [2, 4, 6, 9], "binar": [2, 4], "from_csv": [2, 4], "from_spars": [2, 4], "from_text": [2, 4], "reindex_label": [2, 4], "normal": [2, 4, 5, 6, 9], "solver": [2, 5, 9], "aggregation_fit": [2, 5, 9], "getptecondestim": [2, 5], "newinvariantratioestim": [2, 5], "adjustedclassifyandcount": [2, 5], "aggregativecrispquantifi": [2, 5, 9], "aggregativemedianestim": [2, 5], "aggregativequantifi": [2, 5, 7, 9], "classifier_fit_predict": [2, 5, 9], "val_split": [2, 3, 5, 9], "val_split_": [2, 5], "aggregativesoftquantifi": [2, 5, 9], "bayesiancc": [2, 5], "get_conditional_probability_sampl": [2, 5], "get_prevalence_sampl": [2, 5, 9], "sample_from_posterior": [2, 5], "binaryaggregativequantifi": [2, 5], "neg_label": [2, 5], "pos_label": [2, 5], "cc": [2, 5, 9, 11], "classifyandcount": [2, 5, 9], "dmy": [2, 5, 9, 10], "distributionmatchingi": [2, 5], "dy": [2, 5, 9], "emq": [2, 5, 11], "em": [2, 5], "emq_bct": [2, 5], "epsilon": [2, 5, 7], "max_it": [2, 5], "set_predict_proba_request": [2, 5], "expectationmaximizationquantifi": [2, 5, 9], "hellingerdistancei": [2, 5, 9], "onevsallaggreg": [2, 5, 9], "pacc": [2, 5, 9, 11], "pcc": [2, 5, 9, 11], "probabilisticadjustedclassifyandcount": [2, 5], "probabilisticclassifyandcount": [2, 5], "sld": [2, 5, 9], "smm": [2, 5, 9], "newelm": [2, 5], "newsvma": [2, 5, 9], "newsvmkld": [2, 5, 9], "newsvmq": [2, 5, 9], "newsvmra": [2, 5, 9], "kdebas": [2, 5], "bandwidth_method": [2, 5], "get_kde_funct": [2, 5], "get_mixture_compon": [2, 5], "pdf": [2, 5, 11], "kdeyc": [2, 5], "gram_matrix_mix_sum": [2, 5], "kdeyhd": [2, 5], "kdeyml": [2, 5], "max": [2, 5, 6, 9], "condit": [2, 5, 9, 12], "m": [2, 5, 9], "ms2": [2, 5, 9], "discard": [2, 4, 5], "t50": [2, 5, 9], "thresholdoptim": [2, 5], "aggregate_with_threshold": [2, 5], "basequantifi": [2, 5, 9], "binaryquantifi": [2, 5], "onevsal": [2, 5, 9], "onevsallgener": [2, 5, 9], "newonevsal": [2, 5, 9], "eacc": [2, 5], "ecc": [2, 5], "eemq": [2, 5], "ehdi": [2, 5], "epacc": [2, 5], "valid_polici": [2, 5], "probabilist": [2, 3, 5, 9], "medianestim": [2, 5], "medianestimator2": [2, 5], "ensemblefactori": [2, 5], "get_probability_distribut": [2, 5], "dmx": [2, 5], "hdx": [2, 5], "distributionmatchingx": [2, 5], "maximumlikelihoodprevalenceestim": [2, 5], "readm": [2, 5], "std_constrained_linear_l": [2, 5], "prev": [2, 4, 6, 7, 12], "prevs_hat": [2, 7], "comput": [2, 5, 7, 9, 11, 12], "two": [2, 4, 5, 6, 9, 11, 12], "vector": [2, 3, 4, 5, 6, 9, 12], "hat": [2, 5], "frac": [2, 5], "mathcal": [2, 5], "sum_": [2, 5], "where": [2, 3, 4, 5, 9, 11], "ar": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "paramet": [2, 3, 4, 5, 7, 9, 10, 12], "arrai": [2, 3, 4, 5, 9, 11], "like": [2, 3, 4, 5, 6, 7, 9, 11, 12], "shape": [2, 3, 4, 5, 11], "return": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "y_true": 2, "y_pred": 2, "term": [2, 4, 5, 6, 9, 10, 11], "accuraci": [2, 5, 6, 7, 11], "tp": 2, "tn": 2, "fp": 2, "fn": 2, "stand": [2, 5, 9], "posit": [2, 4, 5, 6, 9, 11], "fals": [2, 3, 4, 5, 6, 7, 9, 11], "neg": [2, 5, 6, 11], "respect": [2, 5, 6, 7, 11], "f1": [2, 3], "simpli": [2, 5, 7, 8, 9, 10, 11], "macro": 2, "f_1": 2, "harmon": 2, "precis": [2, 6], "recal": 2, "defin": [2, 3, 4, 5, 6, 9, 12], "2tp": 2, "averag": [2, 4, 5, 6, 7, 9], "each": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "categori": 2, "independ": [2, 5], "err_nam": 2, "get": [2, 3, 4, 5, 6, 11, 12], "name": [2, 3, 4, 5, 9, 11], "string": [2, 4, 5, 7], "callabl": [2, 4, 5, 6], "ep": [2, 7], "none": [2, 3, 4, 5, 7, 9, 10, 12], "kullback": [2, 5, 9], "leibler": [2, 5, 9], "diverg": [2, 5, 9], "distribut": [2, 4, 5, 6, 7, 9, 11, 12], "d_": 2, "kl": 2, "log": [2, 4, 5], "factor": 2, "which": [2, 3, 4, 5, 6, 7, 9, 10, 11], "contain": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12], "zero": [2, 6], "typic": [2, 4, 5, 7, 9, 10, 11, 12], "2t": [2, 7], "t": [2, 3, 5, 6, 7], "size": [2, 4, 5, 6, 7, 9], "taken": [2, 4, 5, 9], "environ": [2, 5, 7, 9, 10, 11, 12], "variabl": [2, 4, 7, 9, 11], "sample_s": [2, 5, 6, 7, 9, 10, 11, 12], "ha": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "thu": [2, 3, 5, 6, 7, 9, 10, 11], "beforehand": 2, "pair": [2, 6], "n_sampl": [2, 3], "rel": [2, 4, 5, 7, 9], "squar": [2, 5, 9], "z_": 2, "2": [2, 4, 5, 6, 7, 9, 10, 11, 12], "min_": [2, 5], "math": [2, 5, 9], "2frac": 2, "underlin": 2, "displaystyl": 2, "error_metr": [2, 7, 10, 12], "str": [2, 3, 4, 5, 6], "aggr_speedup": [2, 7], "bool": [2, 3, 5], "auto": [2, 7], "verbos": [2, 3, 4, 5, 6, 10], "accord": [2, 3, 4, 5, 10], "specif": [2, 5, 7, 9, 10, 12], "one": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12], "object": [2, 3, 4, 5, 6, 12], "speed": [2, 7, 9], "up": [2, 5, 7, 9], "can": [2, 4, 5, 6, 7, 9, 10, 11, 12], "run": [2, 4, 5, 6, 8, 9, 11], "charg": [2, 4, 6], "repres": [2, 4, 5, 9, 11], "": [2, 4, 5, 6, 7, 9, 10, 11], "itself": [2, 5, 9], "whether": [2, 3, 4, 5], "forc": [2, 7], "number": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "collect": [2, 4, 5, 6, 12], "act": 2, "larger": [2, 5], "than": [2, 4, 5, 6, 7, 9, 10, 11, 12], "default": [2, 3, 4, 5, 9, 12], "let": [2, 5, 7, 9, 10], "decid": [2, 4, 12], "conveni": [2, 7, 9, 12], "deactiv": [2, 7], "boolean": [2, 4], "show": [2, 4, 5, 6, 9, 10, 11, 12], "stdout": 2, "score": [2, 3, 4, 5, 6, 9, 10], "float": [2, 3, 4, 5, 6, 9], "iter": [2, 4, 5, 6], "given": [2, 3, 4, 5, 7, 9, 10, 12], "list": [2, 4, 5, 6, 11], "report": [2, 5, 7], "panda": [2, 7], "datafram": [2, 7], "more": [2, 4, 5, 6, 7, 8, 9, 11, 12], "column": [2, 4, 6, 7], "have": [2, 4, 5, 6, 7, 9, 10, 11, 12], "been": [2, 3, 4, 5, 6, 9, 10, 11, 12], "indic": [2, 3, 4, 5, 6, 7, 9, 11, 12], "displai": [2, 3, 6, 7, 11, 12], "everi": [2, 6, 7, 9, 10, 12], "via": [2, 3, 5, 9, 12], "central": 2, "all": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12], "process": [2, 4, 7, 9, 10], "endow": 2, "optim": [2, 3, 5, 7, 8, 10], "larg": 2, "onli": [2, 3, 4, 5, 6, 7, 9, 11], "come": [2, 4, 5, 6, 7, 9, 12], "down": [2, 4, 5, 7, 11, 12], "onc": [2, 4, 6, 7, 9, 10, 11, 12], "over": [2, 5, 9, 10], "instead": [2, 3, 4, 5, 6, 7, 9, 12], "raw": [2, 4, 6], "so": [2, 4, 5, 6, 9, 11, 12], "never": [2, 12], "call": [2, 4, 6, 7, 9, 11, 12], "again": [2, 11], "behaviour": [2, 7, 9, 12], "obtain": [2, 3, 5, 12], "carri": [2, 4, 5, 6, 7, 9], "out": [2, 3, 4, 5, 6, 7, 9, 10, 11], "overal": 2, "need": [2, 4, 5, 6, 9, 12], "exce": 2, "undertaken": 2, "issu": [2, 5], "tupl": [2, 4, 5, 12], "true_prev": [2, 7, 11], "estim_prev": [2, 7, 11], "element": [2, 4, 9], "ndarrai": [2, 4, 5, 7, 9], "q": [2, 3, 5, 6, 8, 9], "hellingh": 2, "distanc": [2, 5], "hd": [2, 5, 9], "discret": [2, 5], "bin": [2, 5, 10, 11], "sqrt": [2, 5], "p_i": 2, "q_i": 2, "real": [2, 3, 4, 5], "1e": [2, 5], "20": [2, 5, 7, 9, 11], "topso": [2, 5], "left": [2, 4, 5], "right": [2, 4, 5, 10], "int": [2, 4, 5, 6, 11], "liter": [2, 5], "search": [2, 5, 10], "strategi": [2, 9, 10], "possibl": [2, 5, 7, 9, 12], "scipi": [2, 4], "linear": [2, 5, 9, 11], "problem": [2, 4, 5, 6, 9, 11], "space": [2, 3, 5, 10], "0": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "01": [2, 3, 5, 9, 10], "02": 2, "ternari": [2, 5], "yet": [2, 12], "np": [2, 4, 5, 7, 9, 10, 11, 12], "positive_preval": 2, "_supportsarrai": 2, "dtype": [2, 4, 7], "_nestedsequ": 2, "complex": 2, "byte": 2, "clip_if_necessari": 2, "helper": 2, "order": [2, 4, 5, 6, 9, 10, 11, 12], "guarante": [2, 4, 5, 9, 12], "valid": [2, 3, 4, 5, 6, 9, 10, 11, 12], "check": [2, 9], "rang": [2, 5, 9, 10, 11, 12], "rais": [2, 3, 5, 9], "raise_except": 2, "toler": [2, 5], "08": 2, "aggr": 2, "sum": [2, 5], "verifi": 2, "li": [2, 9], "simplex": [2, 5, 9], "arraylik": 2, "except": [2, 5, 9], "doe": [2, 5, 6, 8, 9], "lie": [2, 5], "otherwis": [2, 3, 4, 5, 6, 9], "altern": [2, 5, 7, 10], "matrix": [2, 5, 9, 11], "num_vector": 2, "l1": [2, 5, 9], "do": [2, 4, 5, 6, 7, 9, 10], "n_instanc": [2, 5], "correctli": 2, "when": [2, 3, 4, 5, 6, 7, 9, 11, 12], "some": [2, 3, 4, 5, 6, 7, 9, 11, 12], "len": 2, "same": [2, 4, 5, 6, 9, 10, 11, 12], "thei": [2, 5, 6, 9], "appear": [2, 11], "receiv": [2, 6, 9, 11], "argument": [2, 4, 5, 6, 7, 9, 11, 12], "That": [2, 7, 10], "alreadi": [2, 4, 7, 9], "tri": [2, 5], "instanti": [2, 3, 5, 6, 7, 9, 10, 12], "correspond": [2, 4, 5, 6, 7, 11], "combinations_budget": 2, "n_repeat": [2, 12], "largest": 2, "equidist": 2, "point": [2, 4, 5, 9, 12], "combin": [2, 5, 9, 10, 12], "dimension": [2, 4], "maximum": [2, 3, 4, 5, 6, 9, 12], "allow": [2, 3, 4, 5, 6, 8, 9, 11, 12], "repetit": 2, "less": [2, 4, 5], "unnormalized_arr": 2, "becom": [2, 12], "map": [2, 3, 5, 7], "onto": [2, 5], "uniform": [2, 4, 5], "mai": [2, 9], "happen": [2, 11], "avoid": [2, 9], "best": [2, 5, 10], "explor": [2, 9, 10], "step": [2, 5, 9, 11], "ineffici": 2, "ad": [2, 12], "complet": [2, 9, 11], "earli": 2, "literatur": [2, 6, 7, 10, 12], "A": [2, 3, 4, 5, 6, 7, 9], "power": 2, "consist": [2, 3, 4, 5, 6, 10, 11, 12], "convert": [2, 4, 5, 9], "emploi": [2, 5], "option": [2, 3, 4, 5, 6, 9, 11], "rescal": 2, "norm": [2, 5, 9], "mapsimplex": [2, 5, 9], "project": [2, 5, 9], "reli": [2, 5, 9, 12], "mathieu": [2, 5, 9], "blondel": [2, 5, 9], "n_prevpoint": [2, 12], "equal": [2, 5, 12], "distant": [2, 12], "calcul": [2, 5], "binom": 2, "n": [2, 3, 5, 6, 12], "c": [2, 3, 4, 5, 9, 10], "time": [2, 4, 5, 6, 7, 9, 12], "r": [2, 4, 5, 6, 9], "mass": 2, "block": [2, 6], "alloc": 2, "solut": [2, 5, 9], "star": 2, "bar": 2, "25": [2, 3, 5, 9, 11], "75": [2, 5, 10, 11, 12], "50": [2, 5, 6, 11], "yield": [2, 4, 5, 11, 12], "smallest": 2, "lost": 2, "constrain": [2, 4, 11, 12], "slsqp": 2, "routin": [2, 4, 5, 9], "proport": [2, 4, 5, 9], "posterior": [2, 3, 5, 9], "crisp": [2, 5, 7, 9], "decis": [2, 3, 5], "take": [2, 4, 5, 6, 9, 11, 12], "argmax": 2, "grid_point": 2, "21": [2, 9, 11, 12], "repeat": [2, 11, 12], "smooth_limits_epsilon": 2, "produc": [2, 6, 7, 11, 12], "uniformli": [2, 12], "separ": [2, 4], "By": [2, 9], "05": [2, 5, 11], "limit": [2, 5, 11, 12], "10": [2, 5, 6, 10, 11, 12], "15": [2, 4, 9], "90": [2, 11], "95": 2, "99": 2, "interv": [2, 11, 12], "quantiti": [2, 9], "add": [2, 4, 9, 10], "subtract": [2, 4, 6], "code": [2, 3, 6, 7, 8, 9, 10, 11, 12], "adapt": [2, 3], "bsd": 2, "licens": 2, "repo": [2, 4, 6], "accompani": 2, "akinori": 2, "fujino": 2, "naonori": 2, "ueda": 2, "scale": [2, 3, 5, 9], "euclidean": 2, "icpr": 2, "2014": 2, "url": 2, "were": [2, 6], "leav": [2, 4], "untouch": 2, "class_conditional_r": 2, "unadjusted_count": 2, "invers": [2, 5, 9], "invari": [2, 5, 9], "ratio": [2, 5, 9], "exact": [2, 4, 5, 6, 9, 12], "solv": [2, 5, 9, 10], "equat": [2, 5, 9], "unadjust": [2, 9, 11], "y_i": 2, "rate": [2, 5, 9], "m_": 2, "ij": 2, "y_j": 2, "entri": [2, 5, 6, 7], "j": [2, 4, 5, 6, 9], "being": [2, 5, 7, 10, 12], "belong": [2, 5, 9, 10], "end": [2, 5, 10], "exist": [2, 3, 5, 9, 12], "degener": [2, 9], "vaz": [2, 5, 9], "et": [2, 3, 4, 5, 6, 8, 9], "al": [2, 3, 4, 5, 6, 8, 9], "2018": [2, 4, 5, 6, 9], "replac": [2, 4, 5, 6, 9], "last": [2, 4, 5, 9, 11, 12], "must": [2, 4, 5, 9], "system": [2, 5, 7, 9, 10], "rank": [2, 3, 5, 9], "strictli": [2, 5], "lower": [2, 5, 11], "full": [2, 4, 5, 12], "deprec": [2, 5, 12], "remov": [2, 4, 5], "futur": [2, 9], "version": [2, 3, 5, 8], "alwai": [2, 5, 9, 11], "prevalence_estim": 2, "tpr": [2, 5], "fpr": [2, 5], "formula": 2, "might": [2, 4, 7], "prec": [2, 6], "represent": [2, 3, 5, 6, 9], "33": [2, 6, 11], "67": [2, 11], "decim": 2, "kraemer": [2, 12], "algorithm": [2, 5, 6, 12], "random": [2, 4, 5, 9, 11, 12], "unit": [2, 5, 6], "post": 2, "stackexchang": 2, "question": 2, "3227": 2, "_": [2, 4, 5, 6, 11], "integ": [2, 3, 4, 5, 9], "param": [2, 3, 5, 10], "msg": 2, "param_grid": [2, 5, 10, 12], "dict": [2, 4, 5], "type": [2, 3, 4, 5, 6, 9], "refit": [2, 10], "n_job": [2, 3, 4, 5, 9, 10, 12], "raise_error": 2, "grid": [2, 5, 10, 12], "target": [2, 9, 11], "hyperparamet": [2, 5, 9, 12], "dictionari": [2, 3, 4, 5], "kei": [2, 4], "quantification_error": 2, "whole": [2, 3, 6, 9, 10], "chosen": [2, 7, 10], "ignor": [2, 3, 4, 5, 6], "gen": 2, "establish": 2, "timer": 2, "second": [2, 4, 6, 7, 9, 11], "configur": [2, 5, 10], "whenev": [2, 11], "longer": [2, 5], "timeouterror": 2, "bound": [2, 5], "mark": [2, 10], "goe": [2, 10], "howev": [2, 6, 10, 11], "valueerror": 2, "after": [2, 5, 9], "hyper": [2, 3, 5, 10], "self": [2, 3, 4, 5, 9, 10], "deep": [2, 5, 9], "unus": [2, 3, 9], "contanin": 2, "unchang": [2, 3, 5], "metadata": [2, 3, 5], "pass": [2, 3, 5, 6, 7, 11], "note": [2, 3, 4, 5, 7, 9, 11, 12], "relev": [2, 3, 5], "enable_metadata_rout": [2, 3, 5], "set_config": [2, 3, 5], "user": [2, 3, 5, 6, 11, 12], "guid": [2, 3, 4, 5], "how": [2, 3, 4, 5, 6, 9, 10, 11], "rout": [2, 3, 5, 9], "work": [2, 3, 4, 5, 9, 11, 12], "alia": [2, 3, 4, 5, 9], "metadata_rout": [2, 3, 5], "retain": [2, 3, 5, 6, 9], "chang": [2, 3, 4, 5, 6, 7, 9], "sub": [2, 3, 5], "insid": [2, 3, 5], "pipelin": [2, 3, 5], "effect": [2, 3, 5, 9], "updat": [2, 3, 5], "enum": 2, "enumer": 2, "nfold": [2, 4, 6], "akin": [2, 5], "scikit": [2, 3, 4, 5, 9, 10], "fold": [2, 4, 5, 9], "cross": [2, 3, 4, 5, 9], "seed": [2, 4, 5, 12], "reproduc": [2, 4], "expand": 2, "100": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12], "b": [2, 4, 5, 6, 9], "assign": [2, 4, 9], "partit": [2, 3, 6], "anoth": [2, 5, 6, 7, 11, 12], "que": 2, "method_nam": [2, 11], "pos_class": [2, 4], "nbin": [2, 5, 10, 11], "colormap": 2, "matplotlib": 2, "color": [2, 11], "listedcolormap": 2, "vertical_xtick": 2, "legend": 2, "savepath": [2, 11], "box": [2, 9, 11], "local": 2, "bia": [2, 3, 5, 9], "sign": 2, "minu": 2, "classs": 2, "experi": [2, 4, 6, 9, 11], "compon": [2, 3, 5], "cm": 2, "tab10": 2, "secondari": 2, "path": [2, 3, 4, 5, 6, 9, 11], "save": [2, 4, 9, 11], "shown": [2, 11], "global": 2, "show_std": [2, 11], "train_prev": [2, 11], "method_ord": 2, "diagon": 2, "along": [2, 5, 6, 7, 9], "axi": [2, 11], "describ": [2, 5, 9], "henc": [2, 4, 5], "It": [2, 4, 6, 7, 9, 10, 11], "though": [2, 9], "prefer": [2, 7, 12], "deviat": [2, 4, 6, 11, 12], "band": [2, 11], "inconveni": 2, "compar": [2, 11], "high": [2, 5, 11], "leyend": 2, "hightlight": 2, "conduct": [2, 6], "impos": [2, 10], "associ": 2, "tr_prev": [2, 5, 11], "n_bin": [2, 5, 11], "isomer": 2, "x_error": 2, "y_error": 2, "ttest_alpha": 2, "005": 2, "tail_density_threshold": 2, "top": [2, 9], "region": 2, "form": [2, 4, 5, 6, 9], "broken": [2, 11], "chart": 2, "either": [2, 7, 9], "ii": 2, "statist": [2, 6, 12], "significantli": 2, "side": 2, "confid": [2, 9], "made": [2, 4, 5, 6, 8], "isometr": [2, 11], "percentil": 2, "divid": 2, "amount": [2, 5, 7, 9, 12], "abov": [2, 6, 8, 9, 11], "involv": [2, 11], "similar": [2, 5], "threshold": [2, 5], "densiti": [2, 5], "below": [2, 4, 6, 9, 11], "tail": 2, "outlier": 2, "error_nam": [2, 11], "show_dens": 2, "show_legend": 2, "logscal": 2, "vline": 2, "especi": 2, "cumberson": 2, "gain": 2, "understand": 2, "about": [2, 4, 5, 6, 9, 11], "fare": 2, "spectrum": [2, 11, 12], "low": [2, 3, 10, 11], "regim": 2, "v": [2, 3, 5, 9], "highlight": 2, "vertic": 2, "dot": [2, 11], "line": [2, 9], "n_preval": [2, 12], "sanity_check": 2, "10000": [2, 5], "sample_prev": [2, 12], "artifici": [2, 9, 10, 11], "drawn": [2, 4, 6, 12], "extract": [2, 4, 5], "copi": [2, 4], "replic": [2, 12], "sequenc": [2, 12], "skip": 2, "labelled_collect": [2, 12], "exhaust": 2, "dimens": [2, 3, 4, 5], "depend": [2, 5, 6, 9, 10, 11], "9": [2, 6, 11], "implicit": 2, "return_constrained_dim": 2, "rest": [2, 3, 4], "quit": 2, "obvious": 2, "determinist": 2, "anywher": 2, "multipli": 2, "realiz": 2, "necessari": [2, 5], "abstract": [2, 3, 4, 5, 9], "parent": 2, "known": [2, 5, 6, 9, 10], "enforc": 2, "fulli": [2, 6], "extend": [2, 5, 8, 9], "input": [2, 3, 4, 5, 9, 11], "arg": [2, 4, 5], "prepar": 2, "accommod": [2, 6], "desir": [2, 4, 6, 7, 9, 12], "format": [2, 4, 5, 6, 11], "befor": [2, 4, 5], "inherit": [2, 9, 12], "custom": [2, 4, 9, 12], "addit": [2, 9], "adher": 2, "properti": [2, 3, 4, 5, 9], "determin": [2, 10, 11, 12], "serv": [2, 4, 9], "domaina": 2, "domainb": 2, "mixture_point": 2, "mixtur": [2, 5, 9], "domain": 2, "control": [2, 12], "preserv": [2, 4, 11], "draw": [2, 5], "specifi": [2, 4, 5, 6, 9, 11, 12], "zip": [2, 6, 11], "simpl": [2, 5, 6, 9, 11], "previous": [2, 5], "natur": 2, "therefor": 2, "approxim": [2, 3, 9, 11], "classmethod": [2, 4, 5, 6], "pre_classif": 2, "in_plac": 2, "modifi": [2, 9], "pre": [2, 6, 9], "hard": [2, 3, 5, 9], "modif": 2, "place": [2, 4], "cover": [2, 12], "entir": [2, 6, 7, 9, 10, 11, 12], "sens": 2, "unlik": [2, 7], "endeavour": 2, "intract": 2, "patienc": 2, "lower_is_bett": 2, "stop": [2, 5], "network": [2, 4, 6], "epoch": 2, "best_epoch": 2, "best_scor": 2, "consecut": [2, 4, 5], "monitor": 2, "obtaind": 2, "held": [2, 3, 5, 9, 10], "split": [2, 3, 4, 5, 6, 9, 11], "wors": [2, 11], "far": [2, 4], "flag": 2, "keep": [2, 4], "track": 2, "seen": [2, 5, 11], "wa": [2, 4, 5, 6, 9, 11, 12], "o": [2, 6], "makedir": 2, "exist_ok": 2, "dir": [2, 5], "subdir": 2, "anotherdir": 2, "file": [2, 3, 4, 5, 6, 11], "txt": 2, "archive_filenam": 2, "download": [2, 4, 6, 8, 9], "destin": 2, "filenam": 2, "dowload": 2, "home": [2, 4], "directori": [2, 3, 4, 8], "perman": 2, "quapy_data": [2, 6], "as_dict": 2, "func": 2, "slice": 2, "item": 2, "worker": [2, 3, 4, 5], "asarrai": [2, 7], "backend": [2, 5], "loki": [2, 5], "wrapper": [2, 3, 4, 5], "multiprocess": [2, 5], "delai": 2, "args_i": 2, "silent": 2, "child": 2, "ensur": 2, "handl": [2, 6], "open_arg": 2, "pickle_path": 2, "generation_func": 2, "fast": [2, 4, 6], "reus": [2, 4, 6, 9], "resourc": 2, "next": [2, 4, 10], "invok": [2, 4, 6, 9, 12], "pickl": [2, 4, 9], "def": [2, 6, 7, 9, 11], "some_arrai": 2, "mock": [2, 3], "rand": 2, "my_arrai": 2, "pkl": 2, "first": [2, 4, 5, 6, 7, 8, 9, 11], "text": [2, 4, 6, 9], "disk": [2, 4], "miss": 2, "context": 2, "tempor": [2, 3], "without": [2, 9], "outer": 2, "numpi": [2, 3, 10, 12], "current": [2, 4, 5, 9], "state": 2, "random_se": 2, "within": [2, 5], "launch": 2, "close": [2, 4, 5, 9, 12], "start_msg": 2, "end_msg": 2, "sleep": 2, "begin": 2, "correct": [3, 5, 9], "temperatur": [3, 5, 9], "bct": [3, 5], "abstent": 3, "alexandari": [3, 5, 9], "stratifi": [3, 4, 5, 6, 9], "retrain": [3, 10], "afterward": 3, "No": [3, 5], "nbv": [3, 5], "re": [3, 4, 9, 10], "kundaj": 3, "shrikumar": 3, "2020": [3, 9], "novemb": 3, "likelihood": [3, 5, 9], "beat": [3, 5], "pp": [3, 6, 9, 10], "222": [3, 6], "232": 3, "pmlr": 3, "baseestim": [3, 5, 9], "calibratorfactori": 3, "n_featur": [3, 5], "manner": [3, 5, 6], "val": [3, 4, 6, 12], "These": [3, 5, 6, 7, 8, 9, 12], "n_compon": 3, "kwarg": [3, 4, 5], "embed": [3, 9], "requir": [3, 4, 5, 6, 7, 8, 9, 12], "easili": [3, 6, 11], "decomposit": 3, "truncatedsvd": 3, "while": [3, 4, 5, 6, 9, 11], "princip": 3, "logist": [3, 5, 9], "regress": 3, "length": [3, 4], "eventu": [3, 4], "unalt": 3, "emb": 3, "svmperf_bas": [3, 5], "host_fold": 3, "classifiermixin": 3, "svm": [3, 4, 5, 8, 9, 11], "perf": [3, 5, 8], "thorsten": 3, "joachim": [3, 5, 9], "patch": [3, 5, 8, 9], "instal": [3, 5, 6, 9], "document": [3, 4, 5, 6, 9, 11], "further": [3, 4, 5, 6, 9], "refer": [3, 4, 6], "2015": [3, 5, 6, 8, 9], "barranquero": [3, 5, 8, 9], "svm_perf_learn": 3, "svm_perf_classifi": 3, "trade": [3, 5], "off": [3, 5], "margin": [3, 5], "std": 3, "qacc": 3, "qf1": 3, "qgm": 3, "store": [3, 4, 5, 6], "tmp": 3, "automat": [3, 6], "delet": 3, "multivari": [3, 9], "sample_weight": 3, "12": 3, "26": [3, 6], "27": [3, 9], "13": [3, 6], "22": [3, 4, 6, 9], "23": [3, 9], "24": [3, 6, 7], "vocabulari": 4, "train_siz": 4, "6": [4, 6, 7, 9, 11], "conform": 4, "nrepeat": [4, 6], "around": [4, 5, 9, 12], "round": 4, "train_path": [4, 6], "test_path": [4, 6], "loader_func": [4, 6], "loader_kwarg": 4, "read": 4, "loader": [4, 6], "n_train": 4, "n_test": 4, "quick": 4, "kindl": [4, 6, 9, 11], "tfidf": [4, 6, 10, 11, 12], "min_df": [4, 9, 10, 11, 12], "tr": 4, "3821": [4, 6], "te": 4, "21591": [4, 6], "spars": [4, 6], "csr": 4, "csr_matrix": 4, "featur": [4, 5, 6], "4403": 4, "081": [4, 6], "919": [4, 6], "063": [4, 6], "937": [4, 6], "dedic": [4, 6, 7], "attach": 4, "them": [4, 5, 6, 9], "infer": [4, 6, 9], "linearsvc": [4, 9, 11], "my_collect": 4, "codefram": 4, "union": 4, "both": [4, 11], "frequenc": [4, 5, 6], "shuffl": 4, "lead": 4, "empti": 4, "sinc": [4, 5, 6, 7, 9, 10, 11, 12], "met": 4, "whose": [4, 5], "train_prop": [4, 10, 12], "randomli": [4, 6], "stratif": 4, "single_sample_train": [4, 6], "for_model_select": [4, 6], "data_hom": 4, "zenodo": [4, 6], "link": 4, "publicli": [4, 6], "whoi": [4, 6], "gonz\u00e1lez": [4, 5, 6, 9], "togeth": 4, "individu": [4, 9], "30": [4, 5, 6, 9, 10, 12], "86": [4, 6], "286": 4, "dump": 4, "quay_data": 4, "test_gen": [4, 6], "_ifcb": 4, "ifcbtrainsamplesfromdir": 4, "seri": [4, 6, 10], "ifcbtestsampl": 4, "dataset_nam": 4, "test_split": [4, 6], "p\u00e9rez": [4, 5, 6, 9], "g\u00e1llego": [4, 5, 6, 9], "quevedo": [4, 6, 9], "del": [4, 6, 9], "coz": [4, 6, 9], "2017": [4, 5, 6, 9], "characteriz": [4, 6, 9], "studi": [4, 6, 9], "fusion": [4, 6, 9], "34": [4, 6, 9], "87": [4, 6, 9], "castano": [4, 9], "2019": [4, 5, 9], "dynam": [4, 5, 9], "45": [4, 9, 11], "predefin": 4, "fetch_ucilabelledcollect": 4, "access": [4, 5, 6, 9], "uci_dataset": 4, "ml": [4, 5, 9], "repositori": [4, 6], "adopt": [4, 9, 10], "5fcvx2": 4, "x2": 4, "yeast": [4, 6], "min_test_split": [4, 6], "max_train_inst": 4, "25000": [4, 6], "min_class_support": 4, "archiv": 4, "ic": 4, "edu": 4, "criteria": [4, 10], "1000": [4, 5, 6, 10], "suit": 4, "ucimlrepo": 4, "dry": [4, 6], "bean": [4, 6], "uci_multiclass_dataset": 4, "minimum": [4, 5, 6], "higher": [4, 11, 12], "surpass": 4, "irrespect": [4, 5, 7, 11], "istanc": 4, "per": [4, 6], "fewer": 4, "deafult": 4, "offici": 4, "brief": [4, 6, 7], "t1a": [4, 6], "t1b": [4, 6], "t2a": [4, 6], "t2b": [4, 6], "28": [4, 6, 7, 9], "merchandis": [4, 6], "sperduti": [4, 6], "2022": [4, 5, 9, 12], "overview": [4, 6], "clef": [4, 6], "descript": [4, 6], "lequa2022_experi": [4, 6], "py": [4, 6, 9, 12], "folder": [4, 5, 6, 10, 12], "val_gen": [4, 6], "_lequa2022": 4, "samplesfromdir": 4, "subclass": [4, 5], "recurr": [4, 6, 9], "27th": [4, 6, 9], "reviews_sentiment_dataset": [4, 6], "hp": [4, 6, 9], "imdb": [4, 6, 10, 11, 12], "weight": 4, "matric": [4, 6, 11], "minimun": 4, "kept": 4, "faster": [4, 6], "subsequ": 4, "gao": [4, 5, 6, 9], "w": [4, 6, 9], "social": [4, 6, 9], "mining6": 4, "19": [4, 9], "2016": [4, 5, 9], "semeval13": [4, 6], "semeval14": [4, 6], "semeval15": [4, 6], "share": [4, 6], "twitter_sentiment_datasets_train": [4, 6], "twitter_sentiment_datasets_test": [4, 6], "gasp": [4, 6], "hcr": [4, 6, 9], "omd": [4, 6], "sander": [4, 6], "sst": [4, 6], "wb": [4, 6], "style": 4, "id": [4, 6, 9], "token": [4, 6], "countvector": 4, "keyword": [4, 5], "nogap": 4, "regardless": 4, "special": [4, 6, 11], "codifi": 4, "unknown": 4, "pad": 4, "surfac": 4, "assert": 4, "gap": 4, "preced": 4, "inplac": [4, 9], "To": [4, 11], "uniqu": 4, "rare": 4, "occur": [4, 11], "unk": 4, "occurr": 4, "org": [4, 5, 6], "stabl": 4, "feature_extract": 4, "html": 4, "subtyp": 4, "spmatrix": 4, "present": [4, 6, 9], "least": [4, 6], "infrequ": 4, "aka": [4, 5], "z": [4, 6], "sublinear_tf": 4, "part": [4, 9], "scall": 4, "tf": [4, 6], "counter": 4, "tfidfvector": 4, "categor": [4, 9], "toward": [4, 5, 11], "whcih": 4, "had": 4, "encod": 4, "utf": 4, "csv": 4, "feat1": 4, "feat2": 4, "featn": 4, "covari": [4, 5], "express": 4, "col": [4, 6], "row": [4, 7], "class2int": 4, "collet": 4, "fomart": 4, "progress": 4, "sentenc": 4, "classnam": 4, "u1": 4, "misclassif": 5, "invert": [5, 9], "p_c": 5, "l2": [5, 9], "ax": 5, "better": [5, 9], "consult": [5, 6, 9, 12], "buns": [5, 9], "On": [5, 9], "multi": [5, 9], "extens": [5, 6, 8, 9, 11], "2nd": [5, 6, 9], "workshop": [5, 9], "applic": [5, 9], "lq": [5, 9], "ecml": [5, 9], "pkdd": [5, 9], "grenobl": [5, 9], "franc": [5, 9], "outsid": [5, 9], "classif_predict": [5, 9], "y_": 5, "hat_yi": 5, "yj": 5, "yi": 5, "construct": [5, 9], "fit_classifi": [5, 9], "abc": 5, "base_quantifi": 5, "median": [5, 9], "parameter": 5, "parllel": 5, "subobject": 5, "well": [5, 6, 9, 11], "nest": 5, "latter": [5, 6, 9], "__": 5, "phase": [5, 9], "classification_fit": 5, "maintain": [5, 9], "attribut": 5, "actual": 5, "learner": [5, 9, 10], "give": [5, 12], "predict_on": [5, 9], "remaind": 5, "non": [5, 9], "soft": [5, 7, 9], "num_warmup": 5, "500": [5, 6, 7, 11], "num_sampl": 5, "mcmc_seed": 5, "bayesian": [5, 9], "rather": [5, 9, 10], "diagnos": 5, "degeneraci": 5, "visibl": 5, "confus": 5, "uncertainti": [5, 9], "extra": 5, "bay": [5, 9], "warmup": 5, "mcmc": 5, "sampler": 5, "basic": [5, 11], "One": [5, 6, 7, 9, 12], "noth": 5, "here": [5, 7], "cdf": [5, 9], "match": [5, 9], "helling": 5, "sought": [5, 9], "choic": [5, 7, 10], "channel": 5, "proper": [5, 9], "ch": 5, "particular": [5, 6, 9], "di": 5, "dij": 5, "fraction": [5, 9], "th": 5, "tol": 5, "got": [5, 10], "dl": 5, "doi": 5, "1145": 5, "3219819": 5, "3220059": 5, "histogram": 5, "classif_posterior": 5, "exact_train_prev": [5, 9], "recalib": [5, 9], "saeren": [5, 9], "latinn": [5, 9], "decaesteck": [5, 9], "mutual": 5, "recurs": 5, "wai": [5, 9, 12], "until": 5, "converg": 5, "heurist": [5, 7], "propos": [5, 8, 9, 12], "recalibr": 5, "meant": [5, 9], "messag": 5, "initi": [5, 6], "observ": [5, 7, 9], "posterior_prob": 5, "0001": 5, "reach": 5, "loop": 5, "ir": 5, "accordingli": [5, 11], "n_dimens": 5, "unlabel": 5, "binary_quantifi": 5, "parallel_backend": 5, "prevel": 5, "joblib": 5, "help": [5, 7, 11], "elm": [5, 8, 9], "cannot": 5, "temp": 5, "dure": [5, 7, 11], "resp": 5, "simplif": 5, "conceptu": [5, 10], "famili": [5, 9], "purpos": [5, 6, 12], "svmperf_hom": [5, 9], "properli": [5, 9], "underli": [5, 9, 10], "_kdei": 5, "common": [5, 9], "ancestor": 5, "kde": [5, 9], "scott": 5, "silverman": 5, "bandwidth": [5, 9], "wrap": 5, "kernel": 5, "kerneldens": 5, "evalut": 5, "kdei": 5, "cauchi": [5, 9], "schwarz": [5, 9], "mont": [5, 9], "carlo": [5, 9], "approach": [5, 9, 12], "alpha": 5, "delta": 5, "d": [5, 9], "boldsymbol": 5, "q_": 5, "widetild": 5, "u": [5, 7], "p_": 5, "alpha_i": 5, "l": 5, "_i": 5, "p_x": 5, "x_i": 5, "h": 5, "datapoint": 5, "center": [5, 11], "mathrm": 5, "dx": 5, "2dx": 5, "admit": 5, "montecarlo_tri": 5, "disntac": 5, "_f": 5, "trial": 5, "x_1": 5, "ldot": 5, "x_t": 5, "sim_": 5, "criterion": 5, "mathbb": 5, "_threshold_optim": 5, "forman": [5, 9, 12], "2006": [5, 9], "2008": [5, 9], "look": [5, 6, 11], "goal": 5, "bring": 5, "stabil": [5, 7], "denomin": 5, "sweep": [5, 9], "closest": 5, "choos": [5, 9], "ground": 5, "deliv": [5, 9, 10], "complement": 5, "param_mod_sel": 5, "param_model_sel": 5, "red_siz": [5, 9], "min_po": 5, "polici": [5, 9], "av": [5, 9], "max_sample_s": 5, "ptr": [5, 9], "member": [5, 9], "preliminari": 5, "final": [5, 7, 9, 11], "recomput": 5, "static": [5, 9], "compat": [5, 9], "recommend": [5, 7, 11], "gridsearchcv": [5, 10], "base_quantifier_class": 5, "factori": 5, "unifi": [5, 6], "interfac": [5, 6, 7], "logspac": [5, 10, 12], "class_weight": [5, 10, 11], "balanc": [5, 6, 10, 11], "110": 5, "setup": 5, "mimick": 5, "castro": [5, 9], "alaiz": [5, 9], "rodr\u00edguez": 5, "alegr": [5, 9], "2013": [5, 9], "nfeat": 5, "dissimilar": 5, "mlpe": 5, "lazi": 5, "put": 5, "assumpion": 5, "estimant": 5, "bootstrap_tri": 5, "bootstrap_rang": 5, "bagging_tri": 5, "bagging_rang": 5, "vectorizer_kwarg": 5, "class_cond_x": 5, "quapi": [6, 7, 8, 9, 10, 11, 12], "anyon": 6, "plai": 6, "role": 6, "1st": 6, "neutral": 6, "3rd": 6, "digit": 6, "17": [6, 9], "40": [6, 9], "tackl": [6, 9], "wiki": [6, 7, 9], "three": [6, 9, 11], "devic": [6, 9, 11], "harri": 6, "potter": 6, "movi": 6, "octob": [6, 9], "1775": [6, 9], "1778": [6, 9], "fhe": 6, "summar": 6, "9533": 6, "18399": 6, "018": 6, "982": 6, "065": 6, "935": 6, "idf": 6, "exemplifi": 6, "august": 6, "ieee": 6, "mine": [6, 9], "asonam": 6, "97": 6, "104": [6, 7], "semev": 6, "8788": 6, "3765": 6, "694582": 6, "421": 6, "496": 6, "082": 6, "407": 6, "507": 6, "086": 6, "1594": 6, "798": 6, "222046": 6, "546": 6, "211": 6, "243": 6, "640": 6, "167": 6, "193": 6, "1839": 6, "787": 6, "199151": 6, "463": 6, "271": 6, "266": 6, "437": 6, "283": 6, "280": 6, "2155": 6, "923": 6, "229399": 6, "161": 6, "691": 6, "148": 6, "164": [6, 9], "688": 6, "11338": 6, "3813": 6, "1215742": 6, "159": 6, "470": 6, "372": 6, "158": 6, "430": 6, "412": 6, "1853": 6, "109": 6, "361": 6, "530": 6, "2390": 6, "153": 6, "413": 6, "434": 6, "8000": 6, "2000": 6, "889504": 6, "157": 6, "351": 6, "492": 6, "163": 6, "341": 6, "497": 6, "2971": 6, "1271": 6, "376132": 6, "261": 6, "452": 6, "288": 6, "207": 6, "481": 6, "312": 6, "2184": 6, "936": 6, "248563": 6, "305": 6, "414": 6, "281": 6, "282": 6, "446": 6, "272": [6, 7], "4259": 6, "1823": 6, "404333": 6, "270": 6, "392": 6, "337": 6, "274": 6, "335": 6, "exactli": 6, "coincid": 6, "unabl": 6, "diabet": 6, "phonem": 6, "70": 6, "submit": 6, "practic": 6, "2x5fcv": 6, "dens": 6, "acut": 6, "120": 6, "508": 6, "583": 6, "417": 6, "625": 6, "539": 6, "461": 6, "922": 6, "078": 6, "breast": 6, "cancer": 6, "683": 6, "350": 6, "650": 6, "cmc": 6, "1473": 6, "573": 6, "427": 6, "774": 6, "226": 6, "653": 6, "347": 6, "ctg": 6, "2126": 6, "778": 6, "861": 6, "139": 6, "917": 6, "083": 6, "german": 6, "300": [6, 7], "700": 6, "haberman": [6, 9], "306": 6, "735": 6, "265": 6, "ionospher": 6, "641": 6, "359": 6, "iri": 6, "150": 6, "667": 6, "333": 6, "mammograph": 6, "830": 6, "514": 6, "486": 6, "pageblock": 6, "5473": 6, "979": 6, "021": 6, "semeion": 6, "1593": 6, "256": 6, "901": 6, "099": 6, "sonar": 6, "208": 6, "60": 6, "534": 6, "466": 6, "spambas": 6, "4601": 6, "57": 6, "606": 6, "394": 6, "spectf": 6, "267": 6, "44": 6, "794": 6, "206": 6, "tictacto": 6, "958": 6, "transfus": 6, "748": 6, "762": 6, "238": 6, "wdbc": 6, "569": 6, "627": 6, "373": 6, "wine": 6, "178": 6, "669": 6, "331": 6, "601": 6, "399": 6, "730": 6, "red": 6, "1599": 6, "465": 6, "535": 6, "white": 6, "4898": 6, "665": 6, "1484": 6, "711": 6, "289": 6, "action": 6, "moment": [6, 7, 9], "cardiotocographi": 6, "excel": 6, "xlrd": 6, "unix": 6, "compress": 6, "directli": [6, 9], "doabl": 6, "gzip": 6, "uncompress": 6, "softwar": 6, "manual": 6, "good": [6, 10, 11], "idea": [6, 12], "former": 6, "easi": 6, "extrem": 6, "difficult": [6, 11], "tend": [6, 11], "magnitud": 6, "greater": 6, "disproportion": 6, "impact": 6, "There": [6, 9], "own": [6, 10], "retriev": [6, 10], "platform": 6, "filter": 6, "000": 6, "api": [6, 9], "9527": 6, "4084": 6, "qualiti": 6, "3428": 6, "1470": 6, "academ": 6, "3096": 6, "1328": 6, "3933": 6, "1687": 6, "letter": 6, "14000": 6, "6000": 6, "val_gener": 6, "test_gener": 6, "doc": 6, "5000": [6, 7, 11, 12], "250": 6, "20000": 6, "speci": 6, "record": 6, "10036244": 6, "hsosik": 6, "pglez82": 6, "ifcb_zenodo": 6, "precomput": [6, 7], "200": [6, 7], "678": 6, "584474": 6, "246916": 6, "2626429": 6, "2922": 6, "2871": 6, "3873": 6, "min": 6, "59": 6, "6645": 6, "7375": 6, "9112": 6, "512": 6, "020": 6, "978": 6, "addition": 6, "deal": 6, "cl": 6, "my_data": 6, "dat": 6, "my_custom_load": 6, "rb": 6, "fin": 6, "varianc": [6, 11], "appeal": 7, "particularli": 7, "aris": 7, "under": [7, 9, 12], "belief": 7, "predictor": 7, "govern": 7, "explain": [7, 11], "third": [7, 11], "tradition": 7, "past": 7, "omit": 7, "thereaft": 7, "600": 7, "914": 7, "error_funct": 7, "procotol": 7, "wide": [7, 11, 12], "vari": [7, 9, 12], "prot": 7, "our": [7, 12], "evaluatio": 7, "4f": [7, 12], "often": 7, "account": 7, "rise": [7, 12], "straightforward": 7, "pd": 7, "set_opt": 7, "expand_frame_repr": 7, "308": 7, "692": 7, "314": 7, "686": 7, "005649": 7, "013182": 7, "000074": 7, "896": 7, "909": 7, "091": 7, "013145": 7, "069323": 7, "000985": 7, "848": 7, "152": 7, "809": 7, "191": 7, "039063": 7, "149806": 7, "005175": 7, "016": 7, "984": 7, "033": 7, "967": 7, "017236": 7, "487529": 7, "005298": 7, "728": 7, "751": 7, "249": 7, "022769": 7, "057146": 7, "001350": 7, "4995": 7, "72": 7, "698": 7, "302": 7, "021752": 7, "053631": 7, "001133": 7, "4996": 7, "868": 7, "132": 7, "888": 7, "112": 7, "020490": 7, "088230": 7, "001985": 7, "4997": 7, "292": 7, "708": 7, "298": 7, "702": 7, "006149": 7, "014788": 7, "000090": 7, "4998": 7, "76": 7, "220": 7, "780": 7, "019950": 7, "054309": 7, "001127": 7, "4999": 7, "948": 7, "052": 7, "965": 7, "035": 7, "016941": 7, "165776": 7, "003538": 7, "023588": 7, "108779": 7, "003631": 7, "float64": 7, "finish": [7, 10], "exit": 7, "smaller": 7, "1m": 7, "postpon": [7, 9], "convers": 7, "execut": 7, "lot": 7, "ext": 8, "compil": [8, 9], "prepare_svmperf": [8, 9], "sh": [8, 9], "job": 8, "svm_perf_quantif": [8, 9], "md": 8, "group": 9, "plan": 9, "fact": [9, 11], "shoud": 9, "abstractmethod": 9, "familiar": 9, "inspir": 9, "why": 9, "respond": 9, "simplifi": 9, "selector": 9, "_check_init_paramet": 9, "what": 9, "remain": 9, "ahead": 9, "anyth": 9, "overrid": 9, "overriden": 9, "quickli": 9, "inconsist": 9, "__init__": 9, "break": 9, "similarli": 9, "extern": 9, "fit_learn": 9, "pattern": 9, "advantag": [9, 12], "clone": 9, "huge": 9, "concern": 9, "effici": 9, "leverag": 9, "customarili": [9, 10], "done": [9, 10], "four": 9, "simplest": 9, "equip": [9, 11], "constructor": 9, "prevail": 9, "seem": 9, "calibratedclassifiercv": 9, "base_estim": 9, "cv": [9, 10], "As": [9, 10], "calibratedclassifi": 9, "lastli": 9, "everyth": 9, "said": 9, "aboud": 9, "now": [9, 11, 12], "mp": 9, "missclassif": 9, "attempt": 9, "minv": 9, "remark": 9, "izbicki": 9, "stern": 9, "journal": 9, "solvabl": 9, "introduc": 9, "ziegler": 9, "czy\u017c": 9, "black": 9, "arxiv": 9, "2023": 9, "latent": 9, "weak": 9, "plug": 9, "markov": 9, "chain": 9, "suitabl": 9, "nearli": 9, "slower": 9, "bayesian_quantif": 9, "2002": 9, "priori": 9, "14": 9, "41": 9, "although": [9, 10, 11, 12], "almost": 9, "accept": 9, "depart": 9, "suggest": 9, "rodr\u0131": 9, "guez": 9, "scienc": 9, "218": 9, "146": 9, "allia": 9, "just": [9, 12], "previou": 9, "overridden": 9, "firat": 9, "mutliclasshdi": 9, "maletzk": 9, "hassan": 9, "thank": 9, "pablo": 9, "contribut": 9, "achiev": [9, 10, 11, 12], "d\u00edez": 9, "reliabl": 9, "recognit": 9, "48": 9, "591": 9, "604": 9, "newsvmnkld": 9, "transact": 9, "discoveri": 9, "articl": [9, 10], "plo": 9, "ONE": 9, "nowadai": 9, "behav": [9, 11, 12], "Then": 9, "thing": [9, 12], "mycustomloss": 9, "oper": 9, "trivial": 9, "svmq": 9, "know": [9, 10], "explicit_loss_minim": 9, "one_vs_al": 9, "preprint": 9, "2401": 9, "00490": 9, "devis": 9, "too": 9, "variat": 9, "nor": 9, "inde": [9, 12], "regressor": 9, "lr": 9, "processor": 9, "torch": 9, "lstm": 9, "cnn": 9, "layer": 9, "neuralclassifiertrain": 9, "cnnnet": 9, "cuda": 9, "strongli": [10, 11], "wherebi": 10, "pick": 10, "assess": 10, "aim": [10, 11], "appropri": 10, "design": 10, "long": 10, "regard": 10, "section": [10, 12], "argu": 10, "ecir": 10, "91": 10, "varieti": 10, "exhibit": [10, 11, 12], "degre": 10, "distributionmatch": 10, "confront": [10, 12], "against": [10, 11], "devot": 10, "prefix": 10, "classifier__": 10, "classifier__c": [10, 12], "16": 10, "64": 10, "best_params_": 10, "best_model_": 10, "mae_scor": 10, "5f": 10, "start": 10, "hyperparam": 10, "04021": 10, "took": 10, "1356": 10, "04286": 10, "2139": 10, "04888": 10, "2491": 10, "001": 10, "05163": 10, "5372": 10, "02445": 10, "9056": 10, "02234": 10, "3114": 10, "develop": 10, "03102": 10, "computation": 10, "costli": 10, "try": 10, "theoret": 10, "suboptim": 10, "opt": 10, "flaw": 10, "hand": 10, "surrog": 10, "outcom": 11, "main": [11, 12], "variou": 11, "merg": 11, "55": 11, "showcas": 11, "gen_data": 11, "base_classifi": 11, "append": 11, "insight": 11, "view": 11, "unfortun": 11, "bin_diag": 11, "png": 11, "cyan": 11, "hidden": 11, "bias": 11, "evinc": 11, "bin_bia": 11, "unbias": 11, "overestim": 11, "rewrit": 11, "method_data": 11, "training_preval": 11, "linspac": 11, "training_s": 11, "suffic": 11, "train_sampl": 11, "clearli": 11, "subinterv": 11, "interestingli": 11, "enough": 11, "seemingli": 11, "tendenc": 11, "underestim": 11, "beyond": 11, "curios": 11, "pretti": 11, "discuss": 11, "analyz": 11, "harder": 11, "err_drift": 11, "clear": 11, "lowest": 11, "rememb": 11, "solid": 11, "comparison": [11, 12], "detriment": 11, "hide": 11, "robustli": 12, "presenc": 12, "stochast": 12, "fair": 12, "radom_st": 12, "technic": 12, "explan": 12, "custom_protocol": 12, "subject": 12, "2005": 12, "66": 12, "1771": 12, "signific": 12, "budg": 12, "budget": 12, "4960": 12, "usag": 12, "equial": 12, "val_app": 12, "cumbersom": 12, "increas": 12, "rapidli": 12, "impract": 12, "fix": 12, "legitim": 12, "drawback": 12, "elect": 12, "burden": 12, "incur": 12, "in_protocol": 12, "sometim": 12, "due": 12, "capabl": 12}, "objects": {"": [[2, 0, 0, "-", "quapy"]], "quapy": [[3, 0, 0, "-", "classification"], [4, 0, 0, "-", "data"], [2, 0, 0, "-", "error"], [2, 0, 0, "-", "evaluation"], [2, 0, 0, "-", "functional"], [5, 0, 0, "-", "method"], [2, 0, 0, "-", "model_selection"], [2, 0, 0, "-", "plot"], [2, 0, 0, "-", "protocol"], [2, 0, 0, "-", "util"]], "quapy.classification": [[3, 0, 0, "-", "calibration"], [3, 0, 0, "-", "methods"], [3, 0, 0, "-", "svmperf"]], "quapy.classification.calibration": [[3, 1, 1, "", "BCTSCalibration"], [3, 1, 1, "", "NBVSCalibration"], [3, 1, 1, "", "RecalibratedProbabilisticClassifier"], [3, 1, 1, "", "RecalibratedProbabilisticClassifierBase"], [3, 1, 1, "", "TSCalibration"], [3, 1, 1, "", "VSCalibration"]], "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase": [[3, 2, 1, "", "classes_"], [3, 3, 1, "", "fit"], [3, 3, 1, "", "fit_cv"], [3, 3, 1, "", "fit_tr_val"], [3, 3, 1, "", "predict"], [3, 3, 1, "", "predict_proba"]], "quapy.classification.methods": [[3, 1, 1, "", "LowRankLogisticRegression"]], "quapy.classification.methods.LowRankLogisticRegression": [[3, 3, 1, "", "fit"], [3, 3, 1, "", "get_params"], [3, 3, 1, "", "predict"], [3, 3, 1, "", "predict_proba"], [3, 3, 1, "", "set_params"], [3, 3, 1, "", "transform"]], "quapy.classification.svmperf": [[3, 1, 1, "", "SVMperf"]], "quapy.classification.svmperf.SVMperf": [[3, 3, 1, "", "decision_function"], [3, 3, 1, "", "fit"], [3, 3, 1, "", "predict"], [3, 3, 1, "", "set_score_request"], [3, 4, 1, "", "valid_losses"]], "quapy.data": [[4, 0, 0, "-", "base"], [4, 0, 0, "-", "datasets"], [4, 0, 0, "-", "preprocessing"], [4, 0, 0, "-", "reader"]], "quapy.data.base": [[4, 1, 1, "", "Dataset"], [4, 1, 1, "", "LabelledCollection"]], "quapy.data.base.Dataset": [[4, 3, 1, "", "SplitStratified"], [4, 2, 1, "", "binary"], [4, 2, 1, "", "classes_"], [4, 3, 1, "", "kFCV"], [4, 3, 1, "", "load"], [4, 2, 1, "", "n_classes"], [4, 3, 1, "", "reduce"], [4, 3, 1, "", "stats"], [4, 2, 1, "", "train_test"], [4, 2, 1, "", "vocabulary_size"]], "quapy.data.base.LabelledCollection": [[4, 2, 1, "", "X"], [4, 2, 1, "", "Xp"], [4, 2, 1, "", "Xy"], [4, 2, 1, "", "binary"], [4, 3, 1, "", "counts"], [4, 3, 1, "", "join"], [4, 3, 1, "", "kFCV"], [4, 3, 1, "", "load"], [4, 2, 1, "", "n_classes"], [4, 2, 1, "", "p"], [4, 3, 1, "", "prevalence"], [4, 3, 1, "", "sampling"], [4, 3, 1, "", "sampling_from_index"], [4, 3, 1, "", "sampling_index"], [4, 3, 1, "", "split_random"], [4, 3, 1, "", "split_stratified"], [4, 3, 1, "", "stats"], [4, 3, 1, "", "uniform_sampling"], [4, 3, 1, "", "uniform_sampling_index"], [4, 2, 1, "", "y"]], "quapy.data.datasets": [[4, 5, 1, "", "fetch_IFCB"], [4, 5, 1, "", "fetch_UCIBinaryDataset"], [4, 5, 1, "", "fetch_UCIBinaryLabelledCollection"], [4, 5, 1, "", "fetch_UCIMulticlassDataset"], [4, 5, 1, "", "fetch_UCIMulticlassLabelledCollection"], [4, 5, 1, "", "fetch_lequa2022"], [4, 5, 1, "", "fetch_reviews"], [4, 5, 1, "", "fetch_twitter"], [4, 5, 1, "", "warn"]], "quapy.data.preprocessing": [[4, 1, 1, "", "IndexTransformer"], [4, 5, 1, "", "index"], [4, 5, 1, "", "reduce_columns"], [4, 5, 1, "", "standardize"], [4, 5, 1, "", "text2tfidf"]], "quapy.data.preprocessing.IndexTransformer": [[4, 3, 1, "", "add_word"], [4, 3, 1, "", "fit"], [4, 3, 1, "", "fit_transform"], [4, 3, 1, "", "transform"], [4, 3, 1, "", "vocabulary_size"]], "quapy.data.reader": [[4, 5, 1, "", "binarize"], [4, 5, 1, "", "from_csv"], [4, 5, 1, "", "from_sparse"], [4, 5, 1, "", "from_text"], [4, 5, 1, "", "reindex_labels"]], "quapy.error": [[2, 5, 1, "", "absolute_error"], [2, 5, 1, "", "acc_error"], [2, 5, 1, "", "acce"], [2, 5, 1, "", "ae"], [2, 5, 1, "", "f1_error"], [2, 5, 1, "", "f1e"], [2, 5, 1, "", "from_name"], [2, 5, 1, "", "kld"], [2, 5, 1, "", "mae"], [2, 5, 1, "", "mean_absolute_error"], [2, 5, 1, "", "mean_normalized_absolute_error"], [2, 5, 1, "", "mean_normalized_relative_absolute_error"], [2, 5, 1, "", "mean_relative_absolute_error"], [2, 5, 1, "", "mkld"], [2, 5, 1, "", "mnae"], [2, 5, 1, "", "mnkld"], [2, 5, 1, "", "mnrae"], [2, 5, 1, "", "mrae"], [2, 5, 1, "", "mse"], [2, 5, 1, "", "nae"], [2, 5, 1, "", "nkld"], [2, 5, 1, "", "normalized_absolute_error"], [2, 5, 1, "", "normalized_relative_absolute_error"], [2, 5, 1, "", "nrae"], [2, 5, 1, "", "rae"], [2, 5, 1, "", "relative_absolute_error"], [2, 5, 1, "", "se"], [2, 5, 1, "", "smooth"]], "quapy.evaluation": [[2, 5, 1, "", "evaluate"], [2, 5, 1, "", "evaluate_on_samples"], [2, 5, 1, "", "evaluation_report"], [2, 5, 1, "", "prediction"]], "quapy.functional": [[2, 5, 1, "", "HellingerDistance"], [2, 5, 1, "", "TopsoeDistance"], [2, 5, 1, "", "argmin_prevalence"], [2, 5, 1, "", "as_binary_prevalence"], [2, 5, 1, "", "check_prevalence_vector"], [2, 5, 1, "", "clip"], [2, 5, 1, "", "condsoftmax"], [2, 5, 1, "", "counts_from_labels"], [2, 5, 1, "", "get_divergence"], [2, 5, 1, "", "get_nprevpoints_approximation"], [2, 5, 1, "", "l1_norm"], [2, 5, 1, "", "linear_search"], [2, 5, 1, "", "normalize_prevalence"], [2, 5, 1, "", "num_prevalence_combinations"], [2, 5, 1, "", "optim_minimize"], [2, 5, 1, "", "prevalence_from_labels"], [2, 5, 1, "", "prevalence_from_probabilities"], [2, 5, 1, "", "prevalence_linspace"], [2, 5, 1, "", "projection_simplex_sort"], [2, 5, 1, "", "softmax"], [2, 5, 1, "", "solve_adjustment"], [2, 5, 1, "", "solve_adjustment_binary"], [2, 5, 1, "", "strprev"], [2, 5, 1, "", "ternary_search"], [2, 5, 1, "", "uniform_prevalence"], [2, 5, 1, "", "uniform_prevalence_sampling"], [2, 5, 1, "", "uniform_simplex_sampling"]], "quapy.method": [[5, 0, 0, "-", "_kdey"], [5, 0, 0, "-", "_threshold_optim"], [5, 0, 0, "-", "aggregative"], [5, 0, 0, "-", "base"], [5, 0, 0, "-", "meta"], [5, 0, 0, "-", "non_aggregative"]], "quapy.method._kdey": [[5, 1, 1, "", "KDEBase"], [5, 1, 1, "", "KDEyCS"], [5, 1, 1, "", "KDEyHD"], [5, 1, 1, "", "KDEyML"]], "quapy.method._kdey.KDEBase": [[5, 4, 1, "", "BANDWIDTH_METHOD"], [5, 3, 1, "", "get_kde_function"], [5, 3, 1, "", "get_mixture_components"], [5, 3, 1, "", "pdf"]], "quapy.method._kdey.KDEyCS": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "gram_matrix_mix_sum"], [5, 3, 1, "", "set_fit_request"]], "quapy.method._kdey.KDEyHD": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "set_fit_request"]], "quapy.method._kdey.KDEyML": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim": [[5, 1, 1, "", "MAX"], [5, 1, 1, "", "MS"], [5, 1, 1, "", "MS2"], [5, 1, 1, "", "T50"], [5, 1, 1, "", "ThresholdOptimization"], [5, 1, 1, "", "X"]], "quapy.method._threshold_optim.MAX": [[5, 3, 1, "", "condition"], [5, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.MS": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "condition"], [5, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.MS2": [[5, 3, 1, "", "discard"], [5, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.T50": [[5, 3, 1, "", "condition"], [5, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.ThresholdOptimization": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregate_with_threshold"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "condition"], [5, 3, 1, "", "discard"], [5, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.X": [[5, 3, 1, "", "condition"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative": [[5, 1, 1, "", "ACC"], [5, 4, 1, "", "AdjustedClassifyAndCount"], [5, 1, 1, "", "AggregativeCrispQuantifier"], [5, 1, 1, "", "AggregativeMedianEstimator"], [5, 1, 1, "", "AggregativeQuantifier"], [5, 1, 1, "", "AggregativeSoftQuantifier"], [5, 1, 1, "", "BayesianCC"], [5, 1, 1, "", "BinaryAggregativeQuantifier"], [5, 1, 1, "", "CC"], [5, 4, 1, "", "ClassifyAndCount"], [5, 1, 1, "", "DMy"], [5, 4, 1, "", "DistributionMatchingY"], [5, 1, 1, "", "DyS"], [5, 1, 1, "", "EMQ"], [5, 4, 1, "", "ExpectationMaximizationQuantifier"], [5, 1, 1, "", "HDy"], [5, 4, 1, "", "HellingerDistanceY"], [5, 1, 1, "", "OneVsAllAggregative"], [5, 1, 1, "", "PACC"], [5, 1, 1, "", "PCC"], [5, 4, 1, "", "ProbabilisticAdjustedClassifyAndCount"], [5, 4, 1, "", "ProbabilisticClassifyAndCount"], [5, 4, 1, "", "SLD"], [5, 1, 1, "", "SMM"], [5, 5, 1, "", "newELM"], [5, 5, 1, "", "newSVMAE"], [5, 5, 1, "", "newSVMKLD"], [5, 5, 1, "", "newSVMQ"], [5, 5, 1, "", "newSVMRAE"]], "quapy.method.aggregative.ACC": [[5, 4, 1, "", "METHODS"], [5, 4, 1, "", "NORMALIZATIONS"], [5, 4, 1, "", "SOLVERS"], [5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "getPteCondEstim"], [5, 3, 1, "", "newInvariantRatioEstimation"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.AggregativeCrispQuantifier": [[5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.AggregativeMedianEstimator": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_fit_request"], [5, 3, 1, "", "set_params"]], "quapy.method.aggregative.AggregativeQuantifier": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 2, 1, "", "classes_"], [5, 2, 1, "", "classifier"], [5, 3, 1, "", "classifier_fit_predict"], [5, 3, 1, "", "classify"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_fit_request"], [5, 2, 1, "", "val_split"], [5, 4, 1, "", "val_split_"]], "quapy.method.aggregative.AggregativeSoftQuantifier": [[5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.BayesianCC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "get_conditional_probability_samples"], [5, 3, 1, "", "get_prevalence_samples"], [5, 3, 1, "", "sample_from_posterior"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.BinaryAggregativeQuantifier": [[5, 3, 1, "", "fit"], [5, 2, 1, "", "neg_label"], [5, 2, 1, "", "pos_label"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.CC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.DMy": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.DyS": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.EMQ": [[5, 3, 1, "", "EM"], [5, 3, 1, "", "EMQ_BCTS"], [5, 4, 1, "", "EPSILON"], [5, 4, 1, "", "MAX_ITER"], [5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "classify"], [5, 3, 1, "", "predict_proba"], [5, 3, 1, "", "set_fit_request"], [5, 3, 1, "", "set_predict_proba_request"]], "quapy.method.aggregative.HDy": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.OneVsAllAggregative": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "classify"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.PACC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "getPteCondEstim"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.PCC": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.SMM": [[5, 3, 1, "", "aggregate"], [5, 3, 1, "", "aggregation_fit"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.base": [[5, 1, 1, "", "BaseQuantifier"], [5, 1, 1, "", "BinaryQuantifier"], [5, 1, 1, "", "OneVsAll"], [5, 1, 1, "", "OneVsAllGeneric"], [5, 5, 1, "", "newOneVsAll"]], "quapy.method.base.BaseQuantifier": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.base.BinaryQuantifier": [[5, 3, 1, "", "set_fit_request"]], "quapy.method.base.OneVsAllGeneric": [[5, 2, 1, "", "classes_"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.meta": [[5, 5, 1, "", "EACC"], [5, 5, 1, "", "ECC"], [5, 5, 1, "", "EEMQ"], [5, 5, 1, "", "EHDy"], [5, 5, 1, "", "EPACC"], [5, 1, 1, "", "Ensemble"], [5, 1, 1, "", "MedianEstimator"], [5, 1, 1, "", "MedianEstimator2"], [5, 5, 1, "", "ensembleFactory"], [5, 5, 1, "", "get_probability_distribution"]], "quapy.method.meta.Ensemble": [[5, 4, 1, "", "VALID_POLICIES"], [5, 2, 1, "", "aggregative"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 2, 1, "", "probabilistic"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_fit_request"], [5, 3, 1, "", "set_params"]], "quapy.method.meta.MedianEstimator": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_fit_request"], [5, 3, 1, "", "set_params"]], "quapy.method.meta.MedianEstimator2": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "get_params"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_fit_request"], [5, 3, 1, "", "set_params"]], "quapy.method.non_aggregative": [[5, 1, 1, "", "DMx"], [5, 4, 1, "", "DistributionMatchingX"], [5, 1, 1, "", "MaximumLikelihoodPrevalenceEstimation"], [5, 1, 1, "", "ReadMe"]], "quapy.method.non_aggregative.DMx": [[5, 3, 1, "", "HDx"], [5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_fit_request"]], "quapy.method.non_aggregative.ReadMe": [[5, 3, 1, "", "fit"], [5, 3, 1, "", "quantify"], [5, 3, 1, "", "set_fit_request"], [5, 3, 1, "", "std_constrained_linear_ls"]], "quapy.model_selection": [[2, 1, 1, "", "ConfigStatus"], [2, 1, 1, "", "GridSearchQ"], [2, 1, 1, "", "Status"], [2, 5, 1, "", "cross_val_predict"], [2, 5, 1, "", "expand_grid"], [2, 5, 1, "", "group_params"]], "quapy.model_selection.ConfigStatus": [[2, 3, 1, "", "failed"], [2, 3, 1, "", "success"]], "quapy.model_selection.GridSearchQ": [[2, 3, 1, "", "best_model"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "quantify"], [2, 3, 1, "", "set_fit_request"], [2, 3, 1, "", "set_params"]], "quapy.model_selection.Status": [[2, 4, 1, "", "ERROR"], [2, 4, 1, "", "INVALID"], [2, 4, 1, "", "SUCCESS"], [2, 4, 1, "", "TIMEOUT"]], "quapy.plot": [[2, 5, 1, "", "binary_bias_bins"], [2, 5, 1, "", "binary_bias_global"], [2, 5, 1, "", "binary_diagonal"], [2, 5, 1, "", "brokenbar_supremacy_by_drift"], [2, 5, 1, "", "error_by_drift"]], "quapy.protocol": [[2, 1, 1, "", "APP"], [2, 1, 1, "", "AbstractProtocol"], [2, 1, 1, "", "AbstractStochasticSeededProtocol"], [2, 4, 1, "", "ArtificialPrevalenceProtocol"], [2, 1, 1, "", "DomainMixer"], [2, 1, 1, "", "IterateProtocol"], [2, 1, 1, "", "NPP"], [2, 4, 1, "", "NaturalPrevalenceProtocol"], [2, 1, 1, "", "OnLabelledCollectionProtocol"], [2, 1, 1, "", "UPP"], [2, 4, 1, "", "UniformPrevalenceProtocol"]], "quapy.protocol.APP": [[2, 3, 1, "", "prevalence_grid"], [2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.protocol.AbstractProtocol": [[2, 3, 1, "", "total"]], "quapy.protocol.AbstractStochasticSeededProtocol": [[2, 3, 1, "", "collator"], [2, 2, 1, "", "random_state"], [2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"]], "quapy.protocol.DomainMixer": [[2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.protocol.IterateProtocol": [[2, 3, 1, "", "total"]], "quapy.protocol.NPP": [[2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.protocol.OnLabelledCollectionProtocol": [[2, 4, 1, "", "RETURN_TYPES"], [2, 3, 1, "", "get_collator"], [2, 3, 1, "", "get_labelled_collection"], [2, 3, 1, "", "on_preclassified_instances"]], "quapy.protocol.UPP": [[2, 3, 1, "", "sample"], [2, 3, 1, "", "samples_parameters"], [2, 3, 1, "", "total"]], "quapy.util": [[2, 1, 1, "", "EarlyStop"], [2, 5, 1, "", "create_if_not_exist"], [2, 5, 1, "", "create_parent_dir"], [2, 5, 1, "", "download_file"], [2, 5, 1, "", "download_file_if_not_exists"], [2, 5, 1, "", "get_quapy_home"], [2, 5, 1, "", "load_report"], [2, 5, 1, "", "map_parallel"], [2, 5, 1, "", "parallel"], [2, 5, 1, "", "parallel_unpack"], [2, 5, 1, "", "pickled_resource"], [2, 5, 1, "", "save_text_file"], [2, 5, 1, "", "temp_seed"], [2, 5, 1, "", "timeout"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"quickstart": 0, "instal": 0, "cite": 0, "quapi": [0, 1, 2, 3, 4, 5], "usag": 0, "manual": 0, "featur": 0, "contribut": 0, "acknowledg": 0, "packag": [2, 3, 4, 5], "subpackag": 2, "submodul": [2, 3, 4, 5], "error": [2, 7, 11], "modul": [2, 3, 4, 5], "evalu": [2, 7], "function": 2, "model_select": 2, "plot": [2, 11], "protocol": [2, 7, 12], "util": 2, "content": [2, 3, 4, 5], "classif": [3, 10], "calibr": 3, "method": [3, 5, 9], "neural": [3, 9], "svmperf": 3, "data": [4, 6], "base": [4, 5], "dataset": [4, 6], "preprocess": 4, "reader": 4, "aggreg": [5, 9], "meta": [5, 9], "non_aggreg": 5, "compos": 5, "review": 6, "twitter": 6, "sentiment": 6, "uci": 6, "machin": 6, "learn": 6, "binari": 6, "issu": 6, "multiclass": 6, "lequa": 6, "2022": 6, "ifcb": 6, "plankton": 6, "ad": 6, "custom": 6, "process": 6, "measur": 7, "explicit": [8, 9], "loss": [8, 9, 10], "minim": [8, 9], "quantif": [9, 10, 11], "The": 9, "classifi": 9, "count": 9, "variant": 9, "bayesiancc": 9, "new": 9, "v0": 9, "1": 9, "9": 9, "expect": 9, "maxim": 9, "emq": 9, "helling": 9, "distanc": 9, "y": 9, "hdy": 9, "threshold": 9, "optim": 9, "kernel": 9, "densiti": 9, "estim": 9, "kdei": 9, "model": [9, 10], "ensembl": 9, "quanet": 9, "network": 9, "select": 10, "target": 10, "orient": 10, "diagon": 11, "bia": 11, "drift": 11, "artifici": 12, "preval": 12, "sampl": 12, "from": 12, "unit": 12, "simplex": 12, "uniform": 12, "upp": 12, "natur": 12, "other": 12}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Quickstart": [[0, "quickstart"]], "Installation": [[0, "installation"]], "Citing QuaPy": [[0, "citing-quapy"]], "Usage": [[0, "usage"]], "Manuals": [[0, "manuals"]], "Features": [[0, "features"]], "Contributing": [[0, "contributing"]], "Acknowledgments": [[0, "acknowledgments"]], "quapy": [[1, "quapy"]], "quapy package": [[2, "quapy-package"]], "Subpackages": [[2, "subpackages"]], "Submodules": [[2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"]], "quapy.error module": [[2, "module-quapy.error"]], "quapy.evaluation module": [[2, "module-quapy.evaluation"]], "quapy.functional module": [[2, "module-quapy.functional"]], "quapy.model_selection module": [[2, "module-quapy.model_selection"]], "quapy.plot module": [[2, "module-quapy.plot"]], "quapy.protocol module": [[2, "module-quapy.protocol"]], "quapy.util module": [[2, "module-quapy.util"]], "Module contents": [[2, "module-quapy"], [3, "module-quapy.classification"], [4, "module-quapy.data"], [5, "module-quapy.method"]], "quapy.classification package": [[3, "quapy-classification-package"]], "quapy.classification.calibration module": [[3, "module-quapy.classification.calibration"]], "quapy.classification.methods module": [[3, "module-quapy.classification.methods"]], "quapy.classification.neural module": [[3, "quapy-classification-neural-module"]], "quapy.classification.svmperf module": [[3, "module-quapy.classification.svmperf"]], "quapy.data package": [[4, "quapy-data-package"]], "quapy.data.base module": [[4, "module-quapy.data.base"]], "quapy.data.datasets module": [[4, "module-quapy.data.datasets"]], "quapy.data.preprocessing module": [[4, "module-quapy.data.preprocessing"]], "quapy.data.reader module": [[4, "module-quapy.data.reader"]], "quapy.method package": [[5, "quapy-method-package"]], "quapy.method.aggregative module": [[5, "module-quapy.method.aggregative"]], "quapy.method.base module": [[5, "module-quapy.method.base"]], "quapy.method.meta module": [[5, "module-quapy.method.meta"]], "quapy.method.non_aggregative module": [[5, "module-quapy.method.non_aggregative"]], "quapy.method.composable module": [[5, "quapy-method-composable-module"]], "Datasets": [[6, "datasets"]], "Reviews Datasets": [[6, "reviews-datasets"]], "Twitter Sentiment Datasets": [[6, "twitter-sentiment-datasets"]], "UCI Machine Learning": [[6, "uci-machine-learning"]], "Binary datasets": [[6, "binary-datasets"]], "Issues:": [[6, "issues"]], "Multiclass datasets": [[6, "multiclass-datasets"]], "LeQua 2022 Datasets": [[6, "lequa-2022-datasets"]], "IFCB Plankton dataset": [[6, "ifcb-plankton-dataset"]], "Adding Custom Datasets": [[6, "adding-custom-datasets"]], "Data Processing": [[6, "data-processing"]], "Evaluation": [[7, "evaluation"]], "Error Measures": [[7, "error-measures"]], "Evaluation Protocols": [[7, "evaluation-protocols"]], "Explicit Loss Minimization": [[8, "explicit-loss-minimization"], [9, "explicit-loss-minimization"]], "Quantification Methods": [[9, "quantification-methods"]], "Aggregative Methods": [[9, "aggregative-methods"]], "The Classify & Count variants": [[9, "the-classify-count-variants"]], "BayesianCC (New in v0.1.9!)": [[9, "bayesiancc-new-in-v0-1-9"]], "Expectation Maximization (EMQ)": [[9, "expectation-maximization-emq"]], "Hellinger Distance y (HDy)": [[9, "hellinger-distance-y-hdy"]], "Threshold Optimization methods": [[9, "threshold-optimization-methods"]], "Kernel Density Estimation methods (KDEy)": [[9, "kernel-density-estimation-methods-kdey"]], "Meta Models": [[9, "meta-models"]], "Ensembles": [[9, "ensembles"]], "The QuaNet neural network": [[9, "the-quanet-neural-network"]], "Model Selection": [[10, "model-selection"]], "Targeting a Quantification-oriented loss": [[10, "targeting-a-quantification-oriented-loss"]], "Targeting a Classification-oriented loss": [[10, "targeting-a-classification-oriented-loss"]], "Plotting": [[11, "plotting"]], "Diagonal Plot": [[11, "diagonal-plot"]], "Quantification bias": [[11, "quantification-bias"]], "Error by Drift": [[11, "error-by-drift"]], "Protocols": [[12, "protocols"]], "Artificial-Prevalence Protocol": [[12, "artificial-prevalence-protocol"]], "Sampling from the unit-simplex, the Uniform-Prevalence Protocol (UPP)": [[12, "sampling-from-the-unit-simplex-the-uniform-prevalence-protocol-upp"]], "Natural-Prevalence Protocol": [[12, "natural-prevalence-protocol"]], "Other protocols": [[12, "other-protocols"]]}, "indexentries": {"app (class in quapy.protocol)": [[2, "quapy.protocol.APP"]], "abstractprotocol (class in quapy.protocol)": [[2, "quapy.protocol.AbstractProtocol"]], "abstractstochasticseededprotocol (class in quapy.protocol)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol"]], "artificialprevalenceprotocol (in module quapy.protocol)": [[2, "quapy.protocol.ArtificialPrevalenceProtocol"]], "configstatus (class in quapy.model_selection)": [[2, "quapy.model_selection.ConfigStatus"]], "domainmixer (class in quapy.protocol)": [[2, "quapy.protocol.DomainMixer"]], "error (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.ERROR"]], "earlystop (class in quapy.util)": [[2, "quapy.util.EarlyStop"]], "gridsearchq (class in quapy.model_selection)": [[2, "quapy.model_selection.GridSearchQ"]], "hellingerdistance() (in module quapy.functional)": [[2, "quapy.functional.HellingerDistance"]], "invalid (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.INVALID"]], "iterateprotocol (class in quapy.protocol)": [[2, "quapy.protocol.IterateProtocol"]], "npp (class in quapy.protocol)": [[2, "quapy.protocol.NPP"]], "naturalprevalenceprotocol (in module quapy.protocol)": [[2, "quapy.protocol.NaturalPrevalenceProtocol"]], "onlabelledcollectionprotocol (class in quapy.protocol)": [[2, "quapy.protocol.OnLabelledCollectionProtocol"]], "return_types (quapy.protocol.onlabelledcollectionprotocol attribute)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.RETURN_TYPES"]], "success (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.SUCCESS"]], "status (class in quapy.model_selection)": [[2, "quapy.model_selection.Status"]], "timeout (quapy.model_selection.status attribute)": [[2, "quapy.model_selection.Status.TIMEOUT"]], "topsoedistance() (in module quapy.functional)": [[2, "quapy.functional.TopsoeDistance"]], "upp (class in quapy.protocol)": [[2, "quapy.protocol.UPP"]], "uniformprevalenceprotocol (in module quapy.protocol)": [[2, "quapy.protocol.UniformPrevalenceProtocol"]], "absolute_error() (in module quapy.error)": [[2, "quapy.error.absolute_error"]], "acc_error() (in module quapy.error)": [[2, "quapy.error.acc_error"]], "acce() (in module quapy.error)": [[2, "quapy.error.acce"]], "ae() (in module quapy.error)": [[2, "quapy.error.ae"]], "argmin_prevalence() (in module quapy.functional)": [[2, "quapy.functional.argmin_prevalence"]], "as_binary_prevalence() (in module quapy.functional)": [[2, "quapy.functional.as_binary_prevalence"]], "best_model() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.best_model"]], "binary_bias_bins() (in module quapy.plot)": [[2, "quapy.plot.binary_bias_bins"]], "binary_bias_global() (in module quapy.plot)": [[2, "quapy.plot.binary_bias_global"]], "binary_diagonal() (in module quapy.plot)": [[2, "quapy.plot.binary_diagonal"]], "brokenbar_supremacy_by_drift() (in module quapy.plot)": [[2, "quapy.plot.brokenbar_supremacy_by_drift"]], "check_prevalence_vector() (in module quapy.functional)": [[2, "quapy.functional.check_prevalence_vector"]], "clip() (in module quapy.functional)": [[2, "quapy.functional.clip"]], "collator() (quapy.protocol.abstractstochasticseededprotocol method)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.collator"]], "condsoftmax() (in module quapy.functional)": [[2, "quapy.functional.condsoftmax"]], "counts_from_labels() (in module quapy.functional)": [[2, "quapy.functional.counts_from_labels"]], "create_if_not_exist() (in module quapy.util)": [[2, "quapy.util.create_if_not_exist"]], "create_parent_dir() (in module quapy.util)": [[2, "quapy.util.create_parent_dir"]], "cross_val_predict() (in module quapy.model_selection)": [[2, "quapy.model_selection.cross_val_predict"]], "download_file() (in module quapy.util)": [[2, "quapy.util.download_file"]], "download_file_if_not_exists() (in module quapy.util)": [[2, "quapy.util.download_file_if_not_exists"]], "error_by_drift() (in module quapy.plot)": [[2, "quapy.plot.error_by_drift"]], "evaluate() (in module quapy.evaluation)": [[2, "quapy.evaluation.evaluate"]], "evaluate_on_samples() (in module quapy.evaluation)": [[2, "quapy.evaluation.evaluate_on_samples"]], "evaluation_report() (in module quapy.evaluation)": [[2, "quapy.evaluation.evaluation_report"]], "expand_grid() (in module quapy.model_selection)": [[2, "quapy.model_selection.expand_grid"]], "f1_error() (in module quapy.error)": [[2, "quapy.error.f1_error"]], "f1e() (in module quapy.error)": [[2, "quapy.error.f1e"]], "failed() (quapy.model_selection.configstatus method)": [[2, "quapy.model_selection.ConfigStatus.failed"]], "fit() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.fit"]], "from_name() (in module quapy.error)": [[2, "quapy.error.from_name"]], "get_collator() (quapy.protocol.onlabelledcollectionprotocol class method)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.get_collator"]], "get_divergence() (in module quapy.functional)": [[2, "quapy.functional.get_divergence"]], "get_labelled_collection() (quapy.protocol.onlabelledcollectionprotocol method)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.get_labelled_collection"]], "get_nprevpoints_approximation() (in module quapy.functional)": [[2, "quapy.functional.get_nprevpoints_approximation"]], "get_params() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.get_params"]], "get_quapy_home() (in module quapy.util)": [[2, "quapy.util.get_quapy_home"]], "group_params() (in module quapy.model_selection)": [[2, "quapy.model_selection.group_params"]], "kld() (in module quapy.error)": [[2, "quapy.error.kld"]], "l1_norm() (in module quapy.functional)": [[2, "quapy.functional.l1_norm"]], "linear_search() (in module quapy.functional)": [[2, "quapy.functional.linear_search"]], "load_report() (in module quapy.util)": [[2, "quapy.util.load_report"]], "mae() (in module quapy.error)": [[2, "quapy.error.mae"]], "map_parallel() (in module quapy.util)": [[2, "quapy.util.map_parallel"]], "mean_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_absolute_error"]], "mean_normalized_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_normalized_absolute_error"]], "mean_normalized_relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_normalized_relative_absolute_error"]], "mean_relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.mean_relative_absolute_error"]], "mkld() (in module quapy.error)": [[2, "quapy.error.mkld"]], "mnae() (in module quapy.error)": [[2, "quapy.error.mnae"]], "mnkld() (in module quapy.error)": [[2, "quapy.error.mnkld"]], "mnrae() (in module quapy.error)": [[2, "quapy.error.mnrae"]], "module": [[2, "module-quapy"], [2, "module-quapy.error"], [2, "module-quapy.evaluation"], [2, "module-quapy.functional"], [2, "module-quapy.model_selection"], [2, "module-quapy.plot"], [2, "module-quapy.protocol"], [2, "module-quapy.util"], [3, "module-quapy.classification"], [3, "module-quapy.classification.calibration"], [3, "module-quapy.classification.methods"], [3, "module-quapy.classification.svmperf"], [4, "module-quapy.data"], [4, "module-quapy.data.base"], [4, "module-quapy.data.datasets"], [4, "module-quapy.data.preprocessing"], [4, "module-quapy.data.reader"], [5, "module-quapy.method"], [5, "module-quapy.method._kdey"], [5, "module-quapy.method._threshold_optim"], [5, "module-quapy.method.aggregative"], [5, "module-quapy.method.base"], [5, "module-quapy.method.meta"], [5, "module-quapy.method.non_aggregative"]], "mrae() (in module quapy.error)": [[2, "quapy.error.mrae"]], "mse() (in module quapy.error)": [[2, "quapy.error.mse"]], "nae() (in module quapy.error)": [[2, "quapy.error.nae"]], "nkld() (in module quapy.error)": [[2, "quapy.error.nkld"]], "normalize_prevalence() (in module quapy.functional)": [[2, "quapy.functional.normalize_prevalence"]], "normalized_absolute_error() (in module quapy.error)": [[2, "quapy.error.normalized_absolute_error"]], "normalized_relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.normalized_relative_absolute_error"]], "nrae() (in module quapy.error)": [[2, "quapy.error.nrae"]], "num_prevalence_combinations() (in module quapy.functional)": [[2, "quapy.functional.num_prevalence_combinations"]], "on_preclassified_instances() (quapy.protocol.onlabelledcollectionprotocol method)": [[2, "quapy.protocol.OnLabelledCollectionProtocol.on_preclassified_instances"]], "optim_minimize() (in module quapy.functional)": [[2, "quapy.functional.optim_minimize"]], "parallel() (in module quapy.util)": [[2, "quapy.util.parallel"]], "parallel_unpack() (in module quapy.util)": [[2, "quapy.util.parallel_unpack"]], "pickled_resource() (in module quapy.util)": [[2, "quapy.util.pickled_resource"]], "prediction() (in module quapy.evaluation)": [[2, "quapy.evaluation.prediction"]], "prevalence_from_labels() (in module quapy.functional)": [[2, "quapy.functional.prevalence_from_labels"]], "prevalence_from_probabilities() (in module quapy.functional)": [[2, "quapy.functional.prevalence_from_probabilities"]], "prevalence_grid() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.prevalence_grid"]], "prevalence_linspace() (in module quapy.functional)": [[2, "quapy.functional.prevalence_linspace"]], "projection_simplex_sort() (in module quapy.functional)": [[2, "quapy.functional.projection_simplex_sort"]], "quantify() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.quantify"]], "quapy": [[2, "module-quapy"]], "quapy.error": [[2, "module-quapy.error"]], "quapy.evaluation": [[2, "module-quapy.evaluation"]], "quapy.functional": [[2, "module-quapy.functional"]], "quapy.model_selection": [[2, "module-quapy.model_selection"]], "quapy.plot": [[2, "module-quapy.plot"]], "quapy.protocol": [[2, "module-quapy.protocol"]], "quapy.util": [[2, "module-quapy.util"]], "rae() (in module quapy.error)": [[2, "quapy.error.rae"]], "random_state (quapy.protocol.abstractstochasticseededprotocol property)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.random_state"]], "relative_absolute_error() (in module quapy.error)": [[2, "quapy.error.relative_absolute_error"]], "sample() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.sample"]], "sample() (quapy.protocol.abstractstochasticseededprotocol method)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.sample"]], "sample() (quapy.protocol.domainmixer method)": [[2, "quapy.protocol.DomainMixer.sample"]], "sample() (quapy.protocol.npp method)": [[2, "quapy.protocol.NPP.sample"]], "sample() (quapy.protocol.upp method)": [[2, "quapy.protocol.UPP.sample"]], "samples_parameters() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.samples_parameters"]], "samples_parameters() (quapy.protocol.abstractstochasticseededprotocol method)": [[2, "quapy.protocol.AbstractStochasticSeededProtocol.samples_parameters"]], "samples_parameters() (quapy.protocol.domainmixer method)": [[2, "quapy.protocol.DomainMixer.samples_parameters"]], "samples_parameters() (quapy.protocol.npp method)": [[2, "quapy.protocol.NPP.samples_parameters"]], "samples_parameters() (quapy.protocol.upp method)": [[2, "quapy.protocol.UPP.samples_parameters"]], "save_text_file() (in module quapy.util)": [[2, "quapy.util.save_text_file"]], "se() (in module quapy.error)": [[2, "quapy.error.se"]], "set_fit_request() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.set_fit_request"]], "set_params() (quapy.model_selection.gridsearchq method)": [[2, "quapy.model_selection.GridSearchQ.set_params"]], "smooth() (in module quapy.error)": [[2, "quapy.error.smooth"]], "softmax() (in module quapy.functional)": [[2, "quapy.functional.softmax"]], "solve_adjustment() (in module quapy.functional)": [[2, "quapy.functional.solve_adjustment"]], "solve_adjustment_binary() (in module quapy.functional)": [[2, "quapy.functional.solve_adjustment_binary"]], "strprev() (in module quapy.functional)": [[2, "quapy.functional.strprev"]], "success() (quapy.model_selection.configstatus method)": [[2, "quapy.model_selection.ConfigStatus.success"]], "temp_seed() (in module quapy.util)": [[2, "quapy.util.temp_seed"]], "ternary_search() (in module quapy.functional)": [[2, "quapy.functional.ternary_search"]], "timeout() (in module quapy.util)": [[2, "quapy.util.timeout"]], "total() (quapy.protocol.app method)": [[2, "quapy.protocol.APP.total"]], "total() (quapy.protocol.abstractprotocol method)": [[2, "quapy.protocol.AbstractProtocol.total"]], "total() (quapy.protocol.domainmixer method)": [[2, "quapy.protocol.DomainMixer.total"]], "total() (quapy.protocol.iterateprotocol method)": [[2, "quapy.protocol.IterateProtocol.total"]], "total() (quapy.protocol.npp method)": [[2, "quapy.protocol.NPP.total"]], "total() (quapy.protocol.upp method)": [[2, "quapy.protocol.UPP.total"]], "uniform_prevalence() (in module quapy.functional)": [[2, "quapy.functional.uniform_prevalence"]], "uniform_prevalence_sampling() (in module quapy.functional)": [[2, "quapy.functional.uniform_prevalence_sampling"]], "uniform_simplex_sampling() (in module quapy.functional)": [[2, "quapy.functional.uniform_simplex_sampling"]], "bctscalibration (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.BCTSCalibration"]], "lowranklogisticregression (class in quapy.classification.methods)": [[3, "quapy.classification.methods.LowRankLogisticRegression"]], "nbvscalibration (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.NBVSCalibration"]], "recalibratedprobabilisticclassifier (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifier"]], "recalibratedprobabilisticclassifierbase (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase"]], "svmperf (class in quapy.classification.svmperf)": [[3, "quapy.classification.svmperf.SVMperf"]], "tscalibration (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.TSCalibration"]], "vscalibration (class in quapy.classification.calibration)": [[3, "quapy.classification.calibration.VSCalibration"]], "classes_ (quapy.classification.calibration.recalibratedprobabilisticclassifierbase property)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.classes_"]], "decision_function() (quapy.classification.svmperf.svmperf method)": [[3, "quapy.classification.svmperf.SVMperf.decision_function"]], "fit() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit"]], "fit() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.fit"]], "fit() (quapy.classification.svmperf.svmperf method)": [[3, "quapy.classification.svmperf.SVMperf.fit"]], "fit_cv() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit_cv"]], "fit_tr_val() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit_tr_val"]], "get_params() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.get_params"]], "predict() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.predict"]], "predict() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.predict"]], "predict() (quapy.classification.svmperf.svmperf method)": [[3, "quapy.classification.svmperf.SVMperf.predict"]], "predict_proba() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[3, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.predict_proba"]], "predict_proba() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.predict_proba"]], "quapy.classification": [[3, "module-quapy.classification"]], "quapy.classification.calibration": [[3, "module-quapy.classification.calibration"]], "quapy.classification.methods": [[3, "module-quapy.classification.methods"]], "quapy.classification.svmperf": [[3, "module-quapy.classification.svmperf"]], "set_params() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.set_params"]], "set_score_request() (quapy.classification.svmperf.svmperf method)": [[3, "quapy.classification.svmperf.SVMperf.set_score_request"]], "transform() (quapy.classification.methods.lowranklogisticregression method)": [[3, "quapy.classification.methods.LowRankLogisticRegression.transform"]], "valid_losses (quapy.classification.svmperf.svmperf attribute)": [[3, "quapy.classification.svmperf.SVMperf.valid_losses"]], "dataset (class in quapy.data.base)": [[4, "quapy.data.base.Dataset"]], "indextransformer (class in quapy.data.preprocessing)": [[4, "quapy.data.preprocessing.IndexTransformer"]], "labelledcollection (class in quapy.data.base)": [[4, "quapy.data.base.LabelledCollection"]], "splitstratified() (quapy.data.base.dataset class method)": [[4, "quapy.data.base.Dataset.SplitStratified"]], "x (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.X"]], "xp (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.Xp"]], "xy (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.Xy"]], "add_word() (quapy.data.preprocessing.indextransformer method)": [[4, "quapy.data.preprocessing.IndexTransformer.add_word"]], "binarize() (in module quapy.data.reader)": [[4, "quapy.data.reader.binarize"]], "binary (quapy.data.base.dataset property)": [[4, "quapy.data.base.Dataset.binary"]], "binary (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.binary"]], "classes_ (quapy.data.base.dataset property)": [[4, "quapy.data.base.Dataset.classes_"]], "counts() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.counts"]], "fetch_ifcb() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_IFCB"]], "fetch_ucibinarydataset() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_UCIBinaryDataset"]], "fetch_ucibinarylabelledcollection() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_UCIBinaryLabelledCollection"]], "fetch_ucimulticlassdataset() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_UCIMulticlassDataset"]], "fetch_ucimulticlasslabelledcollection() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_UCIMulticlassLabelledCollection"]], "fetch_lequa2022() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_lequa2022"]], "fetch_reviews() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_reviews"]], "fetch_twitter() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.fetch_twitter"]], "fit() (quapy.data.preprocessing.indextransformer method)": [[4, "quapy.data.preprocessing.IndexTransformer.fit"]], "fit_transform() (quapy.data.preprocessing.indextransformer method)": [[4, "quapy.data.preprocessing.IndexTransformer.fit_transform"]], "from_csv() (in module quapy.data.reader)": [[4, "quapy.data.reader.from_csv"]], "from_sparse() (in module quapy.data.reader)": [[4, "quapy.data.reader.from_sparse"]], "from_text() (in module quapy.data.reader)": [[4, "quapy.data.reader.from_text"]], "index() (in module quapy.data.preprocessing)": [[4, "quapy.data.preprocessing.index"]], "join() (quapy.data.base.labelledcollection class method)": [[4, "quapy.data.base.LabelledCollection.join"]], "kfcv() (quapy.data.base.dataset class method)": [[4, "quapy.data.base.Dataset.kFCV"]], "kfcv() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.kFCV"]], "load() (quapy.data.base.dataset class method)": [[4, "quapy.data.base.Dataset.load"]], "load() (quapy.data.base.labelledcollection class method)": [[4, "quapy.data.base.LabelledCollection.load"]], "n_classes (quapy.data.base.dataset property)": [[4, "quapy.data.base.Dataset.n_classes"]], "n_classes (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.n_classes"]], "p (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.p"]], "prevalence() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.prevalence"]], "quapy.data": [[4, "module-quapy.data"]], "quapy.data.base": [[4, "module-quapy.data.base"]], "quapy.data.datasets": [[4, "module-quapy.data.datasets"]], "quapy.data.preprocessing": [[4, "module-quapy.data.preprocessing"]], "quapy.data.reader": [[4, "module-quapy.data.reader"]], "reduce() (quapy.data.base.dataset method)": [[4, "quapy.data.base.Dataset.reduce"]], "reduce_columns() (in module quapy.data.preprocessing)": [[4, "quapy.data.preprocessing.reduce_columns"]], "reindex_labels() (in module quapy.data.reader)": [[4, "quapy.data.reader.reindex_labels"]], "sampling() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.sampling"]], "sampling_from_index() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.sampling_from_index"]], "sampling_index() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.sampling_index"]], "split_random() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.split_random"]], "split_stratified() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.split_stratified"]], "standardize() (in module quapy.data.preprocessing)": [[4, "quapy.data.preprocessing.standardize"]], "stats() (quapy.data.base.dataset method)": [[4, "quapy.data.base.Dataset.stats"]], "stats() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.stats"]], "text2tfidf() (in module quapy.data.preprocessing)": [[4, "quapy.data.preprocessing.text2tfidf"]], "train_test (quapy.data.base.dataset property)": [[4, "quapy.data.base.Dataset.train_test"]], "transform() (quapy.data.preprocessing.indextransformer method)": [[4, "quapy.data.preprocessing.IndexTransformer.transform"]], "uniform_sampling() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.uniform_sampling"]], "uniform_sampling_index() (quapy.data.base.labelledcollection method)": [[4, "quapy.data.base.LabelledCollection.uniform_sampling_index"]], "vocabulary_size (quapy.data.base.dataset property)": [[4, "quapy.data.base.Dataset.vocabulary_size"]], "vocabulary_size() (quapy.data.preprocessing.indextransformer method)": [[4, "quapy.data.preprocessing.IndexTransformer.vocabulary_size"]], "warn() (in module quapy.data.datasets)": [[4, "quapy.data.datasets.warn"]], "y (quapy.data.base.labelledcollection property)": [[4, "quapy.data.base.LabelledCollection.y"]], "acc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.ACC"]], "adjustedclassifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.AdjustedClassifyAndCount"]], "aggregativecrispquantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeCrispQuantifier"]], "aggregativemedianestimator (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator"]], "aggregativequantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeQuantifier"]], "aggregativesoftquantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.AggregativeSoftQuantifier"]], "bandwidth_method (quapy.method._kdey.kdebase attribute)": [[5, "quapy.method._kdey.KDEBase.BANDWIDTH_METHOD"]], "basequantifier (class in quapy.method.base)": [[5, "quapy.method.base.BaseQuantifier"]], "bayesiancc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.BayesianCC"]], "binaryaggregativequantifier (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier"]], "binaryquantifier (class in quapy.method.base)": [[5, "quapy.method.base.BinaryQuantifier"]], "cc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.CC"]], "classifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ClassifyAndCount"]], "dmx (class in quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.DMx"]], "dmy (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.DMy"]], "distributionmatchingx (in module quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.DistributionMatchingX"]], "distributionmatchingy (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.DistributionMatchingY"]], "dys (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.DyS"]], "eacc() (in module quapy.method.meta)": [[5, "quapy.method.meta.EACC"]], "ecc() (in module quapy.method.meta)": [[5, "quapy.method.meta.ECC"]], "eemq() (in module quapy.method.meta)": [[5, "quapy.method.meta.EEMQ"]], "ehdy() (in module quapy.method.meta)": [[5, "quapy.method.meta.EHDy"]], "em() (quapy.method.aggregative.emq class method)": [[5, "quapy.method.aggregative.EMQ.EM"]], "emq (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.EMQ"]], "emq_bcts() (quapy.method.aggregative.emq class method)": [[5, "quapy.method.aggregative.EMQ.EMQ_BCTS"]], "epacc() (in module quapy.method.meta)": [[5, "quapy.method.meta.EPACC"]], "epsilon (quapy.method.aggregative.emq attribute)": [[5, "quapy.method.aggregative.EMQ.EPSILON"]], "ensemble (class in quapy.method.meta)": [[5, "quapy.method.meta.Ensemble"]], "expectationmaximizationquantifier (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ExpectationMaximizationQuantifier"]], "hdx() (quapy.method.non_aggregative.dmx class method)": [[5, "quapy.method.non_aggregative.DMx.HDx"]], "hdy (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.HDy"]], "hellingerdistancey (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.HellingerDistanceY"]], "kdebase (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEBase"]], "kdeycs (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEyCS"]], "kdeyhd (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEyHD"]], "kdeyml (class in quapy.method._kdey)": [[5, "quapy.method._kdey.KDEyML"]], "max (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.MAX"]], "max_iter (quapy.method.aggregative.emq attribute)": [[5, "quapy.method.aggregative.EMQ.MAX_ITER"]], "methods (quapy.method.aggregative.acc attribute)": [[5, "quapy.method.aggregative.ACC.METHODS"]], "ms (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.MS"]], "ms2 (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.MS2"]], "maximumlikelihoodprevalenceestimation (class in quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation"]], "medianestimator (class in quapy.method.meta)": [[5, "quapy.method.meta.MedianEstimator"]], "medianestimator2 (class in quapy.method.meta)": [[5, "quapy.method.meta.MedianEstimator2"]], "normalizations (quapy.method.aggregative.acc attribute)": [[5, "quapy.method.aggregative.ACC.NORMALIZATIONS"]], "onevsall (class in quapy.method.base)": [[5, "quapy.method.base.OneVsAll"]], "onevsallaggregative (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.OneVsAllAggregative"]], "onevsallgeneric (class in quapy.method.base)": [[5, "quapy.method.base.OneVsAllGeneric"]], "pacc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.PACC"]], "pcc (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.PCC"]], "probabilisticadjustedclassifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ProbabilisticAdjustedClassifyAndCount"]], "probabilisticclassifyandcount (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.ProbabilisticClassifyAndCount"]], "readme (class in quapy.method.non_aggregative)": [[5, "quapy.method.non_aggregative.ReadMe"]], "sld (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.SLD"]], "smm (class in quapy.method.aggregative)": [[5, "quapy.method.aggregative.SMM"]], "solvers (quapy.method.aggregative.acc attribute)": [[5, "quapy.method.aggregative.ACC.SOLVERS"]], "t50 (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.T50"]], "thresholdoptimization (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.ThresholdOptimization"]], "valid_policies (quapy.method.meta.ensemble attribute)": [[5, "quapy.method.meta.Ensemble.VALID_POLICIES"]], "x (class in quapy.method._threshold_optim)": [[5, "quapy.method._threshold_optim.X"]], "aggregate() (quapy.method._kdey.kdeycs method)": [[5, "quapy.method._kdey.KDEyCS.aggregate"]], "aggregate() (quapy.method._kdey.kdeyhd method)": [[5, "quapy.method._kdey.KDEyHD.aggregate"]], "aggregate() (quapy.method._kdey.kdeyml method)": [[5, "quapy.method._kdey.KDEyML.aggregate"]], "aggregate() (quapy.method._threshold_optim.ms method)": [[5, "quapy.method._threshold_optim.MS.aggregate"]], "aggregate() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.aggregate"]], "aggregate() (quapy.method.aggregative.acc method)": [[5, "quapy.method.aggregative.ACC.aggregate"]], "aggregate() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.aggregate"]], "aggregate() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.aggregate"]], "aggregate() (quapy.method.aggregative.cc method)": [[5, "quapy.method.aggregative.CC.aggregate"]], "aggregate() (quapy.method.aggregative.dmy method)": [[5, "quapy.method.aggregative.DMy.aggregate"]], "aggregate() (quapy.method.aggregative.dys method)": [[5, "quapy.method.aggregative.DyS.aggregate"]], "aggregate() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.aggregate"]], "aggregate() (quapy.method.aggregative.hdy method)": [[5, "quapy.method.aggregative.HDy.aggregate"]], "aggregate() (quapy.method.aggregative.onevsallaggregative method)": [[5, "quapy.method.aggregative.OneVsAllAggregative.aggregate"]], "aggregate() (quapy.method.aggregative.pacc method)": [[5, "quapy.method.aggregative.PACC.aggregate"]], "aggregate() (quapy.method.aggregative.pcc method)": [[5, "quapy.method.aggregative.PCC.aggregate"]], "aggregate() (quapy.method.aggregative.smm method)": [[5, "quapy.method.aggregative.SMM.aggregate"]], "aggregate_with_threshold() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.aggregate_with_threshold"]], "aggregation_fit() (quapy.method._kdey.kdeycs method)": [[5, "quapy.method._kdey.KDEyCS.aggregation_fit"]], "aggregation_fit() (quapy.method._kdey.kdeyhd method)": [[5, "quapy.method._kdey.KDEyHD.aggregation_fit"]], "aggregation_fit() (quapy.method._kdey.kdeyml method)": [[5, "quapy.method._kdey.KDEyML.aggregation_fit"]], "aggregation_fit() (quapy.method._threshold_optim.ms method)": [[5, "quapy.method._threshold_optim.MS.aggregation_fit"]], "aggregation_fit() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.acc method)": [[5, "quapy.method.aggregative.ACC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.cc method)": [[5, "quapy.method.aggregative.CC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.dmy method)": [[5, "quapy.method.aggregative.DMy.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.dys method)": [[5, "quapy.method.aggregative.DyS.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.hdy method)": [[5, "quapy.method.aggregative.HDy.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.pacc method)": [[5, "quapy.method.aggregative.PACC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.pcc method)": [[5, "quapy.method.aggregative.PCC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.smm method)": [[5, "quapy.method.aggregative.SMM.aggregation_fit"]], "aggregative (quapy.method.meta.ensemble property)": [[5, "quapy.method.meta.Ensemble.aggregative"]], "classes_ (quapy.method.aggregative.aggregativequantifier property)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classes_"]], "classes_ (quapy.method.base.onevsallgeneric property)": [[5, "quapy.method.base.OneVsAllGeneric.classes_"]], "classifier (quapy.method.aggregative.aggregativequantifier property)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classifier"]], "classifier_fit_predict() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classifier_fit_predict"]], "classify() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.classify"]], "classify() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.classify"]], "classify() (quapy.method.aggregative.onevsallaggregative method)": [[5, "quapy.method.aggregative.OneVsAllAggregative.classify"]], "condition() (quapy.method._threshold_optim.max method)": [[5, "quapy.method._threshold_optim.MAX.condition"]], "condition() (quapy.method._threshold_optim.ms method)": [[5, "quapy.method._threshold_optim.MS.condition"]], "condition() (quapy.method._threshold_optim.t50 method)": [[5, "quapy.method._threshold_optim.T50.condition"]], "condition() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.condition"]], "condition() (quapy.method._threshold_optim.x method)": [[5, "quapy.method._threshold_optim.X.condition"]], "discard() (quapy.method._threshold_optim.ms2 method)": [[5, "quapy.method._threshold_optim.MS2.discard"]], "discard() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.discard"]], "ensemblefactory() (in module quapy.method.meta)": [[5, "quapy.method.meta.ensembleFactory"]], "fit() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.fit"]], "fit() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.fit"]], "fit() (quapy.method.aggregative.binaryaggregativequantifier method)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier.fit"]], "fit() (quapy.method.base.basequantifier method)": [[5, "quapy.method.base.BaseQuantifier.fit"]], "fit() (quapy.method.base.onevsallgeneric method)": [[5, "quapy.method.base.OneVsAllGeneric.fit"]], "fit() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.fit"]], "fit() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.fit"]], "fit() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.fit"]], "fit() (quapy.method.non_aggregative.dmx method)": [[5, "quapy.method.non_aggregative.DMx.fit"]], "fit() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[5, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.fit"]], "fit() (quapy.method.non_aggregative.readme method)": [[5, "quapy.method.non_aggregative.ReadMe.fit"]], "getptecondestim() (quapy.method.aggregative.acc class method)": [[5, "quapy.method.aggregative.ACC.getPteCondEstim"]], "getptecondestim() (quapy.method.aggregative.pacc class method)": [[5, "quapy.method.aggregative.PACC.getPteCondEstim"]], "get_conditional_probability_samples() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.get_conditional_probability_samples"]], "get_kde_function() (quapy.method._kdey.kdebase method)": [[5, "quapy.method._kdey.KDEBase.get_kde_function"]], "get_mixture_components() (quapy.method._kdey.kdebase method)": [[5, "quapy.method._kdey.KDEBase.get_mixture_components"]], "get_params() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.get_params"]], "get_params() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.get_params"]], "get_params() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.get_params"]], "get_params() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.get_params"]], "get_prevalence_samples() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.get_prevalence_samples"]], "get_probability_distribution() (in module quapy.method.meta)": [[5, "quapy.method.meta.get_probability_distribution"]], "gram_matrix_mix_sum() (quapy.method._kdey.kdeycs method)": [[5, "quapy.method._kdey.KDEyCS.gram_matrix_mix_sum"]], "neg_label (quapy.method.aggregative.binaryaggregativequantifier property)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier.neg_label"]], "newelm() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newELM"]], "newinvariantratioestimation() (quapy.method.aggregative.acc class method)": [[5, "quapy.method.aggregative.ACC.newInvariantRatioEstimation"]], "newonevsall() (in module quapy.method.base)": [[5, "quapy.method.base.newOneVsAll"]], "newsvmae() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMAE"]], "newsvmkld() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMKLD"]], "newsvmq() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMQ"]], "newsvmrae() (in module quapy.method.aggregative)": [[5, "quapy.method.aggregative.newSVMRAE"]], "pdf() (quapy.method._kdey.kdebase method)": [[5, "quapy.method._kdey.KDEBase.pdf"]], "pos_label (quapy.method.aggregative.binaryaggregativequantifier property)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier.pos_label"]], "predict_proba() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.predict_proba"]], "probabilistic (quapy.method.meta.ensemble property)": [[5, "quapy.method.meta.Ensemble.probabilistic"]], "quantify() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.quantify"]], "quantify() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.quantify"]], "quantify() (quapy.method.base.basequantifier method)": [[5, "quapy.method.base.BaseQuantifier.quantify"]], "quantify() (quapy.method.base.onevsallgeneric method)": [[5, "quapy.method.base.OneVsAllGeneric.quantify"]], "quantify() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.quantify"]], "quantify() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.quantify"]], "quantify() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.quantify"]], "quantify() (quapy.method.non_aggregative.dmx method)": [[5, "quapy.method.non_aggregative.DMx.quantify"]], "quantify() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[5, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.quantify"]], "quantify() (quapy.method.non_aggregative.readme method)": [[5, "quapy.method.non_aggregative.ReadMe.quantify"]], "quapy.method": [[5, "module-quapy.method"]], "quapy.method._kdey": [[5, "module-quapy.method._kdey"]], "quapy.method._threshold_optim": [[5, "module-quapy.method._threshold_optim"]], "quapy.method.aggregative": [[5, "module-quapy.method.aggregative"]], "quapy.method.base": [[5, "module-quapy.method.base"]], "quapy.method.meta": [[5, "module-quapy.method.meta"]], "quapy.method.non_aggregative": [[5, "module-quapy.method.non_aggregative"]], "sample_from_posterior() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.sample_from_posterior"]], "set_fit_request() (quapy.method._kdey.kdeycs method)": [[5, "quapy.method._kdey.KDEyCS.set_fit_request"]], "set_fit_request() (quapy.method._kdey.kdeyhd method)": [[5, "quapy.method._kdey.KDEyHD.set_fit_request"]], "set_fit_request() (quapy.method._kdey.kdeyml method)": [[5, "quapy.method._kdey.KDEyML.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.max method)": [[5, "quapy.method._threshold_optim.MAX.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.ms method)": [[5, "quapy.method._threshold_optim.MS.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.ms2 method)": [[5, "quapy.method._threshold_optim.MS2.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.t50 method)": [[5, "quapy.method._threshold_optim.T50.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.thresholdoptimization method)": [[5, "quapy.method._threshold_optim.ThresholdOptimization.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.x method)": [[5, "quapy.method._threshold_optim.X.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.acc method)": [[5, "quapy.method.aggregative.ACC.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.aggregativecrispquantifier method)": [[5, "quapy.method.aggregative.AggregativeCrispQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.aggregativequantifier method)": [[5, "quapy.method.aggregative.AggregativeQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.aggregativesoftquantifier method)": [[5, "quapy.method.aggregative.AggregativeSoftQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.bayesiancc method)": [[5, "quapy.method.aggregative.BayesianCC.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.binaryaggregativequantifier method)": [[5, "quapy.method.aggregative.BinaryAggregativeQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.cc method)": [[5, "quapy.method.aggregative.CC.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.dmy method)": [[5, "quapy.method.aggregative.DMy.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.dys method)": [[5, "quapy.method.aggregative.DyS.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.hdy method)": [[5, "quapy.method.aggregative.HDy.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.onevsallaggregative method)": [[5, "quapy.method.aggregative.OneVsAllAggregative.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.pacc method)": [[5, "quapy.method.aggregative.PACC.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.pcc method)": [[5, "quapy.method.aggregative.PCC.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.smm method)": [[5, "quapy.method.aggregative.SMM.set_fit_request"]], "set_fit_request() (quapy.method.base.basequantifier method)": [[5, "quapy.method.base.BaseQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.base.binaryquantifier method)": [[5, "quapy.method.base.BinaryQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.base.onevsallgeneric method)": [[5, "quapy.method.base.OneVsAllGeneric.set_fit_request"]], "set_fit_request() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.set_fit_request"]], "set_fit_request() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.set_fit_request"]], "set_fit_request() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.set_fit_request"]], "set_fit_request() (quapy.method.non_aggregative.dmx method)": [[5, "quapy.method.non_aggregative.DMx.set_fit_request"]], "set_fit_request() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[5, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.set_fit_request"]], "set_fit_request() (quapy.method.non_aggregative.readme method)": [[5, "quapy.method.non_aggregative.ReadMe.set_fit_request"]], "set_params() (quapy.method.aggregative.aggregativemedianestimator method)": [[5, "quapy.method.aggregative.AggregativeMedianEstimator.set_params"]], "set_params() (quapy.method.meta.ensemble method)": [[5, "quapy.method.meta.Ensemble.set_params"]], "set_params() (quapy.method.meta.medianestimator method)": [[5, "quapy.method.meta.MedianEstimator.set_params"]], "set_params() (quapy.method.meta.medianestimator2 method)": [[5, "quapy.method.meta.MedianEstimator2.set_params"]], "set_predict_proba_request() (quapy.method.aggregative.emq method)": [[5, "quapy.method.aggregative.EMQ.set_predict_proba_request"]], "std_constrained_linear_ls() (quapy.method.non_aggregative.readme method)": [[5, "quapy.method.non_aggregative.ReadMe.std_constrained_linear_ls"]], "val_split (quapy.method.aggregative.aggregativequantifier property)": [[5, "quapy.method.aggregative.AggregativeQuantifier.val_split"]], "val_split_ (quapy.method.aggregative.aggregativequantifier attribute)": [[5, "quapy.method.aggregative.AggregativeQuantifier.val_split_"]]}})