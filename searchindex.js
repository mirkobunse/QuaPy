Search.setIndex({"docnames": ["index", "manuals", "manuals/datasets", "manuals/evaluation", "manuals/explicit-loss-minimization", "manuals/methods", "manuals/model-selection", "manuals/plotting", "manuals/protocols", "quapy", "quapy.classification", "quapy.data", "quapy.method"], "filenames": ["index.md", "manuals.rst", "manuals/datasets.md", "manuals/evaluation.md", "manuals/explicit-loss-minimization.md", "manuals/methods.md", "manuals/model-selection.md", "manuals/plotting.md", "manuals/protocols.md", "quapy.rst", "quapy.classification.rst", "quapy.data.rst", "quapy.method.rst"], "titles": ["Quickstart", "Manuals", "<span class=\"section-number\">1. </span>Datasets", "<span class=\"section-number\">2. </span>Evaluation", "<span class=\"section-number\">3. </span>Explicit Loss Minimization", "<span class=\"section-number\">4. </span>Quantification Methods", "<span class=\"section-number\">5. </span>Model Selection", "<span class=\"section-number\">6. </span>Plotting", "<span class=\"section-number\">7. </span>Protocols", "quapy package", "quapy.classification package", "quapy.data package", "quapy.method package"], "terms": {"i": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "an": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "open": [0, 2, 9, 11], "sourc": [0, 4, 5, 9, 10, 11, 12], "framework": [0, 5, 12], "quantif": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12], "k": [0, 5, 9, 10, 11, 12], "supervis": [0, 6], "preval": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12], "estim": [0, 2, 3, 7, 9, 10, 11, 12], "learn": [0, 1, 3, 5, 6, 9, 10, 11, 12], "quantifi": [0, 2, 3, 5, 6, 7, 8, 9, 11, 12], "written": 0, "python": [0, 2, 11], "base": [0, 2, 5, 9, 10], "concept": 0, "data": [0, 5, 7, 9, 10, 12], "sampl": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12], "provid": [0, 2, 5, 7, 8, 9, 10, 11, 12], "implement": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "most": [0, 2, 3, 5, 7, 8, 9, 11, 12], "import": [0, 2, 5, 6, 7, 8, 11, 12], "aspect": 0, "workflow": 0, "baselin": 0, "advanc": [0, 2, 6, 8, 9], "method": [0, 1, 2, 3, 4, 6, 7, 8, 9], "orient": [0, 1, 4, 5, 9, 12], "model": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12], "select": [0, 1, 2, 3, 5, 8, 9, 11, 12], "mechan": [0, 9, 10, 12], "evalu": [0, 1, 2, 5, 6, 7, 8, 10, 11, 12], "measur": [0, 1, 4, 5, 6, 7, 9, 12], "protocol": [0, 1, 2, 5, 6, 7, 11, 12], "us": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "also": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12], "make": [0, 2, 4, 5, 9, 12], "avail": [0, 2, 3, 4, 5, 7, 10, 11, 12], "commonli": [0, 8], "dataset": [0, 1, 3, 5, 6, 7, 8, 9, 10, 12], "offer": [0, 5], "visual": [0, 3, 7], "tool": [0, 3], "facilit": 0, "analysi": [0, 2, 5, 11], "interpret": [0, 2, 7, 11, 12], "experiment": [0, 5], "result": [0, 3, 4, 5, 7, 9, 12], "host": [0, 2], "github": [0, 2], "http": [0, 2, 9, 11, 12], "com": [0, 2, 9], "hlt": 0, "isti": 0, "pip": [0, 5, 12], "The": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12], "follow": [0, 2, 3, 5, 6, 7, 8, 9, 11, 12], "script": [0, 2, 4, 5, 11, 12], "fetch": [0, 2], "tweet": [0, 2, 5, 11], "train": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "appli": [0, 3, 4, 5, 6, 7, 9, 10, 11, 12], "adjust": [0, 5, 9, 12], "classifi": [0, 2, 6, 7, 9, 10, 12], "count": [0, 6, 7, 9, 11, 12], "mean": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "absolut": [0, 3, 5, 7, 9, 12], "error": [0, 1, 2, 5, 6, 10, 12], "mae": [0, 3, 6, 8, 9, 10, 12], "between": [0, 7, 9, 10, 12], "predict": [0, 3, 5, 7, 9, 10, 12], "true": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "class": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "valu": [0, 2, 3, 5, 6, 8, 9, 10, 11, 12], "test": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "set": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "qp": [0, 2, 3, 5, 6, 7, 8, 9, 11, 12], "from": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12], "sklearn": [0, 5, 6, 7, 8, 9, 10, 11, 12], "linear_model": [0, 5, 6, 8, 10], "logisticregress": [0, 5, 6, 8, 10, 12], "fetch_twitt": [0, 2, 5, 9, 11], "semeval16": [0, 2, 11], "creat": [0, 2, 9, 12], "aggreg": [0, 1, 3, 6, 7, 8, 9], "acc": [0, 3, 5, 7, 8, 9, 12], "fit": [0, 5, 6, 7, 8, 9, 10, 11, 12], "estim_preval": [0, 5, 12], "instanc": [0, 2, 3, 5, 7, 8, 9, 10, 11, 12], "true_preval": 0, "print": [0, 2, 3, 5, 6, 8, 9, 10, 11], "f": [0, 2, 3, 5, 6, 7, 8, 11, 12], "3f": [0, 3], "scenario": [0, 3, 5, 6, 7], "character": [0, 3, 5], "prior": [0, 3, 5, 6, 7, 8, 9, 12], "probabl": [0, 2, 3, 5, 6, 7, 8, 9, 10, 12], "shift": [0, 3, 5, 6, 8, 9, 10, 12], "In": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "other": [0, 1, 2, 3, 5, 7, 9, 10, 11, 12], "word": [0, 3, 5, 9, 10, 11, 12], "we": [0, 2, 3, 5, 6, 7, 8, 11], "would": [0, 2, 3, 5, 7, 11, 12], "littl": 0, "interest": [0, 3, 7, 8, 9], "could": [0, 2, 3, 5, 6, 7, 8, 11], "assum": [0, 3, 5, 12], "iid": [0, 3, 7, 12], "assumpt": [0, 3, 7], "hold": [0, 9, 12], "thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "roughli": [0, 2], "equival": [0, 2, 12], "For": [0, 2, 3, 6, 7, 8, 9, 11, 12], "reason": [0, 5, 7, 8, 12], "ani": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12], "should": [0, 2, 5, 6, 7, 9, 10, 11, 12], "across": [0, 2, 3, 7, 9, 12], "mani": [0, 2, 3, 5, 6, 7, 8, 9, 12], "even": [0, 9], "ones": [0, 3, 7, 9, 11, 12], "differ": [0, 2, 5, 6, 7, 8, 9, 11, 12], "veri": [0, 2, 5, 7, 9], "those": [0, 3, 5, 6, 7, 9, 10, 12], "found": [0, 2, 5, 9, 10, 11, 12], "procedur": [0, 3, 5, 9], "autom": [0, 2], "see": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12], "detail": [0, 2, 3, 4, 5, 10, 11, 12], "exampl": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12], "illustr": [0, 5, 6, 7], "sever": [0, 2, 4, 11], "through": [0, 5, 9], "review": [0, 1, 7, 11], "twitter": [0, 1, 11], "sentiment": [0, 1, 5, 11], "uci": [0, 1, 11], "machin": [0, 1, 3, 5, 6, 9, 10], "lequa": [0, 1, 8, 11], "2022": [0, 1, 5, 8, 11, 12], "ifcb": [0, 1, 11], "plankton": [0, 1, 11], "ad": [0, 1, 8, 9], "custom": [0, 1, 5, 8, 9, 11], "explicit": [0, 1, 12], "loss": [0, 1, 9, 10, 12], "minim": [0, 1, 9, 12], "meta": [0, 1, 9, 10], "target": [0, 1, 5, 7, 9, 10, 12], "classif": [0, 1, 2, 3, 5, 9, 11, 12], "plot": [0, 1], "diagon": [0, 1, 9], "bia": [0, 1, 5, 9, 10, 12], "drift": [0, 1], "artifici": [0, 1, 5, 6, 7, 9], "unit": [0, 1, 2, 9, 12], "simplex": [0, 1, 5, 9, 12], "uniform": [0, 1, 9, 11, 12], "upp": [0, 1, 9], "natur": [0, 1, 9], "popular": [0, 3, 8], "its": [0, 5, 6, 8, 9, 10, 12], "variant": [0, 7, 9, 12], "expect": [0, 8, 12], "maxim": [0, 12], "structur": [0, 5, 12], "output": [0, 2, 3, 5, 6, 8, 9, 10, 11, 12], "hdy": [0, 9, 12], "quanet": [0, 10, 12], "ensembl": [0, 2, 9, 11, 12], "among": [0, 3, 5], "versatil": 0, "function": [0, 2, 3, 5, 6, 7, 8, 10, 11, 12], "perform": [0, 2, 3, 5, 6, 7, 8, 9, 10, 12], "gener": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "e": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "g": [0, 2, 3, 5, 6, 8, 9, 10, 11, 12], "app": [0, 6, 7, 8, 9, 12], "npp": [0, 8, 9], "etc": [0, 5], "metric": [0, 5, 6, 9, 12], "ae": [0, 4, 5, 7, 9], "rae": [0, 3, 4, 5, 9], "nae": [0, 9], "nrae": [0, 9], "se": [0, 9], "kld": [0, 4, 5, 9, 10, 12], "nkld": [0, 4, 5, 9, 10, 12], "frequent": 0, "textual": [0, 2, 11], "numer": [0, 2, 3, 5, 9, 11, 12], "includ": [0, 2, 4, 5, 6, 7, 8, 11, 12], "32": [0, 2, 6], "binari": [0, 5, 7, 9, 10, 11, 12], "5": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "multiclass": [0, 5, 8, 9, 11, 12], "new": [0, 2, 8, 9, 10, 11, 12], "v0": [0, 8], "1": [0, 2, 3, 6, 7, 8, 9, 10, 11, 12], "8": [0, 2, 5, 6, 7, 11, 12], "11": [0, 2, 8, 9], "3": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "product": [0, 2, 5, 11], "4": [0, 2, 3, 5, 6, 7, 8, 9, 11], "task": [0, 2, 5, 6, 11], "competit": [0, 2, 11], "7": [0, 2, 5, 6, 7, 8, 9, 10, 12], "water": [0, 2], "nativ": 0, "support": [0, 5, 9, 11, 12], "singl": [0, 2, 3, 5, 8, 9, 12], "label": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12], "analys": [0, 7], "If": [0, 5, 7, 9, 11, 12], "you": [0, 2, 5, 9, 10, 12], "find": [0, 2, 5, 6, 12], "hope": 0, "pleas": [0, 5, 9, 10, 11, 12], "consid": [0, 5, 7, 8, 9, 10, 11, 12], "origin": [0, 2, 3, 5, 8, 9, 10, 11, 12], "paper": [0, 2, 5, 9, 10, 12], "your": [0, 2, 5], "research": [0, 5], "inproceed": 0, "moreo2021quapi": 0, "titl": [0, 9], "author": [0, 12], "moreo": [0, 2, 5, 6, 11, 12], "alejandro": [0, 6], "esuli": [0, 2, 4, 5, 10, 11, 12], "andrea": 0, "sebastiani": [0, 2, 5, 6, 11, 12], "fabrizio": [0, 6], "booktitl": 0, "proceed": [0, 2, 5, 11, 12], "30th": 0, "acm": [0, 2, 5, 11, 12], "intern": [0, 2, 3, 5, 10, 11, 12], "confer": [0, 2, 5, 10, 11], "inform": [0, 2, 5, 6, 8, 9, 10, 11, 12], "knowledg": [0, 2, 5, 11], "manag": [0, 2, 5, 11], "page": [0, 2], "4534": 0, "4543": 0, "year": 0, "2021": [0, 5, 6, 12], "case": [0, 2, 3, 5, 7, 8, 9, 10, 11, 12], "want": [0, 5, 9], "improv": [0, 5, 9, 10, 12], "pull": 0, "request": [0, 2, 6, 9, 10, 11, 12], "devel": [0, 11], "branch": 0, "quapi": [2, 3, 4, 5, 6, 7, 8], "have": [2, 3, 5, 6, 7, 8, 9, 11, 12], "been": [2, 5, 6, 7, 8, 9, 10, 11, 12], "literatur": [2, 3, 6, 8, 9], "well": [2, 5, 7, 12], "interfac": [2, 3, 12], "allow": [2, 4, 5, 7, 8, 9, 10, 11, 12], "anyon": 2, "A": [2, 3, 5, 9, 10, 11, 12], "object": [2, 8, 9, 10, 11, 12], "pair": [2, 9], "labelledcollect": [2, 5, 8, 9, 11, 12], "one": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12], "plai": 2, "role": 2, "anoth": [2, 3, 7, 8, 9, 12], "consist": [2, 6, 7, 8, 9, 10, 11, 12], "iter": [2, 9, 11, 12], "handl": [2, 9], "take": [2, 5, 7, 8, 9, 11, 12], "look": [2, 7, 12], "code": [2, 3, 4, 5, 6, 7, 8, 9, 10], "1st": 2, "posit": [2, 5, 7, 9, 11, 12], "document": [2, 5, 7, 10, 11, 12], "2nd": [2, 5, 12], "onli": [2, 3, 5, 7, 9, 10, 11, 12], "neg": [2, 7, 9, 12], "neutral": 2, "3rd": 2, "2": [2, 3, 5, 6, 7, 8, 9, 11, 12], "0": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "strprev": [2, 3, 9], "prec": [2, 9], "show": [2, 5, 6, 7, 8, 9, 10, 11, 12], "digit": 2, "precis": [2, 9], "17": [2, 5], "50": [2, 7, 9, 12], "33": [2, 7, 9], "One": [2, 3, 5, 8, 12], "can": [2, 3, 5, 6, 7, 8, 9, 11, 12], "easili": [2, 7, 10], "produc": [2, 3, 7, 8, 9], "desir": [2, 3, 5, 8, 9, 11], "sample_s": [2, 3, 5, 6, 7, 8, 9, 12], "10": [2, 6, 7, 8, 9, 10, 12], "prev": [2, 3, 8, 9, 11], "which": [2, 3, 5, 6, 7, 9, 10, 11, 12], "40": [2, 5, 12], "made": [2, 4, 9, 11, 12], "run": [2, 4, 5, 7, 9, 11, 12], "same": [2, 5, 6, 7, 8, 9, 11, 12], "exact": [2, 5, 8, 9, 11, 12], "retain": [2, 5, 9, 10, 12], "index": [2, 5, 9, 10, 11, 12], "sampling_index": [2, 9, 11], "sampling_from_index": [2, 9, 11], "howev": [2, 6, 7, 9], "purpos": [2, 8, 12], "tackl": [2, 5], "dedic": [2, 3, 11], "entri": [2, 9, 12], "manual": [2, 3, 4, 5], "three": [2, 5, 7], "about": [2, 5, 7, 9, 11, 12], "kindl": [2, 5, 7, 11, 12], "devic": [2, 5, 7, 9, 10, 12], "harri": 2, "potter": 2, "": [2, 3, 5, 6, 7, 9, 10, 11, 12], "seri": [2, 6, 11], "known": [2, 5, 6, 9, 12], "imdb": [2, 6, 7, 8, 11], "movi": 2, "unifi": [2, 12], "fetch_review": [2, 5, 6, 7, 8, 9, 11, 12], "These": [2, 3, 4, 5, 8, 10, 12], "2018": [2, 5, 9, 11, 12], "octob": [2, 5], "recurr": [2, 5, 11], "neural": [2, 9, 11, 12], "network": [2, 9, 10, 11, 12], "27th": [2, 5, 11], "pp": [2, 5, 6, 10], "1775": [2, 5], "1778": [2, 5], "list": [2, 7, 9, 10, 11, 12], "id": [2, 5, 11], "reviews_sentiment_dataset": [2, 11], "some": [2, 3, 5, 7, 8, 9, 10, 11, 12], "statist": [2, 8, 9, 12], "fhe": 2, "ar": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "summar": 2, "below": [2, 5, 7, 9, 11], "size": [2, 3, 5, 9, 10, 11, 12], "type": [2, 5, 9, 10, 11, 12], "hp": [2, 5, 11], "9533": 2, "18399": 2, "018": 2, "982": 2, "065": 2, "935": 2, "text": [2, 5, 9, 10, 11, 12], "3821": [2, 11], "21591": [2, 11], "081": [2, 11], "919": [2, 11], "063": [2, 11], "937": [2, 11], "25000": [2, 11], "500": [2, 3, 7, 12], "access": [2, 5, 11, 12], "were": [2, 9], "tf": [2, 11], "idf": 2, "format": [2, 7, 9, 11, 12], "each": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "present": [2, 5, 11], "two": [2, 5, 7, 8, 9, 11, 12], "split": [2, 5, 7, 9, 10, 11, 12], "val": [2, 8, 10, 11], "exemplifi": 2, "how": [2, 5, 6, 7, 9, 10, 11, 12], "load": [2, 5, 8, 9, 11, 12], "gasp": [2, 11], "for_model_select": [2, 11], "gao": [2, 5, 11, 12], "w": [2, 5, 11], "2015": [2, 4, 5, 10, 12], "august": 2, "ieee": 2, "social": [2, 5, 11], "mine": [2, 5], "asonam": 2, "97": 2, "104": [2, 3], "semeval13": [2, 11], "semeval14": [2, 11], "semeval15": [2, 11], "share": [2, 11], "semev": 2, "get": [2, 7, 8, 9, 10, 11, 12], "when": [2, 3, 5, 7, 8, 9, 10, 11, 12], "them": [2, 5, 11, 12], "consult": [2, 5, 8, 12], "twitter_sentiment_datasets_test": [2, 11], "9": [2, 7, 9], "replac": [2, 5, 9, 11, 12], "twitter_sentiment_datasets_train": [2, 11], "featur": [2, 11, 12], "8788": 2, "3765": 2, "694582": 2, "421": 2, "496": 2, "082": 2, "407": 2, "507": 2, "086": 2, "spars": [2, 11], "hcr": [2, 5, 11], "1594": 2, "798": 2, "222046": 2, "546": 2, "211": 2, "243": 2, "640": 2, "167": 2, "193": 2, "omd": [2, 11], "1839": 2, "787": 2, "199151": 2, "463": 2, "271": 2, "266": 2, "437": 2, "283": 2, "280": 2, "sander": [2, 11], "2155": 2, "923": 2, "229399": 2, "161": 2, "691": 2, "148": 2, "164": [2, 5], "688": 2, "11338": 2, "3813": 2, "1215742": 2, "159": 2, "470": 2, "372": 2, "158": 2, "430": 2, "412": 2, "1853": 2, "109": 2, "361": 2, "530": 2, "2390": 2, "153": 2, "413": 2, "434": 2, "8000": 2, "2000": 2, "889504": 2, "157": 2, "351": 2, "492": 2, "163": 2, "341": 2, "497": 2, "sst": [2, 11], "2971": 2, "1271": 2, "376132": 2, "261": 2, "452": 2, "288": 2, "207": 2, "481": 2, "312": 2, "wa": [2, 5, 7, 8, 9, 11, 12], "2184": 2, "936": 2, "248563": 2, "305": 2, "414": 2, "281": 2, "282": 2, "446": 2, "272": [2, 3], "wb": [2, 11], "4259": 2, "1823": 2, "404333": 2, "270": 2, "392": 2, "337": 2, "274": 2, "335": 2, "repositori": [2, 11], "p\u00e9rez": [2, 5, 11, 12], "g\u00e1llego": [2, 5, 11, 12], "p": [2, 5, 9, 10, 11, 12], "quevedo": [2, 5, 11], "j": [2, 5, 9, 11, 12], "r": [2, 5, 9, 11, 12], "del": [2, 5, 11], "coz": [2, 5, 11], "2017": [2, 5, 11, 12], "problem": [2, 5, 7, 9, 11, 12], "characteriz": [2, 5, 11], "chang": [2, 3, 5, 9, 10, 11, 12], "distribut": [2, 3, 5, 7, 8, 9, 11, 12], "studi": [2, 5, 11], "fusion": [2, 5, 11], "34": [2, 5, 11, 12], "87": [2, 5, 11], "100": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "doe": [2, 4, 5, 9, 12], "exactli": 2, "coincid": 2, "et": [2, 4, 5, 9, 10, 11, 12], "al": [2, 4, 5, 9, 10, 11, 12], "sinc": [2, 3, 5, 6, 7, 8, 11, 12], "unabl": 2, "diabet": 2, "phonem": 2, "call": [2, 3, 5, 7, 8, 9, 11, 12], "fetch_ucibinarydataset": [2, 5, 9, 11], "yeast": [2, 11], "verbos": [2, 6, 9, 10, 11, 12], "return": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "randomli": [2, 11], "drawn": [2, 8, 9, 11], "stratifi": [2, 5, 10, 11, 12], "manner": [2, 10, 12], "whole": [2, 5, 6, 9, 10], "collect": [2, 8, 9, 10, 11, 12], "70": 2, "30": [2, 5, 6, 8, 11, 12], "respect": [2, 3, 7, 9, 12], "option": [2, 5, 7, 9, 10, 11, 12], "indic": [2, 3, 5, 7, 8, 9, 10, 11, 12], "descript": [2, 11], "standard": [2, 5, 7, 8, 9, 10, 11, 12], "submit": 2, "entir": [2, 3, 5, 6, 7, 8, 9], "kfcv": [2, 9, 10, 11], "valid": [2, 5, 6, 7, 8, 9, 10, 11, 12], "order": [2, 5, 6, 7, 8, 9, 11, 12], "accommod": [2, 9], "practic": 2, "first": [2, 3, 4, 5, 7, 9, 11, 12], "instanti": [2, 3, 5, 6, 8, 9, 10, 12], "time": [2, 3, 5, 8, 9, 11, 12], "fetch_ucibinarylabelledcollect": [2, 9, 11], "nfold": [2, 9, 11], "nrepeat": [2, 11], "abov": [2, 4, 5, 7, 9], "conduct": [2, 9], "2x5fcv": 2, "all": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12], "come": [2, 3, 5, 8, 9, 11, 12], "form": [2, 5, 9, 11, 12], "dens": [2, 12], "matric": [2, 7, 11], "acut": 2, "120": 2, "6": [2, 3, 5, 7, 11], "508": 2, "b": [2, 5, 9, 11, 12], "583": 2, "417": 2, "balanc": [2, 6, 7, 12], "625": 2, "539": 2, "461": 2, "922": 2, "078": 2, "breast": 2, "cancer": 2, "683": 2, "350": 2, "650": 2, "cmc": 2, "1473": 2, "573": 2, "427": 2, "774": 2, "226": 2, "653": 2, "347": 2, "ctg": 2, "2126": 2, "22": [2, 5, 10, 11], "222": [2, 10], "778": 2, "861": 2, "139": 2, "917": 2, "083": 2, "german": 2, "1000": [2, 6, 11, 12], "24": [2, 3, 10], "300": [2, 3, 10], "700": 2, "haberman": [2, 5], "306": 2, "735": 2, "265": 2, "ionospher": 2, "641": 2, "359": 2, "iri": 2, "150": 2, "667": 2, "333": 2, "mammograph": 2, "830": 2, "514": 2, "486": 2, "pageblock": 2, "5473": 2, "979": 2, "021": 2, "semeion": 2, "1593": 2, "256": [2, 10], "901": 2, "099": 2, "sonar": 2, "208": 2, "60": 2, "534": 2, "466": 2, "spambas": 2, "4601": 2, "57": 2, "606": 2, "394": 2, "spectf": 2, "267": 2, "44": 2, "794": 2, "206": 2, "tictacto": 2, "958": 2, "transfus": 2, "748": 2, "762": 2, "238": 2, "wdbc": 2, "569": 2, "627": 2, "373": 2, "wine": 2, "178": 2, "13": [2, 10], "669": 2, "331": 2, "601": 2, "399": 2, "730": 2, "q": [2, 4, 5, 9, 10, 12], "red": 2, "1599": 2, "465": 2, "535": 2, "white": 2, "4898": 2, "665": 2, "1484": 2, "711": 2, "289": 2, "download": [2, 4, 5, 9, 11], "automat": [2, 10], "thei": [2, 5, 9, 12], "store": [2, 10, 11, 12], "quapy_data": [2, 9], "folder": [2, 6, 8, 11, 12], "faster": [2, 11], "further": [2, 5, 10, 11, 12], "reus": [2, 5, 9, 11], "requir": [2, 3, 4, 5, 8, 10, 11, 12], "special": [2, 7, 11], "action": 2, "moment": [2, 3, 5], "fulli": [2, 9], "cardiotocographi": 2, "excel": 2, "file": [2, 7, 9, 10, 11, 12], "user": [2, 7, 8, 9, 10, 12], "instal": [2, 5, 10, 12], "xlrd": 2, "modul": [2, 3, 5, 7, 8], "block": [2, 9], "need": [2, 5, 8, 9, 11, 12], "unix": 2, "compress": 2, "extens": [2, 4, 5, 7, 12], "z": [2, 11], "directli": [2, 5], "doabl": 2, "packag": [2, 4, 5], "like": [2, 3, 5, 7, 8, 9, 10, 11, 12], "gzip": 2, "zip": [2, 7, 9], "uncompress": 2, "o": [2, 9], "depend": [2, 5, 6, 7, 9, 12], "softwar": 2, "do": [2, 3, 5, 6, 9, 10, 11, 12], "invok": [2, 5, 8, 9, 11], "It": [2, 3, 5, 6, 7, 9, 11], "good": [2, 6, 7], "idea": [2, 8], "ignor": [2, 9, 10, 11, 12], "former": [2, 12], "easi": 2, "score": [2, 5, 6, 9, 10, 11, 12], "accuraci": [2, 3, 7, 9, 12], "while": [2, 5, 7, 10, 11, 12], "latter": [2, 5, 12], "extrem": 2, "difficult": [2, 7], "tend": [2, 7], "magnitud": 2, "greater": 2, "than": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "ha": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "disproportion": 2, "impact": 2, "averag": [2, 3, 5, 9, 11, 12], "fetch_ucimulticlasslabelledcollect": [2, 9, 11], "dry": [2, 11], "bean": [2, 11], "test_split": [2, 11], "There": [2, 5], "pre": [2, 5, 9], "defin": [2, 5, 8, 9, 10, 11, 12], "partit": [2, 9, 10], "own": [2, 6], "split_stratifi": [2, 6, 8, 9, 11], "fetch_ucimulticlassdataset": [2, 9, 11], "min_test_split": [2, 11], "correspond": [2, 3, 7, 9, 11, 12], "retriev": [2, 6], "platform": 2, "filter": 2, "more": [2, 3, 4, 5, 7, 8, 9, 11, 12], "contain": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12], "least": [2, 11], "000": 2, "api": [2, 5], "displai": [2, 3, 7, 8, 9, 10], "9527": 2, "4084": 2, "qualiti": 2, "3428": 2, "1470": 2, "academ": 2, "success": [2, 9], "3096": 2, "1328": 2, "3933": 2, "1687": 2, "letter": 2, "26": [2, 10], "14000": 2, "6000": 2, "brief": [2, 3, 11], "t1a": [2, 11], "t1b": [2, 11], "t2a": [2, 11], "t2b": [2, 11], "vector": [2, 5, 8, 9, 10, 11, 12], "raw": [2, 9, 11], "instead": [2, 3, 5, 8, 9, 10, 11, 12], "28": [2, 3, 5, 11], "merchandis": [2, 11], "everi": [2, 3, 5, 6, 8, 9, 12], "val_gener": 2, "test_gener": 2, "fetch_lequa2022": [2, 9, 11], "lequa2022_experi": [2, 11], "py": [2, 5, 8, 11], "carri": [2, 3, 5, 9, 11, 12], "out": [2, 3, 5, 6, 7, 9, 10, 11, 12], "experi": [2, 5, 7, 9, 11], "onc": [2, 3, 5, 6, 7, 8, 9, 11], "fast": [2, 9, 11], "doc": 2, "5000": [2, 3, 7, 8], "250": 2, "20000": 2, "refer": [2, 10, 11], "sperduti": [2, 11], "overview": [2, 11], "clef": [2, 11], "speci": 2, "zenodo": [2, 11], "org": [2, 11, 12], "record": 2, "10036244": 2, "publicli": [2, 11], "whoi": [2, 11], "repo": [2, 9, 11], "hsosik": 2, "gonz\u00e1lez": [2, 5, 11, 12], "pglez82": 2, "ifcb_zenodo": 2, "_": [2, 7, 9, 11, 12], "precomput": [2, 3], "algorithm": [2, 8, 9, 12], "200": [2, 3, 10], "86": [2, 11], "678": 2, "total": [2, 8, 9], "584474": 2, "246916": 2, "2626429": 2, "per": [2, 11], "2922": 2, "2871": 2, "3873": 2, "min": 2, "59": 2, "max": [2, 5, 9, 12], "6645": 2, "7375": 2, "9112": 2, "number": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "512": [2, 10, 12], "term": [2, 5, 6, 7, 9, 10, 11, 12], "020": 2, "minimum": [2, 11, 12], "maximum": [2, 5, 8, 9, 10, 11, 12], "978": 2, "thu": [2, 3, 5, 6, 7, 9, 10, 12], "fals": [2, 3, 5, 7, 9, 10, 11, 12], "addition": 2, "single_sample_train": [2, 11], "val_gen": [2, 11], "fetch_ifcb": [2, 9, 11], "test_gen": [2, 11], "loader": [2, 11], "simpl": [2, 5, 7, 9, 12], "deal": 2, "t": [2, 3, 9, 10, 12], "n": [2, 8, 9, 10, 12], "second": [2, 3, 5, 7, 9, 11], "represent": [2, 5, 9, 10, 12], "col": [2, 11], "int": [2, 7, 9, 11, 12], "float": [2, 5, 9, 10, 11, 12], "charg": [2, 9, 11], "classmethod": [2, 9, 11, 12], "def": [2, 3, 5, 7, 9], "cl": 2, "path": [2, 5, 7, 9, 10, 11, 12], "str": [2, 9, 10, 11, 12], "loader_func": [2, 11], "callabl": [2, 9, 11, 12], "argument": [2, 3, 5, 7, 8, 9, 11, 12], "initi": [2, 10, 12], "particular": [2, 5, 12], "receiv": [2, 5, 7, 9], "specifi": [2, 5, 7, 8, 9, 10, 11, 12], "otherwis": [2, 5, 9, 10, 11, 12], "infer": [2, 5, 11], "pass": [2, 3, 7, 9, 10, 12], "along": [2, 3, 5, 9, 12], "train_path": [2, 11], "my_data": 2, "dat": [2, 10], "test_path": [2, 11], "my_custom_load": 2, "rb": 2, "fin": 2, "preprocess": [2, 5, 9, 12], "text2tfidf": [2, 5, 9, 11], "tfidf": [2, 6, 7, 8, 11], "reduce_column": [2, 9, 11], "reduc": [2, 3, 9, 11], "column": [2, 3, 9, 11], "frequenc": [2, 11, 12], "transform": [2, 9, 10, 11, 12], "subtract": [2, 9, 11], "normal": [2, 5, 9, 11, 12], "deviat": [2, 7, 8, 9, 11], "so": [2, 5, 7, 8, 9, 10, 11, 12], "zero": [2, 9], "varianc": [2, 7], "token": [2, 10, 11], "appeal": 3, "particularli": 3, "That": [3, 6, 9], "aris": 3, "under": [3, 5, 8], "belief": 3, "might": [3, 9, 11], "observ": [3, 5, 12], "dure": [3, 7, 12], "simpli": [3, 4, 5, 6, 7, 9, 12], "predictor": 3, "unlik": [3, 9], "govern": 3, "explain": [3, 7], "here": [3, 12], "rel": [3, 5, 9, 11, 12], "mrae": [3, 9, 10, 12], "f1e": [3, 9], "true_prev": [3, 7, 9], "prevs_hat": [3, 9], "ndarrai": [3, 5, 9, 11, 12], "mkld": [3, 9, 12], "mnkld": [3, 9, 12], "smooth": [3, 5, 9], "stabil": [3, 12], "third": [3, 7], "ep": [3, 9], "none": [3, 5, 6, 8, 9, 10, 11, 12], "paramet": [3, 5, 6, 8, 9, 10, 11, 12], "epsilon": [3, 9, 12], "tradition": 3, "2t": [3, 9], "past": 3, "either": [3, 5, 9], "environ": [3, 5, 6, 7, 8, 9, 12], "variabl": [3, 5, 7, 9, 11], "omit": 3, "thereaft": 3, "recommend": [3, 7, 12], "np": [3, 5, 6, 7, 8, 9, 11, 12], "asarrai": [3, 9], "let": [3, 5, 6, 9, 12], "estim_prev": [3, 7, 9], "600": 3, "914": 3, "final": [3, 5, 7, 12], "possibl": [3, 5, 8, 9, 12], "string": [3, 9, 11, 12], "error_funct": 3, "from_nam": [3, 9], "mse": [3, 5, 9, 12], "specif": [3, 5, 6, 8, 9, 12], "procotol": 3, "typic": [3, 5, 6, 7, 8, 9, 10, 11, 12], "wide": [3, 7, 8], "vari": [3, 5, 8], "amount": [3, 5, 8, 9, 12], "being": [3, 6, 8, 9, 12], "u": [3, 12], "alreadi": [3, 5, 9, 11], "chosen": [3, 6, 9], "prot": 3, "our": [3, 8], "evaluatio": 3, "choic": [3, 6, 12], "down": [3, 7, 8, 9, 11, 12], "error_metr": [3, 6, 8, 9], "4f": [3, 8], "often": 3, "system": [3, 5, 6, 9, 12], "conveni": [3, 5, 8, 9], "report": [3, 9, 12], "datafram": [3, 9], "account": 3, "given": [3, 5, 6, 8, 9, 10, 11, 12], "rise": [3, 8], "evaluation_report": [3, 9], "panda": [3, 9], "straightforward": 3, "comput": [3, 5, 7, 8, 9, 12], "pd": 3, "set_opt": 3, "expand_frame_repr": 3, "map": [3, 9, 10, 12], "308": 3, "692": 3, "314": 3, "686": 3, "005649": 3, "013182": 3, "000074": 3, "896": 3, "909": 3, "091": 3, "013145": 3, "069323": 3, "000985": 3, "848": 3, "152": 3, "809": 3, "191": 3, "039063": 3, "149806": 3, "005175": 3, "016": 3, "984": 3, "033": 3, "967": 3, "017236": 3, "487529": 3, "005298": 3, "728": 3, "751": 3, "249": 3, "022769": 3, "057146": 3, "001350": 3, "4995": 3, "72": 3, "698": 3, "302": 3, "021752": 3, "053631": 3, "001133": 3, "4996": 3, "868": 3, "132": 3, "888": 3, "112": 3, "020490": 3, "088230": 3, "001985": 3, "4997": 3, "292": 3, "708": 3, "298": 3, "702": 3, "006149": 3, "014788": 3, "000090": 3, "4998": 3, "76": 3, "220": 3, "780": 3, "019950": 3, "054309": 3, "001127": 3, "4999": 3, "948": 3, "052": 3, "965": 3, "035": 3, "016941": 3, "165776": 3, "003538": 3, "row": [3, 11], "x": [3, 5, 7, 9, 10, 11, 12], "023588": 3, "108779": 3, "003631": 3, "dtype": [3, 9, 11], "float64": 3, "process": [3, 5, 6, 9, 11], "finish": [3, 6], "exit": 3, "altern": [3, 6, 9, 12], "optim": [3, 4, 6, 9, 10, 12], "speed": [3, 5, 9, 12], "up": [3, 5, 9, 10, 12], "aggregativequantifi": [3, 5, 9, 12], "crisp": [3, 5, 9, 12], "soft": [3, 5, 12], "onlabelledcollectionprotocol": [3, 8, 9], "smaller": 3, "1m": 3, "20": [3, 5, 7, 9, 12], "prefer": [3, 8, 9], "postpon": [3, 5], "behaviour": [3, 5, 8, 9], "aggr_speedup": [3, 9], "auto": [3, 9], "convers": 3, "forc": [3, 9], "irrespect": [3, 7, 11, 12], "deactiv": [3, 9], "note": [3, 5, 7, 8, 9, 10, 11, 12], "heurist": [3, 12], "help": [3, 7, 12], "execut": 3, "lot": 3, "elm": [4, 5, 12], "svm": [4, 5, 7, 10, 11, 12], "svmperf": [4, 5, 9, 12], "patch": [4, 5, 10, 12], "perf": [4, 10, 12], "ext": 4, "compil": [4, 5], "prepare_svmperf": [4, 5], "sh": [4, 5], "job": 4, "directori": [4, 9, 10, 11, 12], "svm_perf_quantif": [4, 5], "version": [4, 9, 10, 12], "propos": [4, 5, 8, 12], "barranquero": [4, 5, 10, 12], "extend": [4, 5, 9, 12], "categor": [5, 11], "belong": [5, 6, 9, 12], "non": [5, 12], "group": 5, "though": [5, 9], "plan": 5, "add": [5, 6, 9, 11], "futur": [5, 9], "fact": [5, 7], "individu": [5, 11], "shoud": 5, "basequantifi": [5, 9, 12], "abstract": [5, 9, 10, 11, 12], "abstractmethod": 5, "self": [5, 6, 9, 10, 11, 12], "familiar": 5, "work": [5, 7, 8, 9, 10, 11, 12], "scikit": [5, 6, 9, 10, 11, 12], "inspir": 5, "why": 5, "adopt": [5, 6, 11], "respond": 5, "input": [5, 7, 9, 10, 11, 12], "element": [5, 9, 11, 12], "arrai": [5, 7, 9, 10, 11, 12], "baseestim": [5, 10, 12], "simplifi": 5, "set_param": [5, 9, 10, 12], "get_param": [5, 9, 10, 12], "part": [5, 11], "must": [5, 9, 11, 12], "aggregation_fit": [5, 9, 12], "classif_predict": [5, 12], "default": [5, 8, 9, 10, 11, 12], "fit_classifi": [5, 12], "val_split": [5, 9, 10, 12], "_check_init_paramet": 5, "classifier_fit_predict": [5, 9, 12], "predict_on": [5, 12], "routin": [5, 9, 11, 12], "common": [5, 12], "what": 5, "remain": 5, "ahead": 5, "unus": [5, 9, 10], "confid": [5, 9], "inherit": [5, 8, 9], "aggregativecrispquantifi": [5, 9, 12], "posterior": [5, 9, 10, 12], "aggregativesoftquantifi": [5, 9, 12], "anyth": [5, 12], "overrid": 5, "meant": [5, 12], "overriden": 5, "quickli": 5, "rais": [5, 9, 10, 12], "except": [5, 9, 12], "inconsist": 5, "__init__": 5, "avoid": [5, 9], "break": 5, "after": [5, 9, 12], "similarli": 5, "maintain": [5, 12], "properti": [5, 9, 10, 11, 12], "extern": 5, "fit_learn": 5, "pattern": 5, "rout": [5, 9, 10, 12], "advantag": [5, 8, 12], "step": [5, 7, 9, 12], "combin": [5, 6, 8, 9, 12], "hyperparamet": [5, 8, 9, 12], "clone": 5, "explor": [5, 6, 9], "huge": 5, "save": [5, 7, 9, 11], "concern": 5, "phase": [5, 12], "effici": 5, "without": [5, 9], "leverag": 5, "over": [5, 6, 9, 12], "customarili": [5, 6], "done": [5, 6], "four": 5, "cc": [5, 7, 9, 12], "simplest": 5, "reli": [5, 8, 9, 12], "deliv": [5, 6, 12], "pcc": [5, 7, 9, 12], "probabilist": [5, 9, 10, 12], "pacc": [5, 7, 9, 12], "serv": [5, 9, 11], "complet": [5, 7, 9, 12], "equip": [5, 7], "linearsvc": [5, 7, 11], "pickl": [5, 9, 11, 12], "train_test": [5, 6, 7, 8, 9, 11], "learner": [5, 6, 10, 12], "alia": [5, 9, 10, 11, 12], "classifyandcount": [5, 9, 12], "rate": [5, 9, 10, 12], "addit": [5, 9], "repres": [5, 7, 9, 11, 12], "fraction": [5, 12], "integ": [5, 9, 10, 11, 12], "fold": [5, 9, 11, 12], "cross": [5, 9, 10, 11, 12], "held": [5, 6, 9, 10, 12], "constructor": 5, "prevail": 5, "seem": 5, "calibr": [5, 9], "calibratedclassifiercv": 5, "base_estim": 5, "cv": [5, 6], "predict_proba": [5, 9, 10, 12], "convert": [5, 9, 10, 11, 12], "As": [5, 6], "line": [5, 9], "point": [5, 8, 9, 11, 12], "calibratedclassifi": 5, "hard": [5, 9, 10, 12], "lastli": 5, "everyth": 5, "said": 5, "aboud": 5, "now": [5, 7, 8], "solver": [5, 9, 12], "norm": [5, 9, 12], "solv": [5, 6, 9, 12], "linear": [5, 7, 9, 12], "mp": 5, "where": [5, 7, 9, 10, 11, 12], "unadjust": [5, 7, 9], "m": [5, 9, 12], "condit": [5, 8, 9, 12], "missclassif": 5, "sought": [5, 12], "invers": [5, 9, 12], "attempt": 5, "invert": [5, 12], "matrix": [5, 7, 9, 12], "minv": 5, "degener": [5, 9], "mai": [5, 9], "exist": [5, 8, 9, 10, 12], "invari": [5, 9, 12], "ratio": [5, 9, 12], "remark": 5, "vaz": [5, 9, 12], "izbicki": 5, "stern": 5, "journal": 5, "2019": [5, 11, 12], "equat": [5, 9, 12], "solvabl": 5, "l2": [5, 12], "math": [5, 9, 12], "better": [5, 12], "buns": [5, 12], "On": [5, 12], "multi": [5, 12], "workshop": [5, 12], "applic": [5, 12], "lq": [5, 12], "ecml": [5, 12], "pkdd": [5, 12], "grenobl": [5, 12], "franc": [5, 12], "li": [5, 9], "outsid": [5, 12], "clip": [5, 9, 12], "rang": [5, 6, 7, 8, 9, 12], "l1": [5, 9, 12], "mapsimplex": [5, 9, 12], "project": [5, 9, 12], "mathieu": [5, 9, 12], "blondel": [5, 9, 12], "projection_simplex_sort": [5, 9, 12], "condsoftmax": [5, 9, 12], "softmax": [5, 9, 12], "introduc": 5, "ziegler": 5, "czy\u017c": 5, "bayesian": [5, 12], "black": 5, "box": [5, 7, 9], "arxiv": 5, "2023": 5, "latent": 5, "random": [5, 7, 8, 9, 11, 12], "weak": 5, "rather": [5, 6, 12], "plug": 5, "markov": 5, "chain": 5, "mont": [5, 12], "carlo": [5, 12], "compat": [5, 12], "quantiti": [5, 9], "get_prevalence_sampl": [5, 9, 12], "uncertainti": [5, 12], "around": [5, 8, 11, 12], "suitabl": 5, "nearli": 5, "bay": [5, 12], "slower": 5, "guarante": [5, 8, 9, 11, 12], "proper": [5, 12], "strategi": [5, 6, 9], "bayesian_quantif": 5, "sld": [5, 9, 12], "via": [5, 8, 9, 10, 12], "expectationmaximizationquantifi": [5, 9, 12], "describ": [5, 9, 12], "saeren": [5, 12], "latinn": [5, 12], "decaesteck": [5, 12], "c": [5, 6, 9, 10, 11, 12], "2002": 5, "priori": 5, "14": 5, "21": [5, 7, 8, 9], "41": 5, "although": [5, 6, 7, 8, 12], "rank": [5, 9, 10, 12], "almost": 5, "alwai": [5, 7, 9, 12], "effect": [5, 9, 10, 12], "accept": 5, "construct": [5, 12], "name": [5, 7, 9, 10, 11, 12], "exact_train_prev": [5, 12], "depart": 5, "approxim": [5, 7, 9, 10], "suggest": 5, "alexandari": [5, 10, 12], "2020": [5, 10], "recalib": [5, 12], "correct": [5, 10, 12], "temperatur": [5, 10, 12], "scale": [5, 9, 10, 12], "castro": [5, 12], "v": [5, 9, 10, 12], "alaiz": [5, 12], "rodr\u0131": 5, "guez": 5, "alegr": [5, 12], "2013": [5, 12], "scienc": 5, "218": 5, "146": 5, "allia": 5, "hellingerdistancei": [5, 9, 12], "mixtur": [5, 9, 12], "just": [5, 8], "previou": 5, "overridden": [5, 12], "proport": [5, 9, 10, 11, 12], "taken": [5, 9, 10, 11, 12], "itself": [5, 9, 12], "min_df": [5, 6, 7, 8, 11, 12], "inplac": [5, 11, 12], "match": [5, 12], "approach": [5, 8, 12], "firat": 5, "2016": [5, 11, 12], "mutliclasshdi": 5, "dmy": [5, 6, 9, 12], "diverg": [5, 9, 12], "hd": [5, 9, 12], "cdf": [5, 12], "dy": [5, 9, 12], "maletzk": 5, "smm": [5, 9, 12], "hassan": 5, "thank": 5, "pablo": 5, "contribut": 5, "forman": [5, 8, 12], "2006": [5, 12], "2008": [5, 12], "t50": [5, 9, 12], "median": [5, 12], "sweep": [5, 12], "ms2": [5, 9, 12], "famili": [5, 12], "joachim": [5, 10, 12], "underli": [5, 6, 12], "properli": [5, 12], "achiev": [5, 6, 7, 8], "newsvmq": [5, 9, 12], "d\u00edez": 5, "reliabl": 5, "recognit": 5, "48": 5, "591": 5, "604": 5, "newsvmkld": [5, 9, 12], "newsvmnkld": 5, "stand": [5, 9, 12], "kullback": [5, 9, 12], "leibler": [5, 9, 12], "multivari": [5, 10], "transact": 5, "discoveri": 5, "articl": [5, 6], "27": [5, 10], "newsvma": [5, 9, 12], "newsvmra": [5, 9, 12], "re": [5, 6, 10, 11], "plo": 5, "ONE": 5, "23": [5, 10], "last": [5, 7, 8, 9, 10, 11, 12], "nowadai": 5, "behav": [5, 7, 8], "modifi": [5, 9], "assign": [5, 9, 11], "Then": 5, "thing": [5, 8], "svmperf_hom": [5, 12], "valid_loss": [5, 9, 10, 12], "mycustomloss": 5, "current": [5, 9, 10, 11, 12], "oper": 5, "trivial": 5, "19": [5, 11], "onevsal": [5, 9, 12], "wai": [5, 8, 12], "onevsallgener": [5, 9, 12], "onevsallaggreg": [5, 9, 12], "newonevsal": [5, 9, 12], "choos": [5, 12], "svmq": 5, "know": [5, 6], "n_job": [5, 6, 8, 9, 10, 11, 12], "parallel": [5, 6, 9, 10, 11, 12], "check": [5, 9], "explicit_loss_minim": 5, "versu": 5, "kde": [5, 12], "preprint": 5, "2401": 5, "00490": 5, "squar": [5, 9, 12], "cauchi": [5, 12], "schwarz": [5, 12], "close": [5, 8, 9, 11, 12], "solut": [5, 9, 12], "ml": [5, 11, 12], "likelihood": [5, 10, 12], "devis": 5, "too": 5, "bandwidth": [5, 12], "01": [5, 6, 9, 10, 12], "25": [5, 7, 9, 10, 12], "variat": 5, "By": [5, 9], "top": [5, 9, 12], "nor": 5, "inde": [5, 8], "castano": [5, 11], "dynam": [5, 10, 11, 12], "45": [5, 7, 11], "15": [5, 9, 11], "logist": [5, 10, 12], "regressor": 5, "lr": [5, 10, 12], "polici": [5, 12], "processor": 5, "av": [5, 12], "ptr": [5, 12], "member": [5, 12], "d": [5, 12], "static": [5, 12], "red_siz": [5, 12], "deep": [5, 9, 12], "torch": [5, 10, 12], "embed": [5, 10, 12], "lstm": [5, 10, 12], "cnn": [5, 12], "layer": [5, 10, 12], "neuralclassifiertrain": [5, 9, 10, 12], "cnnnet": [5, 9, 10, 12], "vocabulary_s": [5, 9, 10, 11, 12], "n_class": [5, 8, 9, 10, 11, 12], "cuda": [5, 10, 12], "strongli": [6, 7], "hyper": [6, 9, 10, 12], "wherebi": 6, "pick": 6, "best": [6, 9, 10, 12], "determin": [6, 7, 8, 9], "criteria": [6, 11], "accord": [6, 9, 10, 11, 12], "assess": 6, "right": [6, 9, 11, 12], "impos": [6, 9], "aim": [6, 7], "appropri": 6, "configur": [6, 9, 12], "design": 6, "long": [6, 10], "regard": 6, "next": [6, 9, 10, 11], "section": [6, 8], "argu": 6, "ecir": 6, "75": [6, 7, 8, 9, 12], "91": 6, "varieti": 6, "exhibit": [6, 7, 8], "degre": 6, "model_select": [6, 8, 12], "gridsearchq": [6, 8, 9, 12], "grid": [6, 8, 9, 12], "search": [6, 9, 12], "space": [6, 9, 10, 12], "numpi": [6, 8, 9, 10], "distributionmatch": 6, "confront": [6, 8], "against": [6, 7], "devot": 6, "train_prop": [6, 8, 11], "bin": [6, 7, 9, 12], "mark": [6, 9], "prefix": 6, "classifier__": 6, "param_grid": [6, 8, 9, 12], "classifier__c": [6, 8], "logspac": [6, 8, 12], "nbin": [6, 7, 9, 12], "16": 6, "64": [6, 10, 12], "refit": [6, 9], "retrain": [6, 10], "goe": [6, 9], "end": [6, 9, 12], "best_params_": 6, "best_model_": 6, "mae_scor": 6, "5f": 6, "start": 6, "hyperparam": 6, "got": [6, 12], "04021": 6, "took": 6, "1356": 6, "04286": 6, "2139": 6, "04888": 6, "2491": 6, "001": [6, 10, 12], "05163": 6, "5372": 6, "02445": 6, "9056": 6, "param": [6, 9, 10, 12], "02234": 6, "3114": 6, "develop": 6, "03102": 6, "computation": 6, "costli": 6, "try": 6, "theoret": 6, "suboptim": 6, "opt": 6, "gridsearchcv": [6, 12], "class_weight": [6, 7, 12], "conceptu": [6, 12], "flaw": 6, "hand": 6, "surrog": 6, "low": [6, 7, 9, 10], "basic": [7, 12], "outcom": 7, "main": [7, 8], "method_nam": [7, 9, 12], "shape": [7, 9, 10, 11, 12], "appear": [7, 9], "occur": [7, 11], "variou": 7, "involv": [7, 9], "merg": 7, "emq": [7, 9, 12], "55": 7, "showcas": 7, "spectrum": [7, 8, 9], "interv": [7, 8, 9], "05": [7, 9, 12], "gen_data": 7, "base_classifi": 7, "yield": [7, 8, 9, 11, 12], "tr_prev": [7, 9, 12], "repeat": [7, 8, 9], "random_st": [7, 8, 9, 11, 12], "append": 7, "insight": 7, "view": 7, "y": [7, 9, 10, 11, 12], "axi": [7, 9], "unfortun": 7, "limit": [7, 8, 9, 12], "binary_diagon": [7, 9], "train_prev": [7, 9], "savepath": [7, 9], "bin_diag": 7, "png": 7, "pdf": [7, 9, 12], "shown": [7, 9], "cyan": 7, "dot": [7, 9], "color": [7, 9], "band": [7, 9], "hidden": [7, 10, 12], "show_std": [7, 9], "bias": 7, "toward": [7, 11, 12], "seen": [7, 9, 12], "evinc": 7, "binary_bias_glob": [7, 9], "bin_bia": 7, "unbias": 7, "center": [7, 12], "overestim": 7, "high": [7, 9, 12], "lower": [7, 9, 12], "again": [7, 9], "accordingli": [7, 12], "90": [7, 9], "rewrit": 7, "method_data": 7, "training_preval": 7, "linspac": 7, "training_s": 7, "suffic": 7, "constrain": [7, 8, 9, 11], "train_sampl": 7, "clearli": 7, "binary_bias_bin": [7, 9], "broken": [7, 9], "To": [7, 11], "isometr": [7, 9], "subinterv": 7, "interestingli": 7, "enough": 7, "seemingli": 7, "happen": [7, 9], "tendenc": 7, "underestim": 7, "beyond": 7, "67": [7, 9], "curios": 7, "pretti": 7, "discuss": 7, "analyz": 7, "compar": [7, 9], "both": [7, 11], "harder": 7, "error_by_drift": [7, 9], "error_nam": [7, 9], "n_bin": [7, 9, 12], "err_drift": 7, "whenev": [7, 9], "preserv": [7, 9, 11], "higher": [7, 8, 11], "wors": [7, 9], "clear": 7, "lowest": 7, "rememb": 7, "solid": 7, "comparison": [7, 8], "detriment": 7, "hide": 7, "robustli": 8, "presenc": 8, "abstractprotocol": [8, 9, 11], "tupl": [8, 9, 11, 12], "abstractstochasticseededprotocol": [8, 9], "stochast": 8, "seed": [8, 9, 11, 12], "replic": [8, 9], "fair": 8, "radom_st": 8, "sequenc": [8, 9], "return_typ": [8, 9], "labelled_collect": [8, 9], "sample_prev": [8, 9], "technic": 8, "explan": 8, "custom_protocol": 8, "subject": 8, "2005": 8, "cover": [8, 9, 10], "full": [8, 9, 11, 12], "equal": [8, 9, 12], "distant": [8, 9], "n_prevpoint": [8, 9], "obtain": [8, 9, 10, 12], "66": [8, 12], "num_prevalence_combin": [8, 9], "n_repeat": [8, 9], "1771": 8, "signific": 8, "decid": [8, 9, 11], "budg": 8, "give": [8, 12], "budget": 8, "get_nprevpoints_approxim": [8, 9], "4960": 8, "usag": 8, "n_preval": [8, 9], "equial": 8, "val_app": 8, "cumbersom": 8, "increas": 8, "rapidli": 8, "becom": [8, 9], "impract": 8, "fix": 8, "uniformli": [8, 9], "legitim": 8, "drawback": 8, "elect": 8, "never": [8, 9], "yet": [8, 9], "control": [8, 9], "burden": 8, "incur": 8, "kraemer": [8, 9], "in_protocol": 8, "sometim": 8, "deprec": [8, 9, 12], "due": 8, "capabl": 8, "bctscalibr": [9, 10], "nbvscalibr": [9, 10], "recalibratedprobabilisticclassifi": [9, 10], "recalibratedprobabilisticclassifierbas": [9, 10], "classes_": [9, 10, 11, 12], "fit_cv": [9, 10], "fit_tr_val": [9, 10], "tscalibr": [9, 10], "vscalibr": [9, 10], "lowranklogisticregress": [9, 10], "document_embed": [9, 10], "lstmnet": [9, 10], "reset_net_param": [9, 10], "textclassifiernet": [9, 10], "dimens": [9, 10, 11, 12], "forward": [9, 10, 12], "xavier_uniform": [9, 10], "torchdataset": [9, 10], "asdataload": [9, 10], "decision_funct": [9, 10, 12], "set_score_request": [9, 10], "splitstratifi": [9, 11], "stat": [9, 11], "xp": [9, 11], "xy": [9, 11], "join": [9, 11], "split_random": [9, 11], "uniform_sampl": [9, 11], "uniform_sampling_index": [9, 11], "warn": [9, 11, 12], "indextransform": [9, 11], "add_word": [9, 11], "fit_transform": [9, 11], "reader": 9, "binar": [9, 11], "from_csv": [9, 11], "from_spars": [9, 11], "from_text": [9, 11], "reindex_label": [9, 11], "getptecondestim": [9, 12], "newinvariantratioestim": [9, 12], "set_fit_request": [9, 12], "adjustedclassifyandcount": [9, 12], "aggregativemedianestim": [9, 12], "val_split_": [9, 12], "bayesiancc": [9, 12], "get_conditional_probability_sampl": [9, 12], "sample_from_posterior": [9, 12], "binaryaggregativequantifi": [9, 12], "neg_label": [9, 12], "pos_label": [9, 12], "distributionmatchingi": [9, 12], "em": [9, 12], "emq_bct": [9, 12], "max_it": [9, 12], "set_predict_proba_request": [9, 12], "probabilisticadjustedclassifyandcount": [9, 12], "probabilisticclassifyandcount": [9, 12], "newelm": [9, 12], "kdebas": [9, 12], "bandwidth_method": [9, 12], "get_kde_funct": [9, 12], "get_mixture_compon": [9, 12], "kdeyc": [9, 12], "gram_matrix_mix_sum": [9, 12], "kdeyhd": [9, 12], "kdeyml": [9, 12], "quanetmodul": [9, 12], "quanettrain": [9, 12], "clean_checkpoint": [9, 12], "clean_checkpoint_dir": [9, 12], "mae_loss": [9, 12], "discard": [9, 11, 12], "thresholdoptim": [9, 12], "aggregate_with_threshold": [9, 12], "binaryquantifi": [9, 12], "eacc": [9, 12], "ecc": [9, 12], "eemq": [9, 12], "ehdi": [9, 12], "epacc": [9, 12], "valid_polici": [9, 12], "medianestim": [9, 12], "medianestimator2": [9, 12], "ensemblefactori": [9, 12], "get_probability_distribut": [9, 12], "non_aggreg": 9, "dmx": [9, 12], "hdx": [9, 12], "distributionmatchingx": [9, 12], "maximumlikelihoodprevalenceestim": [9, 12], "readm": [9, 12], "std_constrained_linear_l": [9, 12], "compos": 9, "absolute_error": 9, "hat": [9, 12], "frac": [9, 12], "mathcal": [9, 12], "sum_": [9, 12], "acc_error": 9, "y_true": 9, "y_pred": 9, "tp": 9, "tn": 9, "fp": 9, "fn": 9, "f1_error": 9, "f1": [9, 10], "macro": 9, "f_1": 9, "harmon": 9, "recal": 9, "2tp": 9, "categori": 9, "independ": [9, 12], "err_nam": 9, "d_": 9, "kl": 9, "log": [9, 11, 12], "factor": 9, "beforehand": 9, "n_sampl": [9, 10], "mean_absolute_error": 9, "mean_normalized_absolute_error": 9, "mean_normalized_relative_absolute_error": 9, "mnrae": [9, 12], "mean_relative_absolute_error": 9, "mnae": [9, 12], "z_": 9, "min_": [9, 12], "2frac": 9, "normalized_absolute_error": 9, "normalized_relative_absolute_error": 9, "relative_absolute_error": 9, "underlin": 9, "displaystyl": 9, "bool": [9, 10, 12], "whether": [9, 10, 11, 12], "act": 9, "larger": [9, 12], "boolean": [9, 11, 12], "stdout": 9, "evaluate_on_sampl": 9, "central": 9, "endow": 9, "larg": 9, "overal": 9, "exce": 9, "undertaken": 9, "issu": [9, 12], "hellingerdist": 9, "hellingh": 9, "distanc": [9, 12], "discret": [9, 12], "sqrt": [9, 12], "p_i": 9, "q_i": 9, "real": [9, 10, 11, 12], "topsoedist": 9, "1e": [9, 10, 12], "topso": [9, 12], "left": [9, 11, 12], "argmin_preval": 9, "liter": [9, 12], "optim_minim": [9, 12], "linear_search": 9, "ternary_search": 9, "scipi": [9, 11], "02": 9, "ternari": [9, 12], "as_binary_preval": 9, "positive_preval": 9, "_supportsarrai": 9, "_nestedsequ": 9, "complex": 9, "byte": 9, "clip_if_necessari": 9, "helper": 9, "check_prevalence_vector": 9, "raise_except": 9, "toler": [9, 12], "08": 9, "aggr": 9, "sum": [9, 12], "verifi": 9, "arraylik": 9, "lie": [9, 12], "num_vector": 9, "counts_from_label": 9, "n_instanc": [9, 10, 12], "correctli": 9, "len": 9, "get_diverg": 9, "tri": [9, 12], "combinations_budget": 9, "largest": 9, "equidist": 9, "dimension": [9, 10, 11, 12], "repetit": 9, "less": [9, 11, 12], "l1_norm": 9, "unnormalized_arr": 9, "onto": [9, 12], "ineffici": 9, "earli": [9, 10, 12], "power": 9, "normalize_preval": 9, "emploi": [9, 12], "rescal": 9, "invalid": 9, "calcul": [9, 12], "binom": 9, "mass": 9, "alloc": [9, 10], "star": 9, "bar": 9, "smallest": 9, "lost": 9, "slsqp": 9, "prevalence_from_label": 9, "prevalence_from_prob": 9, "decis": [9, 10, 12], "argmax": 9, "prevalence_linspac": 9, "grid_point": 9, "smooth_limits_epsilon": 9, "separ": [9, 11], "95": 9, "99": 9, "adapt": [9, 10], "bsd": 9, "licens": 9, "accompani": 9, "akinori": 9, "fujino": 9, "naonori": 9, "ueda": 9, "euclidean": 9, "icpr": 9, "2014": 9, "url": 9, "leav": [9, 11], "untouch": 9, "solve_adjust": 9, "class_conditional_r": 9, "unadjusted_count": 9, "y_i": 9, "m_": 9, "ij": 9, "y_j": 9, "strictli": [9, 12], "remov": [9, 11, 12], "solve_adjustment_binari": 9, "prevalence_estim": 9, "tpr": [9, 12], "fpr": [9, 12], "formula": 9, "decim": 9, "uniform_preval": 9, "uniform_prevalence_sampl": 9, "post": 9, "stackexchang": 9, "question": 9, "3227": 9, "uniform_simplex_sampl": 9, "configstatu": 9, "statu": 9, "msg": 9, "fail": 9, "dict": [9, 11, 12], "timeout": 9, "raise_error": 9, "dictionari": [9, 10, 11, 12], "kei": [9, 11], "quantification_error": 9, "gen": 9, "establish": 9, "timer": 9, "longer": [9, 12], "timeouterror": 9, "bound": [9, 12], "valueerror": 9, "best_model": 9, "contanin": 9, "unchang": [9, 10, 12], "metadata": [9, 10, 12], "relev": [9, 10, 12], "enable_metadata_rout": [9, 10, 12], "set_config": [9, 10, 12], "guid": [9, 10, 11, 12], "metadata_rout": [9, 10, 12], "sub": [9, 10, 12], "insid": [9, 10, 12], "pipelin": [9, 10, 12], "updat": [9, 10, 12], "enum": 9, "enumer": 9, "cross_val_predict": 9, "akin": [9, 12], "reproduc": [9, 11], "expand_grid": 9, "expand": 9, "group_param": 9, "que": 9, "pos_class": [9, 11], "colormap": 9, "matplotlib": 9, "listedcolormap": 9, "vertical_xtick": 9, "legend": 9, "local": 9, "sign": 9, "minu": 9, "classs": 9, "compon": [9, 10, 12], "cm": 9, "tab10": 9, "secondari": 9, "global": 9, "method_ord": 9, "henc": [9, 11, 12], "inconveni": 9, "leyend": 9, "hightlight": 9, "associ": 9, "brokenbar_supremacy_by_drift": 9, "isomer": 9, "x_error": 9, "y_error": 9, "ttest_alpha": 9, "005": 9, "tail_density_threshold": 9, "region": 9, "chart": 9, "ii": 9, "significantli": 9, "side": 9, "percentil": 9, "divid": 9, "similar": [9, 12], "threshold": [9, 12], "densiti": [9, 12], "tail": 9, "outlier": 9, "show_dens": 9, "show_legend": 9, "logscal": 9, "vline": 9, "especi": 9, "cumberson": 9, "gain": 9, "understand": 9, "fare": 9, "regim": 9, "highlight": 9, "vertic": 9, "sanity_check": 9, "10000": [9, 12], "extract": [9, 11, 12], "copi": [9, 11], "skip": 9, "prevalence_grid": 9, "exhaust": 9, "implicit": 9, "return_constrained_dim": 9, "rest": [9, 10, 11], "quit": 9, "obvious": 9, "determinist": 9, "anywher": 9, "multipli": 9, "realiz": 9, "samples_paramet": 9, "necessari": [9, 12], "parent": 9, "enforc": 9, "collat": 9, "arg": [9, 10, 11, 12], "prepar": 9, "befor": [9, 10, 11, 12], "adher": 9, "artificialprevalenceprotocol": 9, "domainmix": 9, "domaina": 9, "domainb": 9, "mixture_point": 9, "domain": 9, "draw": [9, 12], "iterateprotocol": 9, "previous": [9, 12], "therefor": 9, "naturalprevalenceprotocol": 9, "get_col": 9, "get_labelled_collect": 9, "on_preclassified_inst": 9, "pre_classif": 9, "in_plac": 9, "modif": 9, "place": [9, 11], "sens": 9, "endeavour": 9, "intract": 9, "uniformprevalenceprotocol": 9, "earlystop": 9, "patienc": [9, 10, 12], "lower_is_bett": 9, "stop": [9, 10, 12], "epoch": [9, 10, 12], "best_epoch": 9, "best_scor": 9, "consecut": [9, 10, 11, 12], "monitor": 9, "obtaind": 9, "far": [9, 10, 11], "flag": 9, "keep": [9, 11], "track": 9, "create_if_not_exist": 9, "makedir": 9, "exist_ok": 9, "dir": [9, 12], "subdir": 9, "anotherdir": 9, "create_parent_dir": 9, "txt": 9, "download_fil": 9, "archive_filenam": 9, "destin": 9, "filenam": 9, "download_file_if_not_exist": 9, "dowload": 9, "get_quapy_hom": 9, "home": [9, 11], "perman": 9, "load_report": 9, "as_dict": 9, "map_parallel": 9, "func": 9, "slice": 9, "item": 9, "worker": [9, 10, 11, 12], "backend": [9, 12], "loki": [9, 12], "wrapper": [9, 10, 11, 12], "multiprocess": [9, 12], "delai": 9, "args_i": 9, "silent": [9, 12], "child": 9, "ensur": 9, "open_arg": 9, "parallel_unpack": 9, "pickled_resourc": 9, "pickle_path": 9, "generation_func": 9, "resourc": 9, "some_arrai": 9, "mock": [9, 10], "rand": 9, "my_arrai": 9, "pkl": 9, "save_text_fil": 9, "disk": [9, 11], "miss": 9, "temp_se": 9, "context": 9, "tempor": [9, 10], "outer": 9, "state": 9, "random_se": 9, "within": [9, 12], "launch": 9, "start_msg": 9, "end_msg": 9, "sleep": 9, "begin": 9, "bct": [10, 12], "abstent": 10, "afterward": [10, 12], "No": [10, 12], "nbv": [10, 12], "kundaj": 10, "shrikumar": 10, "novemb": 10, "beat": [10, 12], "232": 10, "pmlr": 10, "calibratorfactori": 10, "n_featur": [10, 12], "n_compon": 10, "kwarg": [10, 11, 12], "decomposit": 10, "truncatedsvd": 10, "princip": 10, "regress": 10, "length": [10, 11], "eventu": [10, 11], "unalt": 10, "emb": 10, "embedding_s": 10, "hidden_s": 10, "repr_siz": 10, "kernel_height": 10, "stride": 10, "pad": [10, 11], "drop_p": 10, "convolut": 10, "vocabulari": [10, 11], "kernel": [10, 12], "drop": 10, "dropout": [10, 12], "batch": 10, "dataload": 10, "tensor": 10, "n_dimens": [10, 12], "lstm_class_nlay": 10, "short": 10, "memori": 10, "net": 10, "weight_decai": 10, "batch_siz": 10, "batch_size_test": 10, "padding_length": 10, "checkpointpath": 10, "checkpoint": [10, 12], "classifier_net": 10, "weight": [10, 11], "decai": 10, "wait": 10, "cpu": [10, 12], "enabl": 10, "gpu": [10, 12], "vocab_s": 10, "reiniti": 10, "trainer": 10, "disjoint": 10, "embed_s": 10, "nn": 10, "pad_length": 10, "xavier": 10, "util": [10, 11, 12], "shuffl": [10, 11], "longest": 10, "shorter": 10, "svmperf_bas": [10, 12], "host_fold": 10, "classifiermixin": 10, "thorsten": 10, "svm_perf_learn": 10, "svm_perf_classifi": 10, "trade": [10, 12], "off": [10, 12], "margin": [10, 12], "std": 10, "qacc": 10, "qf1": 10, "qgm": 10, "tmp": 10, "delet": 10, "sample_weight": 10, "12": 10, "train_siz": 11, "conform": 11, "round": 11, "loader_kwarg": 11, "read": 11, "n_train": 11, "n_test": 11, "quick": 11, "tr": 11, "te": 11, "csr": 11, "csr_matrix": 11, "4403": 11, "attach": 11, "my_collect": 11, "codefram": 11, "union": 11, "lead": 11, "empti": 11, "met": 11, "whose": [11, 12], "stratif": 11, "data_hom": 11, "link": 11, "togeth": 11, "286": 11, "dump": 11, "quay_data": 11, "_ifcb": 11, "ifcbtrainsamplesfromdir": 11, "ifcbtestsampl": 11, "dataset_nam": 11, "predefin": 11, "fetch_ucilabelledcollect": 11, "uci_dataset": 11, "5fcvx2": 11, "x2": 11, "max_train_inst": 11, "min_class_support": 11, "archiv": 11, "ic": 11, "edu": 11, "suit": 11, "ucimlrepo": 11, "uci_multiclass_dataset": 11, "surpass": 11, "istanc": 11, "fewer": 11, "deafult": 11, "offici": 11, "_lequa2022": 11, "samplesfromdir": 11, "subclass": [11, 12], "minimun": 11, "kept": 11, "subsequ": 11, "mining6": 11, "style": 11, "countvector": 11, "keyword": [11, 12], "nogap": 11, "regardless": 11, "codifi": 11, "unknown": 11, "surfac": 11, "assert": 11, "gap": 11, "preced": 11, "uniqu": 11, "rare": 11, "unk": 11, "occurr": 11, "stabl": 11, "feature_extract": 11, "html": 11, "subtyp": 11, "spmatrix": 11, "infrequ": 11, "aka": [11, 12], "sublinear_tf": 11, "scall": 11, "counter": 11, "tfidfvector": 11, "whcih": 11, "had": 11, "encod": 11, "utf": 11, "csv": 11, "feat1": 11, "feat2": 11, "featn": 11, "covari": [11, 12], "express": 11, "class2int": 11, "collet": 11, "fomart": 11, "progress": 11, "sentenc": 11, "classnam": 11, "u1": 11, "misclassif": 12, "p_c": 12, "ax": 12, "y_": 12, "hat_yi": 12, "yj": 12, "yi": 12, "abc": 12, "base_quantifi": 12, "parameter": 12, "parllel": 12, "subobject": 12, "nest": 12, "__": 12, "classification_fit": 12, "attribut": 12, "actual": 12, "remaind": 12, "num_warmup": 12, "num_sampl": 12, "mcmc_seed": 12, "diagnos": 12, "degeneraci": 12, "visibl": 12, "confus": 12, "extra": 12, "warmup": 12, "mcmc": 12, "sampler": 12, "noth": 12, "helling": 12, "channel": 12, "ch": 12, "di": 12, "dij": 12, "th": 12, "tol": 12, "dl": 12, "doi": 12, "1145": 12, "3219819": 12, "3220059": 12, "histogram": 12, "classif_posterior": 12, "mutual": 12, "recurs": 12, "until": 12, "converg": 12, "recalibr": 12, "messag": 12, "posterior_prob": 12, "0001": 12, "reach": 12, "loop": 12, "ir": 12, "unlabel": 12, "binary_quantifi": 12, "parallel_backend": 12, "prevel": 12, "joblib": 12, "cannot": 12, "temp": 12, "resp": 12, "simplif": 12, "_kdei": 12, "ancestor": 12, "scott": 12, "silverman": 12, "wrap": 12, "kerneldens": 12, "evalut": 12, "kdei": 12, "alpha": 12, "delta": 12, "boldsymbol": 12, "q_": 12, "widetild": 12, "p_": 12, "alpha_i": 12, "l": 12, "_i": 12, "p_x": 12, "x_i": 12, "h": 12, "datapoint": 12, "mathrm": 12, "dx": 12, "2dx": 12, "admit": 12, "montecarlo_tri": 12, "disntac": 12, "_f": 12, "trial": 12, "x_1": 12, "ldot": 12, "x_t": 12, "sim_": 12, "criterion": 12, "mathbb": 12, "_neural": 12, "doc_embedding_s": 12, "stats_siz": 12, "lstm_hidden_s": 12, "lstm_nlayer": 12, "ff_layer": 12, "1024": 12, "bidirect": 12, "qdrop_p": 12, "order_bi": 12, "cell": 12, "connect": 12, "ff": 12, "sort": 12, "doc_embed": 12, "doc_posterior": 12, "recip": 12, "care": 12, "regist": 12, "hook": 12, "n_epoch": 12, "tr_iter_per_poch": 12, "va_iter_per_poch": 12, "checkpointdir": 12, "checkpointnam": 12, "pytorch": 12, "ground": 12, "truth": 12, "_threshold_optim": 12, "goal": 12, "bring": 12, "denomin": 12, "closest": 12, "complement": 12, "param_mod_sel": 12, "param_model_sel": 12, "min_po": 12, "max_sample_s": 12, "preliminari": 12, "recomput": 12, "base_quantifier_class": 12, "factori": 12, "110": 12, "setup": 12, "mimick": 12, "rodr\u00edguez": 12, "nfeat": 12, "dissimilar": 12, "mlpe": 12, "lazi": 12, "put": 12, "assumpion": 12, "estimant": 12, "bootstrap_tri": 12, "bootstrap_rang": 12, "bagging_tri": 12, "bagging_rang": 12, "vectorizer_kwarg": 12, "class_cond_x": 12}, "objects": {"": [[9, 0, 0, "-", "quapy"]], "quapy": [[10, 0, 0, "-", "classification"], [11, 0, 0, "-", "data"], [9, 0, 0, "-", "error"], [9, 0, 0, "-", "evaluation"], [9, 0, 0, "-", "functional"], [12, 0, 0, "-", "method"], [9, 0, 0, "-", "model_selection"], [9, 0, 0, "-", "plot"], [9, 0, 0, "-", "protocol"], [9, 0, 0, "-", "util"]], "quapy.classification": [[10, 0, 0, "-", "calibration"], [10, 0, 0, "-", "methods"], [10, 0, 0, "-", "neural"], [10, 0, 0, "-", "svmperf"]], "quapy.classification.calibration": [[10, 1, 1, "", "BCTSCalibration"], [10, 1, 1, "", "NBVSCalibration"], [10, 1, 1, "", "RecalibratedProbabilisticClassifier"], [10, 1, 1, "", "RecalibratedProbabilisticClassifierBase"], [10, 1, 1, "", "TSCalibration"], [10, 1, 1, "", "VSCalibration"]], "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase": [[10, 2, 1, "", "classes_"], [10, 3, 1, "", "fit"], [10, 3, 1, "", "fit_cv"], [10, 3, 1, "", "fit_tr_val"], [10, 3, 1, "", "predict"], [10, 3, 1, "", "predict_proba"]], "quapy.classification.methods": [[10, 1, 1, "", "LowRankLogisticRegression"]], "quapy.classification.methods.LowRankLogisticRegression": [[10, 3, 1, "", "fit"], [10, 3, 1, "", "get_params"], [10, 3, 1, "", "predict"], [10, 3, 1, "", "predict_proba"], [10, 3, 1, "", "set_params"], [10, 3, 1, "", "transform"]], "quapy.classification.neural": [[10, 1, 1, "", "CNNnet"], [10, 1, 1, "", "LSTMnet"], [10, 1, 1, "", "NeuralClassifierTrainer"], [10, 1, 1, "", "TextClassifierNet"], [10, 1, 1, "", "TorchDataset"]], "quapy.classification.neural.CNNnet": [[10, 3, 1, "", "document_embedding"], [10, 3, 1, "", "get_params"], [10, 4, 1, "", "training"], [10, 2, 1, "", "vocabulary_size"]], "quapy.classification.neural.LSTMnet": [[10, 3, 1, "", "document_embedding"], [10, 3, 1, "", "get_params"], [10, 4, 1, "", "training"], [10, 2, 1, "", "vocabulary_size"]], "quapy.classification.neural.NeuralClassifierTrainer": [[10, 2, 1, "", "device"], [10, 3, 1, "", "fit"], [10, 3, 1, "", "get_params"], [10, 3, 1, "", "predict"], [10, 3, 1, "", "predict_proba"], [10, 3, 1, "", "reset_net_params"], [10, 3, 1, "", "set_params"], [10, 3, 1, "", "transform"]], "quapy.classification.neural.TextClassifierNet": [[10, 3, 1, "", "dimensions"], [10, 3, 1, "", "document_embedding"], [10, 3, 1, "", "forward"], [10, 3, 1, "", "get_params"], [10, 3, 1, "", "predict_proba"], [10, 4, 1, "", "training"], [10, 2, 1, "", "vocabulary_size"], [10, 3, 1, "", "xavier_uniform"]], "quapy.classification.neural.TorchDataset": [[10, 3, 1, "", "asDataloader"]], "quapy.classification.svmperf": [[10, 1, 1, "", "SVMperf"]], "quapy.classification.svmperf.SVMperf": [[10, 3, 1, "", "decision_function"], [10, 3, 1, "", "fit"], [10, 3, 1, "", "predict"], [10, 3, 1, "", "set_score_request"], [10, 4, 1, "", "valid_losses"]], "quapy.data": [[11, 0, 0, "-", "base"], [11, 0, 0, "-", "datasets"], [11, 0, 0, "-", "preprocessing"], [11, 0, 0, "-", "reader"]], "quapy.data.base": [[11, 1, 1, "", "Dataset"], [11, 1, 1, "", "LabelledCollection"]], "quapy.data.base.Dataset": [[11, 3, 1, "", "SplitStratified"], [11, 2, 1, "", "binary"], [11, 2, 1, "", "classes_"], [11, 3, 1, "", "kFCV"], [11, 3, 1, "", "load"], [11, 2, 1, "", "n_classes"], [11, 3, 1, "", "reduce"], [11, 3, 1, "", "stats"], [11, 2, 1, "", "train_test"], [11, 2, 1, "", "vocabulary_size"]], "quapy.data.base.LabelledCollection": [[11, 2, 1, "", "X"], [11, 2, 1, "", "Xp"], [11, 2, 1, "", "Xy"], [11, 2, 1, "", "binary"], [11, 3, 1, "", "counts"], [11, 3, 1, "", "join"], [11, 3, 1, "", "kFCV"], [11, 3, 1, "", "load"], [11, 2, 1, "", "n_classes"], [11, 2, 1, "", "p"], [11, 3, 1, "", "prevalence"], [11, 3, 1, "", "sampling"], [11, 3, 1, "", "sampling_from_index"], [11, 3, 1, "", "sampling_index"], [11, 3, 1, "", "split_random"], [11, 3, 1, "", "split_stratified"], [11, 3, 1, "", "stats"], [11, 3, 1, "", "uniform_sampling"], [11, 3, 1, "", "uniform_sampling_index"], [11, 2, 1, "", "y"]], "quapy.data.datasets": [[11, 5, 1, "", "fetch_IFCB"], [11, 5, 1, "", "fetch_UCIBinaryDataset"], [11, 5, 1, "", "fetch_UCIBinaryLabelledCollection"], [11, 5, 1, "", "fetch_UCIMulticlassDataset"], [11, 5, 1, "", "fetch_UCIMulticlassLabelledCollection"], [11, 5, 1, "", "fetch_lequa2022"], [11, 5, 1, "", "fetch_reviews"], [11, 5, 1, "", "fetch_twitter"], [11, 5, 1, "", "warn"]], "quapy.data.preprocessing": [[11, 1, 1, "", "IndexTransformer"], [11, 5, 1, "", "index"], [11, 5, 1, "", "reduce_columns"], [11, 5, 1, "", "standardize"], [11, 5, 1, "", "text2tfidf"]], "quapy.data.preprocessing.IndexTransformer": [[11, 3, 1, "", "add_word"], [11, 3, 1, "", "fit"], [11, 3, 1, "", "fit_transform"], [11, 3, 1, "", "transform"], [11, 3, 1, "", "vocabulary_size"]], "quapy.data.reader": [[11, 5, 1, "", "binarize"], [11, 5, 1, "", "from_csv"], [11, 5, 1, "", "from_sparse"], [11, 5, 1, "", "from_text"], [11, 5, 1, "", "reindex_labels"]], "quapy.error": [[9, 5, 1, "", "absolute_error"], [9, 5, 1, "", "acc_error"], [9, 5, 1, "", "acce"], [9, 5, 1, "", "ae"], [9, 5, 1, "", "f1_error"], [9, 5, 1, "", "f1e"], [9, 5, 1, "", "from_name"], [9, 5, 1, "", "kld"], [9, 5, 1, "", "mae"], [9, 5, 1, "", "mean_absolute_error"], [9, 5, 1, "", "mean_normalized_absolute_error"], [9, 5, 1, "", "mean_normalized_relative_absolute_error"], [9, 5, 1, "", "mean_relative_absolute_error"], [9, 5, 1, "", "mkld"], [9, 5, 1, "", "mnae"], [9, 5, 1, "", "mnkld"], [9, 5, 1, "", "mnrae"], [9, 5, 1, "", "mrae"], [9, 5, 1, "", "mse"], [9, 5, 1, "", "nae"], [9, 5, 1, "", "nkld"], [9, 5, 1, "", "normalized_absolute_error"], [9, 5, 1, "", "normalized_relative_absolute_error"], [9, 5, 1, "", "nrae"], [9, 5, 1, "", "rae"], [9, 5, 1, "", "relative_absolute_error"], [9, 5, 1, "", "se"], [9, 5, 1, "", "smooth"]], "quapy.evaluation": [[9, 5, 1, "", "evaluate"], [9, 5, 1, "", "evaluate_on_samples"], [9, 5, 1, "", "evaluation_report"], [9, 5, 1, "", "prediction"]], "quapy.functional": [[9, 5, 1, "", "HellingerDistance"], [9, 5, 1, "", "TopsoeDistance"], [9, 5, 1, "", "argmin_prevalence"], [9, 5, 1, "", "as_binary_prevalence"], [9, 5, 1, "", "check_prevalence_vector"], [9, 5, 1, "", "clip"], [9, 5, 1, "", "condsoftmax"], [9, 5, 1, "", "counts_from_labels"], [9, 5, 1, "", "get_divergence"], [9, 5, 1, "", "get_nprevpoints_approximation"], [9, 5, 1, "", "l1_norm"], [9, 5, 1, "", "linear_search"], [9, 5, 1, "", "normalize_prevalence"], [9, 5, 1, "", "num_prevalence_combinations"], [9, 5, 1, "", "optim_minimize"], [9, 5, 1, "", "prevalence_from_labels"], [9, 5, 1, "", "prevalence_from_probabilities"], [9, 5, 1, "", "prevalence_linspace"], [9, 5, 1, "", "projection_simplex_sort"], [9, 5, 1, "", "softmax"], [9, 5, 1, "", "solve_adjustment"], [9, 5, 1, "", "solve_adjustment_binary"], [9, 5, 1, "", "strprev"], [9, 5, 1, "", "ternary_search"], [9, 5, 1, "", "uniform_prevalence"], [9, 5, 1, "", "uniform_prevalence_sampling"], [9, 5, 1, "", "uniform_simplex_sampling"]], "quapy.method": [[12, 0, 0, "-", "_kdey"], [12, 0, 0, "-", "_neural"], [12, 0, 0, "-", "_threshold_optim"], [12, 0, 0, "-", "aggregative"], [12, 0, 0, "-", "base"], [12, 0, 0, "-", "meta"], [12, 0, 0, "-", "non_aggregative"]], "quapy.method._kdey": [[12, 1, 1, "", "KDEBase"], [12, 1, 1, "", "KDEyCS"], [12, 1, 1, "", "KDEyHD"], [12, 1, 1, "", "KDEyML"]], "quapy.method._kdey.KDEBase": [[12, 4, 1, "", "BANDWIDTH_METHOD"], [12, 3, 1, "", "get_kde_function"], [12, 3, 1, "", "get_mixture_components"], [12, 3, 1, "", "pdf"]], "quapy.method._kdey.KDEyCS": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "gram_matrix_mix_sum"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._kdey.KDEyHD": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._kdey.KDEyML": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._neural": [[12, 1, 1, "", "QuaNetModule"], [12, 1, 1, "", "QuaNetTrainer"], [12, 5, 1, "", "mae_loss"]], "quapy.method._neural.QuaNetModule": [[12, 2, 1, "", "device"], [12, 3, 1, "", "forward"], [12, 4, 1, "", "training"]], "quapy.method._neural.QuaNetTrainer": [[12, 2, 1, "", "classes_"], [12, 3, 1, "", "clean_checkpoint"], [12, 3, 1, "", "clean_checkpoint_dir"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_params"]], "quapy.method._threshold_optim": [[12, 1, 1, "", "MAX"], [12, 1, 1, "", "MS"], [12, 1, 1, "", "MS2"], [12, 1, 1, "", "T50"], [12, 1, 1, "", "ThresholdOptimization"], [12, 1, 1, "", "X"]], "quapy.method._threshold_optim.MAX": [[12, 3, 1, "", "condition"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.MS": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "condition"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.MS2": [[12, 3, 1, "", "discard"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.T50": [[12, 3, 1, "", "condition"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.ThresholdOptimization": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregate_with_threshold"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "condition"], [12, 3, 1, "", "discard"], [12, 3, 1, "", "set_fit_request"]], "quapy.method._threshold_optim.X": [[12, 3, 1, "", "condition"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative": [[12, 1, 1, "", "ACC"], [12, 4, 1, "", "AdjustedClassifyAndCount"], [12, 1, 1, "", "AggregativeCrispQuantifier"], [12, 1, 1, "", "AggregativeMedianEstimator"], [12, 1, 1, "", "AggregativeQuantifier"], [12, 1, 1, "", "AggregativeSoftQuantifier"], [12, 1, 1, "", "BayesianCC"], [12, 1, 1, "", "BinaryAggregativeQuantifier"], [12, 1, 1, "", "CC"], [12, 4, 1, "", "ClassifyAndCount"], [12, 1, 1, "", "DMy"], [12, 4, 1, "", "DistributionMatchingY"], [12, 1, 1, "", "DyS"], [12, 1, 1, "", "EMQ"], [12, 4, 1, "", "ExpectationMaximizationQuantifier"], [12, 1, 1, "", "HDy"], [12, 4, 1, "", "HellingerDistanceY"], [12, 1, 1, "", "OneVsAllAggregative"], [12, 1, 1, "", "PACC"], [12, 1, 1, "", "PCC"], [12, 4, 1, "", "ProbabilisticAdjustedClassifyAndCount"], [12, 4, 1, "", "ProbabilisticClassifyAndCount"], [12, 4, 1, "", "SLD"], [12, 1, 1, "", "SMM"], [12, 5, 1, "", "newELM"], [12, 5, 1, "", "newSVMAE"], [12, 5, 1, "", "newSVMKLD"], [12, 5, 1, "", "newSVMQ"], [12, 5, 1, "", "newSVMRAE"]], "quapy.method.aggregative.ACC": [[12, 4, 1, "", "METHODS"], [12, 4, 1, "", "NORMALIZATIONS"], [12, 4, 1, "", "SOLVERS"], [12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "getPteCondEstim"], [12, 3, 1, "", "newInvariantRatioEstimation"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.AggregativeCrispQuantifier": [[12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.AggregativeMedianEstimator": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_params"]], "quapy.method.aggregative.AggregativeQuantifier": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 2, 1, "", "classes_"], [12, 2, 1, "", "classifier"], [12, 3, 1, "", "classifier_fit_predict"], [12, 3, 1, "", "classify"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 2, 1, "", "val_split"], [12, 4, 1, "", "val_split_"]], "quapy.method.aggregative.AggregativeSoftQuantifier": [[12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.BayesianCC": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "get_conditional_probability_samples"], [12, 3, 1, "", "get_prevalence_samples"], [12, 3, 1, "", "sample_from_posterior"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.BinaryAggregativeQuantifier": [[12, 3, 1, "", "fit"], [12, 2, 1, "", "neg_label"], [12, 2, 1, "", "pos_label"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.CC": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.DMy": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.DyS": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.EMQ": [[12, 3, 1, "", "EM"], [12, 3, 1, "", "EMQ_BCTS"], [12, 4, 1, "", "EPSILON"], [12, 4, 1, "", "MAX_ITER"], [12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "classify"], [12, 3, 1, "", "predict_proba"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_predict_proba_request"]], "quapy.method.aggregative.HDy": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.OneVsAllAggregative": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "classify"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.PACC": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "getPteCondEstim"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.PCC": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.aggregative.SMM": [[12, 3, 1, "", "aggregate"], [12, 3, 1, "", "aggregation_fit"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.base": [[12, 1, 1, "", "BaseQuantifier"], [12, 1, 1, "", "BinaryQuantifier"], [12, 1, 1, "", "OneVsAll"], [12, 1, 1, "", "OneVsAllGeneric"], [12, 5, 1, "", "newOneVsAll"]], "quapy.method.base.BaseQuantifier": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.base.BinaryQuantifier": [[12, 3, 1, "", "set_fit_request"]], "quapy.method.base.OneVsAllGeneric": [[12, 2, 1, "", "classes_"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.meta": [[12, 5, 1, "", "EACC"], [12, 5, 1, "", "ECC"], [12, 5, 1, "", "EEMQ"], [12, 5, 1, "", "EHDy"], [12, 5, 1, "", "EPACC"], [12, 1, 1, "", "Ensemble"], [12, 1, 1, "", "MedianEstimator"], [12, 1, 1, "", "MedianEstimator2"], [12, 5, 1, "", "ensembleFactory"], [12, 5, 1, "", "get_probability_distribution"]], "quapy.method.meta.Ensemble": [[12, 4, 1, "", "VALID_POLICIES"], [12, 2, 1, "", "aggregative"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 2, 1, "", "probabilistic"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_params"]], "quapy.method.meta.MedianEstimator": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_params"]], "quapy.method.meta.MedianEstimator2": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "get_params"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "set_params"]], "quapy.method.non_aggregative": [[12, 1, 1, "", "DMx"], [12, 4, 1, "", "DistributionMatchingX"], [12, 1, 1, "", "MaximumLikelihoodPrevalenceEstimation"], [12, 1, 1, "", "ReadMe"]], "quapy.method.non_aggregative.DMx": [[12, 3, 1, "", "HDx"], [12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"]], "quapy.method.non_aggregative.ReadMe": [[12, 3, 1, "", "fit"], [12, 3, 1, "", "quantify"], [12, 3, 1, "", "set_fit_request"], [12, 3, 1, "", "std_constrained_linear_ls"]], "quapy.model_selection": [[9, 1, 1, "", "ConfigStatus"], [9, 1, 1, "", "GridSearchQ"], [9, 1, 1, "", "Status"], [9, 5, 1, "", "cross_val_predict"], [9, 5, 1, "", "expand_grid"], [9, 5, 1, "", "group_params"]], "quapy.model_selection.ConfigStatus": [[9, 3, 1, "", "failed"], [9, 3, 1, "", "success"]], "quapy.model_selection.GridSearchQ": [[9, 3, 1, "", "best_model"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_params"], [9, 3, 1, "", "quantify"], [9, 3, 1, "", "set_fit_request"], [9, 3, 1, "", "set_params"]], "quapy.model_selection.Status": [[9, 4, 1, "", "ERROR"], [9, 4, 1, "", "INVALID"], [9, 4, 1, "", "SUCCESS"], [9, 4, 1, "", "TIMEOUT"]], "quapy.plot": [[9, 5, 1, "", "binary_bias_bins"], [9, 5, 1, "", "binary_bias_global"], [9, 5, 1, "", "binary_diagonal"], [9, 5, 1, "", "brokenbar_supremacy_by_drift"], [9, 5, 1, "", "error_by_drift"]], "quapy.protocol": [[9, 1, 1, "", "APP"], [9, 1, 1, "", "AbstractProtocol"], [9, 1, 1, "", "AbstractStochasticSeededProtocol"], [9, 4, 1, "", "ArtificialPrevalenceProtocol"], [9, 1, 1, "", "DomainMixer"], [9, 1, 1, "", "IterateProtocol"], [9, 1, 1, "", "NPP"], [9, 4, 1, "", "NaturalPrevalenceProtocol"], [9, 1, 1, "", "OnLabelledCollectionProtocol"], [9, 1, 1, "", "UPP"], [9, 4, 1, "", "UniformPrevalenceProtocol"]], "quapy.protocol.APP": [[9, 3, 1, "", "prevalence_grid"], [9, 3, 1, "", "sample"], [9, 3, 1, "", "samples_parameters"], [9, 3, 1, "", "total"]], "quapy.protocol.AbstractProtocol": [[9, 3, 1, "", "total"]], "quapy.protocol.AbstractStochasticSeededProtocol": [[9, 3, 1, "", "collator"], [9, 2, 1, "", "random_state"], [9, 3, 1, "", "sample"], [9, 3, 1, "", "samples_parameters"]], "quapy.protocol.DomainMixer": [[9, 3, 1, "", "sample"], [9, 3, 1, "", "samples_parameters"], [9, 3, 1, "", "total"]], "quapy.protocol.IterateProtocol": [[9, 3, 1, "", "total"]], "quapy.protocol.NPP": [[9, 3, 1, "", "sample"], [9, 3, 1, "", "samples_parameters"], [9, 3, 1, "", "total"]], "quapy.protocol.OnLabelledCollectionProtocol": [[9, 4, 1, "", "RETURN_TYPES"], [9, 3, 1, "", "get_collator"], [9, 3, 1, "", "get_labelled_collection"], [9, 3, 1, "", "on_preclassified_instances"]], "quapy.protocol.UPP": [[9, 3, 1, "", "sample"], [9, 3, 1, "", "samples_parameters"], [9, 3, 1, "", "total"]], "quapy.util": [[9, 1, 1, "", "EarlyStop"], [9, 5, 1, "", "create_if_not_exist"], [9, 5, 1, "", "create_parent_dir"], [9, 5, 1, "", "download_file"], [9, 5, 1, "", "download_file_if_not_exists"], [9, 5, 1, "", "get_quapy_home"], [9, 5, 1, "", "load_report"], [9, 5, 1, "", "map_parallel"], [9, 5, 1, "", "parallel"], [9, 5, 1, "", "parallel_unpack"], [9, 5, 1, "", "pickled_resource"], [9, 5, 1, "", "save_text_file"], [9, 5, 1, "", "temp_seed"], [9, 5, 1, "", "timeout"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"quickstart": 0, "instal": 0, "usag": 0, "manual": [0, 1], "featur": 0, "cite": 0, "quapi": [0, 9, 10, 11, 12], "contribut": 0, "acknowledg": 0, "dataset": [2, 11], "review": 2, "twitter": 2, "sentiment": 2, "uci": 2, "machin": 2, "learn": 2, "binari": 2, "issu": 2, "multiclass": 2, "lequa": 2, "2022": 2, "ifcb": 2, "plankton": 2, "ad": 2, "custom": 2, "data": [2, 11], "process": 2, "evalu": [3, 9], "error": [3, 7, 9], "measur": 3, "protocol": [3, 8, 9], "explicit": [4, 5], "loss": [4, 5, 6], "minim": [4, 5], "quantif": [5, 6, 7], "method": [5, 10, 12], "aggreg": [5, 12], "The": 5, "classifi": 5, "count": 5, "variant": 5, "bayesiancc": 5, "new": 5, "v0": 5, "1": 5, "9": 5, "expect": 5, "maxim": 5, "emq": 5, "helling": 5, "distanc": 5, "y": 5, "hdy": 5, "threshold": 5, "optim": 5, "kernel": 5, "densiti": 5, "estim": 5, "kdei": 5, "meta": [5, 12], "model": [5, 6], "ensembl": 5, "quanet": 5, "neural": [5, 10], "network": 5, "select": 6, "target": 6, "orient": 6, "classif": [6, 10], "plot": [7, 9], "diagon": 7, "bia": 7, "drift": 7, "artifici": 8, "preval": 8, "sampl": 8, "from": 8, "unit": 8, "simplex": 8, "uniform": 8, "upp": 8, "natur": 8, "other": 8, "packag": [9, 10, 11, 12], "subpackag": 9, "submodul": [9, 10, 11, 12], "modul": [9, 10, 11, 12], "function": 9, "model_select": 9, "util": 9, "content": [9, 10, 11, 12], "calibr": 10, "svmperf": 10, "base": [11, 12], "preprocess": 11, "reader": 11, "non_aggreg": 12, "compos": 12}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Quickstart": [[0, "quickstart"]], "Installation": [[0, "installation"]], "Usage": [[0, "usage"]], "Manuals": [[0, "manuals"], [1, "manuals"]], "Features": [[0, "features"]], "Citing QuaPy": [[0, "citing-quapy"]], "Contributing": [[0, "contributing"]], "Acknowledgments": [[0, "acknowledgments"]], "Datasets": [[2, "datasets"]], "Reviews Datasets": [[2, "reviews-datasets"]], "Twitter Sentiment Datasets": [[2, "twitter-sentiment-datasets"]], "UCI Machine Learning": [[2, "uci-machine-learning"]], "Binary datasets": [[2, "binary-datasets"]], "Issues:": [[2, "issues"]], "Multiclass datasets": [[2, "multiclass-datasets"]], "LeQua 2022 Datasets": [[2, "lequa-2022-datasets"]], "IFCB Plankton dataset": [[2, "ifcb-plankton-dataset"]], "Adding Custom Datasets": [[2, "adding-custom-datasets"]], "Data Processing": [[2, "data-processing"]], "Evaluation": [[3, "evaluation"]], "Error Measures": [[3, "error-measures"]], "Evaluation Protocols": [[3, "evaluation-protocols"]], "Explicit Loss Minimization": [[4, "explicit-loss-minimization"], [5, "explicit-loss-minimization"]], "Quantification Methods": [[5, "quantification-methods"]], "Aggregative Methods": [[5, "aggregative-methods"]], "The Classify & Count variants": [[5, "the-classify-count-variants"]], "BayesianCC (New in v0.1.9!)": [[5, "bayesiancc-new-in-v0-1-9"]], "Expectation Maximization (EMQ)": [[5, "expectation-maximization-emq"]], "Hellinger Distance y (HDy)": [[5, "hellinger-distance-y-hdy"]], "Threshold Optimization methods": [[5, "threshold-optimization-methods"]], "Kernel Density Estimation methods (KDEy)": [[5, "kernel-density-estimation-methods-kdey"]], "Meta Models": [[5, "meta-models"]], "Ensembles": [[5, "ensembles"]], "The QuaNet neural network": [[5, "the-quanet-neural-network"]], "Model Selection": [[6, "model-selection"]], "Targeting a Quantification-oriented loss": [[6, "targeting-a-quantification-oriented-loss"]], "Targeting a Classification-oriented loss": [[6, "targeting-a-classification-oriented-loss"]], "Plotting": [[7, "plotting"]], "Diagonal Plot": [[7, "diagonal-plot"]], "Quantification bias": [[7, "quantification-bias"]], "Error by Drift": [[7, "error-by-drift"]], "Protocols": [[8, "protocols"]], "Artificial-Prevalence Protocol": [[8, "artificial-prevalence-protocol"]], "Sampling from the unit-simplex, the Uniform-Prevalence Protocol (UPP)": [[8, "sampling-from-the-unit-simplex-the-uniform-prevalence-protocol-upp"]], "Natural-Prevalence Protocol": [[8, "natural-prevalence-protocol"]], "Other protocols": [[8, "other-protocols"]], "quapy package": [[9, "quapy-package"]], "Subpackages": [[9, "subpackages"]], "Submodules": [[9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"]], "quapy.error module": [[9, "module-quapy.error"]], "quapy.evaluation module": [[9, "module-quapy.evaluation"]], "quapy.functional module": [[9, "module-quapy.functional"]], "quapy.model_selection module": [[9, "module-quapy.model_selection"]], "quapy.plot module": [[9, "module-quapy.plot"]], "quapy.protocol module": [[9, "module-quapy.protocol"]], "quapy.util module": [[9, "module-quapy.util"]], "Module contents": [[9, "module-quapy"], [10, "module-quapy.classification"], [11, "module-quapy.data"], [12, "module-quapy.method"]], "quapy.classification package": [[10, "quapy-classification-package"]], "quapy.classification.calibration module": [[10, "module-quapy.classification.calibration"]], "quapy.classification.methods module": [[10, "module-quapy.classification.methods"]], "quapy.classification.neural module": [[10, "module-quapy.classification.neural"]], "quapy.classification.svmperf module": [[10, "module-quapy.classification.svmperf"]], "quapy.data package": [[11, "quapy-data-package"]], "quapy.data.base module": [[11, "module-quapy.data.base"]], "quapy.data.datasets module": [[11, "module-quapy.data.datasets"]], "quapy.data.preprocessing module": [[11, "module-quapy.data.preprocessing"]], "quapy.data.reader module": [[11, "module-quapy.data.reader"]], "quapy.method package": [[12, "quapy-method-package"]], "quapy.method.aggregative module": [[12, "module-quapy.method.aggregative"]], "quapy.method.base module": [[12, "module-quapy.method.base"]], "quapy.method.meta module": [[12, "module-quapy.method.meta"]], "quapy.method.non_aggregative module": [[12, "module-quapy.method.non_aggregative"]], "quapy.method.composable module": [[12, "quapy-method-composable-module"]]}, "indexentries": {"app (class in quapy.protocol)": [[9, "quapy.protocol.APP"]], "abstractprotocol (class in quapy.protocol)": [[9, "quapy.protocol.AbstractProtocol"]], "abstractstochasticseededprotocol (class in quapy.protocol)": [[9, "quapy.protocol.AbstractStochasticSeededProtocol"]], "artificialprevalenceprotocol (in module quapy.protocol)": [[9, "quapy.protocol.ArtificialPrevalenceProtocol"]], "configstatus (class in quapy.model_selection)": [[9, "quapy.model_selection.ConfigStatus"]], "domainmixer (class in quapy.protocol)": [[9, "quapy.protocol.DomainMixer"]], "error (quapy.model_selection.status attribute)": [[9, "quapy.model_selection.Status.ERROR"]], "earlystop (class in quapy.util)": [[9, "quapy.util.EarlyStop"]], "gridsearchq (class in quapy.model_selection)": [[9, "quapy.model_selection.GridSearchQ"]], "hellingerdistance() (in module quapy.functional)": [[9, "quapy.functional.HellingerDistance"]], "invalid (quapy.model_selection.status attribute)": [[9, "quapy.model_selection.Status.INVALID"]], "iterateprotocol (class in quapy.protocol)": [[9, "quapy.protocol.IterateProtocol"]], "npp (class in quapy.protocol)": [[9, "quapy.protocol.NPP"]], "naturalprevalenceprotocol (in module quapy.protocol)": [[9, "quapy.protocol.NaturalPrevalenceProtocol"]], "onlabelledcollectionprotocol (class in quapy.protocol)": [[9, "quapy.protocol.OnLabelledCollectionProtocol"]], "return_types (quapy.protocol.onlabelledcollectionprotocol attribute)": [[9, "quapy.protocol.OnLabelledCollectionProtocol.RETURN_TYPES"]], "success (quapy.model_selection.status attribute)": [[9, "quapy.model_selection.Status.SUCCESS"]], "status (class in quapy.model_selection)": [[9, "quapy.model_selection.Status"]], "timeout (quapy.model_selection.status attribute)": [[9, "quapy.model_selection.Status.TIMEOUT"]], "topsoedistance() (in module quapy.functional)": [[9, "quapy.functional.TopsoeDistance"]], "upp (class in quapy.protocol)": [[9, "quapy.protocol.UPP"]], "uniformprevalenceprotocol (in module quapy.protocol)": [[9, "quapy.protocol.UniformPrevalenceProtocol"]], "absolute_error() (in module quapy.error)": [[9, "quapy.error.absolute_error"]], "acc_error() (in module quapy.error)": [[9, "quapy.error.acc_error"]], "acce() (in module quapy.error)": [[9, "quapy.error.acce"]], "ae() (in module quapy.error)": [[9, "quapy.error.ae"]], "argmin_prevalence() (in module quapy.functional)": [[9, "quapy.functional.argmin_prevalence"]], "as_binary_prevalence() (in module quapy.functional)": [[9, "quapy.functional.as_binary_prevalence"]], "best_model() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.best_model"]], "binary_bias_bins() (in module quapy.plot)": [[9, "quapy.plot.binary_bias_bins"]], "binary_bias_global() (in module quapy.plot)": [[9, "quapy.plot.binary_bias_global"]], "binary_diagonal() (in module quapy.plot)": [[9, "quapy.plot.binary_diagonal"]], "brokenbar_supremacy_by_drift() (in module quapy.plot)": [[9, "quapy.plot.brokenbar_supremacy_by_drift"]], "check_prevalence_vector() (in module quapy.functional)": [[9, "quapy.functional.check_prevalence_vector"]], "clip() (in module quapy.functional)": [[9, "quapy.functional.clip"]], "collator() (quapy.protocol.abstractstochasticseededprotocol method)": [[9, "quapy.protocol.AbstractStochasticSeededProtocol.collator"]], "condsoftmax() (in module quapy.functional)": [[9, "quapy.functional.condsoftmax"]], "counts_from_labels() (in module quapy.functional)": [[9, "quapy.functional.counts_from_labels"]], "create_if_not_exist() (in module quapy.util)": [[9, "quapy.util.create_if_not_exist"]], "create_parent_dir() (in module quapy.util)": [[9, "quapy.util.create_parent_dir"]], "cross_val_predict() (in module quapy.model_selection)": [[9, "quapy.model_selection.cross_val_predict"]], "download_file() (in module quapy.util)": [[9, "quapy.util.download_file"]], "download_file_if_not_exists() (in module quapy.util)": [[9, "quapy.util.download_file_if_not_exists"]], "error_by_drift() (in module quapy.plot)": [[9, "quapy.plot.error_by_drift"]], "evaluate() (in module quapy.evaluation)": [[9, "quapy.evaluation.evaluate"]], "evaluate_on_samples() (in module quapy.evaluation)": [[9, "quapy.evaluation.evaluate_on_samples"]], "evaluation_report() (in module quapy.evaluation)": [[9, "quapy.evaluation.evaluation_report"]], "expand_grid() (in module quapy.model_selection)": [[9, "quapy.model_selection.expand_grid"]], "f1_error() (in module quapy.error)": [[9, "quapy.error.f1_error"]], "f1e() (in module quapy.error)": [[9, "quapy.error.f1e"]], "failed() (quapy.model_selection.configstatus method)": [[9, "quapy.model_selection.ConfigStatus.failed"]], "fit() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.fit"]], "from_name() (in module quapy.error)": [[9, "quapy.error.from_name"]], "get_collator() (quapy.protocol.onlabelledcollectionprotocol class method)": [[9, "quapy.protocol.OnLabelledCollectionProtocol.get_collator"]], "get_divergence() (in module quapy.functional)": [[9, "quapy.functional.get_divergence"]], "get_labelled_collection() (quapy.protocol.onlabelledcollectionprotocol method)": [[9, "quapy.protocol.OnLabelledCollectionProtocol.get_labelled_collection"]], "get_nprevpoints_approximation() (in module quapy.functional)": [[9, "quapy.functional.get_nprevpoints_approximation"]], "get_params() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.get_params"]], "get_quapy_home() (in module quapy.util)": [[9, "quapy.util.get_quapy_home"]], "group_params() (in module quapy.model_selection)": [[9, "quapy.model_selection.group_params"]], "kld() (in module quapy.error)": [[9, "quapy.error.kld"]], "l1_norm() (in module quapy.functional)": [[9, "quapy.functional.l1_norm"]], "linear_search() (in module quapy.functional)": [[9, "quapy.functional.linear_search"]], "load_report() (in module quapy.util)": [[9, "quapy.util.load_report"]], "mae() (in module quapy.error)": [[9, "quapy.error.mae"]], "map_parallel() (in module quapy.util)": [[9, "quapy.util.map_parallel"]], "mean_absolute_error() (in module quapy.error)": [[9, "quapy.error.mean_absolute_error"]], "mean_normalized_absolute_error() (in module quapy.error)": [[9, "quapy.error.mean_normalized_absolute_error"]], "mean_normalized_relative_absolute_error() (in module quapy.error)": [[9, "quapy.error.mean_normalized_relative_absolute_error"]], "mean_relative_absolute_error() (in module quapy.error)": [[9, "quapy.error.mean_relative_absolute_error"]], "mkld() (in module quapy.error)": [[9, "quapy.error.mkld"]], "mnae() (in module quapy.error)": [[9, "quapy.error.mnae"]], "mnkld() (in module quapy.error)": [[9, "quapy.error.mnkld"]], "mnrae() (in module quapy.error)": [[9, "quapy.error.mnrae"]], "module": [[9, "module-quapy"], [9, "module-quapy.error"], [9, "module-quapy.evaluation"], [9, "module-quapy.functional"], [9, "module-quapy.model_selection"], [9, "module-quapy.plot"], [9, "module-quapy.protocol"], [9, "module-quapy.util"], [10, "module-quapy.classification"], [10, "module-quapy.classification.calibration"], [10, "module-quapy.classification.methods"], [10, "module-quapy.classification.neural"], [10, "module-quapy.classification.svmperf"], [11, "module-quapy.data"], [11, "module-quapy.data.base"], [11, "module-quapy.data.datasets"], [11, "module-quapy.data.preprocessing"], [11, "module-quapy.data.reader"], [12, "module-quapy.method"], [12, "module-quapy.method._kdey"], [12, "module-quapy.method._neural"], [12, "module-quapy.method._threshold_optim"], [12, "module-quapy.method.aggregative"], [12, "module-quapy.method.base"], [12, "module-quapy.method.meta"], [12, "module-quapy.method.non_aggregative"]], "mrae() (in module quapy.error)": [[9, "quapy.error.mrae"]], "mse() (in module quapy.error)": [[9, "quapy.error.mse"]], "nae() (in module quapy.error)": [[9, "quapy.error.nae"]], "nkld() (in module quapy.error)": [[9, "quapy.error.nkld"]], "normalize_prevalence() (in module quapy.functional)": [[9, "quapy.functional.normalize_prevalence"]], "normalized_absolute_error() (in module quapy.error)": [[9, "quapy.error.normalized_absolute_error"]], "normalized_relative_absolute_error() (in module quapy.error)": [[9, "quapy.error.normalized_relative_absolute_error"]], "nrae() (in module quapy.error)": [[9, "quapy.error.nrae"]], "num_prevalence_combinations() (in module quapy.functional)": [[9, "quapy.functional.num_prevalence_combinations"]], "on_preclassified_instances() (quapy.protocol.onlabelledcollectionprotocol method)": [[9, "quapy.protocol.OnLabelledCollectionProtocol.on_preclassified_instances"]], "optim_minimize() (in module quapy.functional)": [[9, "quapy.functional.optim_minimize"]], "parallel() (in module quapy.util)": [[9, "quapy.util.parallel"]], "parallel_unpack() (in module quapy.util)": [[9, "quapy.util.parallel_unpack"]], "pickled_resource() (in module quapy.util)": [[9, "quapy.util.pickled_resource"]], "prediction() (in module quapy.evaluation)": [[9, "quapy.evaluation.prediction"]], "prevalence_from_labels() (in module quapy.functional)": [[9, "quapy.functional.prevalence_from_labels"]], "prevalence_from_probabilities() (in module quapy.functional)": [[9, "quapy.functional.prevalence_from_probabilities"]], "prevalence_grid() (quapy.protocol.app method)": [[9, "quapy.protocol.APP.prevalence_grid"]], "prevalence_linspace() (in module quapy.functional)": [[9, "quapy.functional.prevalence_linspace"]], "projection_simplex_sort() (in module quapy.functional)": [[9, "quapy.functional.projection_simplex_sort"]], "quantify() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.quantify"]], "quapy": [[9, "module-quapy"]], "quapy.error": [[9, "module-quapy.error"]], "quapy.evaluation": [[9, "module-quapy.evaluation"]], "quapy.functional": [[9, "module-quapy.functional"]], "quapy.model_selection": [[9, "module-quapy.model_selection"]], "quapy.plot": [[9, "module-quapy.plot"]], "quapy.protocol": [[9, "module-quapy.protocol"]], "quapy.util": [[9, "module-quapy.util"]], "rae() (in module quapy.error)": [[9, "quapy.error.rae"]], "random_state (quapy.protocol.abstractstochasticseededprotocol property)": [[9, "quapy.protocol.AbstractStochasticSeededProtocol.random_state"]], "relative_absolute_error() (in module quapy.error)": [[9, "quapy.error.relative_absolute_error"]], "sample() (quapy.protocol.app method)": [[9, "quapy.protocol.APP.sample"]], "sample() (quapy.protocol.abstractstochasticseededprotocol method)": [[9, "quapy.protocol.AbstractStochasticSeededProtocol.sample"]], "sample() (quapy.protocol.domainmixer method)": [[9, "quapy.protocol.DomainMixer.sample"]], "sample() (quapy.protocol.npp method)": [[9, "quapy.protocol.NPP.sample"]], "sample() (quapy.protocol.upp method)": [[9, "quapy.protocol.UPP.sample"]], "samples_parameters() (quapy.protocol.app method)": [[9, "quapy.protocol.APP.samples_parameters"]], "samples_parameters() (quapy.protocol.abstractstochasticseededprotocol method)": [[9, "quapy.protocol.AbstractStochasticSeededProtocol.samples_parameters"]], "samples_parameters() (quapy.protocol.domainmixer method)": [[9, "quapy.protocol.DomainMixer.samples_parameters"]], "samples_parameters() (quapy.protocol.npp method)": [[9, "quapy.protocol.NPP.samples_parameters"]], "samples_parameters() (quapy.protocol.upp method)": [[9, "quapy.protocol.UPP.samples_parameters"]], "save_text_file() (in module quapy.util)": [[9, "quapy.util.save_text_file"]], "se() (in module quapy.error)": [[9, "quapy.error.se"]], "set_fit_request() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.set_fit_request"]], "set_params() (quapy.model_selection.gridsearchq method)": [[9, "quapy.model_selection.GridSearchQ.set_params"]], "smooth() (in module quapy.error)": [[9, "quapy.error.smooth"]], "softmax() (in module quapy.functional)": [[9, "quapy.functional.softmax"]], "solve_adjustment() (in module quapy.functional)": [[9, "quapy.functional.solve_adjustment"]], "solve_adjustment_binary() (in module quapy.functional)": [[9, "quapy.functional.solve_adjustment_binary"]], "strprev() (in module quapy.functional)": [[9, "quapy.functional.strprev"]], "success() (quapy.model_selection.configstatus method)": [[9, "quapy.model_selection.ConfigStatus.success"]], "temp_seed() (in module quapy.util)": [[9, "quapy.util.temp_seed"]], "ternary_search() (in module quapy.functional)": [[9, "quapy.functional.ternary_search"]], "timeout() (in module quapy.util)": [[9, "quapy.util.timeout"]], "total() (quapy.protocol.app method)": [[9, "quapy.protocol.APP.total"]], "total() (quapy.protocol.abstractprotocol method)": [[9, "quapy.protocol.AbstractProtocol.total"]], "total() (quapy.protocol.domainmixer method)": [[9, "quapy.protocol.DomainMixer.total"]], "total() (quapy.protocol.iterateprotocol method)": [[9, "quapy.protocol.IterateProtocol.total"]], "total() (quapy.protocol.npp method)": [[9, "quapy.protocol.NPP.total"]], "total() (quapy.protocol.upp method)": [[9, "quapy.protocol.UPP.total"]], "uniform_prevalence() (in module quapy.functional)": [[9, "quapy.functional.uniform_prevalence"]], "uniform_prevalence_sampling() (in module quapy.functional)": [[9, "quapy.functional.uniform_prevalence_sampling"]], "uniform_simplex_sampling() (in module quapy.functional)": [[9, "quapy.functional.uniform_simplex_sampling"]], "bctscalibration (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.BCTSCalibration"]], "cnnnet (class in quapy.classification.neural)": [[10, "quapy.classification.neural.CNNnet"]], "lstmnet (class in quapy.classification.neural)": [[10, "quapy.classification.neural.LSTMnet"]], "lowranklogisticregression (class in quapy.classification.methods)": [[10, "quapy.classification.methods.LowRankLogisticRegression"]], "nbvscalibration (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.NBVSCalibration"]], "neuralclassifiertrainer (class in quapy.classification.neural)": [[10, "quapy.classification.neural.NeuralClassifierTrainer"]], "recalibratedprobabilisticclassifier (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifier"]], "recalibratedprobabilisticclassifierbase (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase"]], "svmperf (class in quapy.classification.svmperf)": [[10, "quapy.classification.svmperf.SVMperf"]], "tscalibration (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.TSCalibration"]], "textclassifiernet (class in quapy.classification.neural)": [[10, "quapy.classification.neural.TextClassifierNet"]], "torchdataset (class in quapy.classification.neural)": [[10, "quapy.classification.neural.TorchDataset"]], "vscalibration (class in quapy.classification.calibration)": [[10, "quapy.classification.calibration.VSCalibration"]], "asdataloader() (quapy.classification.neural.torchdataset method)": [[10, "quapy.classification.neural.TorchDataset.asDataloader"]], "classes_ (quapy.classification.calibration.recalibratedprobabilisticclassifierbase property)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.classes_"]], "decision_function() (quapy.classification.svmperf.svmperf method)": [[10, "quapy.classification.svmperf.SVMperf.decision_function"]], "device (quapy.classification.neural.neuralclassifiertrainer property)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.device"]], "dimensions() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.dimensions"]], "document_embedding() (quapy.classification.neural.cnnnet method)": [[10, "quapy.classification.neural.CNNnet.document_embedding"]], "document_embedding() (quapy.classification.neural.lstmnet method)": [[10, "quapy.classification.neural.LSTMnet.document_embedding"]], "document_embedding() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.document_embedding"]], "fit() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit"]], "fit() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.fit"]], "fit() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.fit"]], "fit() (quapy.classification.svmperf.svmperf method)": [[10, "quapy.classification.svmperf.SVMperf.fit"]], "fit_cv() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit_cv"]], "fit_tr_val() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.fit_tr_val"]], "forward() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.forward"]], "get_params() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.get_params"]], "get_params() (quapy.classification.neural.cnnnet method)": [[10, "quapy.classification.neural.CNNnet.get_params"]], "get_params() (quapy.classification.neural.lstmnet method)": [[10, "quapy.classification.neural.LSTMnet.get_params"]], "get_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.get_params"]], "get_params() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.get_params"]], "predict() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.predict"]], "predict() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.predict"]], "predict() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.predict"]], "predict() (quapy.classification.svmperf.svmperf method)": [[10, "quapy.classification.svmperf.SVMperf.predict"]], "predict_proba() (quapy.classification.calibration.recalibratedprobabilisticclassifierbase method)": [[10, "quapy.classification.calibration.RecalibratedProbabilisticClassifierBase.predict_proba"]], "predict_proba() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.predict_proba"]], "predict_proba() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.predict_proba"]], "predict_proba() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.predict_proba"]], "quapy.classification": [[10, "module-quapy.classification"]], "quapy.classification.calibration": [[10, "module-quapy.classification.calibration"]], "quapy.classification.methods": [[10, "module-quapy.classification.methods"]], "quapy.classification.neural": [[10, "module-quapy.classification.neural"]], "quapy.classification.svmperf": [[10, "module-quapy.classification.svmperf"]], "reset_net_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.reset_net_params"]], "set_params() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.set_params"]], "set_params() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.set_params"]], "set_score_request() (quapy.classification.svmperf.svmperf method)": [[10, "quapy.classification.svmperf.SVMperf.set_score_request"]], "training (quapy.classification.neural.cnnnet attribute)": [[10, "quapy.classification.neural.CNNnet.training"]], "training (quapy.classification.neural.lstmnet attribute)": [[10, "quapy.classification.neural.LSTMnet.training"]], "training (quapy.classification.neural.textclassifiernet attribute)": [[10, "quapy.classification.neural.TextClassifierNet.training"]], "transform() (quapy.classification.methods.lowranklogisticregression method)": [[10, "quapy.classification.methods.LowRankLogisticRegression.transform"]], "transform() (quapy.classification.neural.neuralclassifiertrainer method)": [[10, "quapy.classification.neural.NeuralClassifierTrainer.transform"]], "valid_losses (quapy.classification.svmperf.svmperf attribute)": [[10, "quapy.classification.svmperf.SVMperf.valid_losses"]], "vocabulary_size (quapy.classification.neural.cnnnet property)": [[10, "quapy.classification.neural.CNNnet.vocabulary_size"]], "vocabulary_size (quapy.classification.neural.lstmnet property)": [[10, "quapy.classification.neural.LSTMnet.vocabulary_size"]], "vocabulary_size (quapy.classification.neural.textclassifiernet property)": [[10, "quapy.classification.neural.TextClassifierNet.vocabulary_size"]], "xavier_uniform() (quapy.classification.neural.textclassifiernet method)": [[10, "quapy.classification.neural.TextClassifierNet.xavier_uniform"]], "dataset (class in quapy.data.base)": [[11, "quapy.data.base.Dataset"]], "indextransformer (class in quapy.data.preprocessing)": [[11, "quapy.data.preprocessing.IndexTransformer"]], "labelledcollection (class in quapy.data.base)": [[11, "quapy.data.base.LabelledCollection"]], "splitstratified() (quapy.data.base.dataset class method)": [[11, "quapy.data.base.Dataset.SplitStratified"]], "x (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.X"]], "xp (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.Xp"]], "xy (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.Xy"]], "add_word() (quapy.data.preprocessing.indextransformer method)": [[11, "quapy.data.preprocessing.IndexTransformer.add_word"]], "binarize() (in module quapy.data.reader)": [[11, "quapy.data.reader.binarize"]], "binary (quapy.data.base.dataset property)": [[11, "quapy.data.base.Dataset.binary"]], "binary (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.binary"]], "classes_ (quapy.data.base.dataset property)": [[11, "quapy.data.base.Dataset.classes_"]], "counts() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.counts"]], "fetch_ifcb() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_IFCB"]], "fetch_ucibinarydataset() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_UCIBinaryDataset"]], "fetch_ucibinarylabelledcollection() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_UCIBinaryLabelledCollection"]], "fetch_ucimulticlassdataset() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_UCIMulticlassDataset"]], "fetch_ucimulticlasslabelledcollection() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_UCIMulticlassLabelledCollection"]], "fetch_lequa2022() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_lequa2022"]], "fetch_reviews() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_reviews"]], "fetch_twitter() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.fetch_twitter"]], "fit() (quapy.data.preprocessing.indextransformer method)": [[11, "quapy.data.preprocessing.IndexTransformer.fit"]], "fit_transform() (quapy.data.preprocessing.indextransformer method)": [[11, "quapy.data.preprocessing.IndexTransformer.fit_transform"]], "from_csv() (in module quapy.data.reader)": [[11, "quapy.data.reader.from_csv"]], "from_sparse() (in module quapy.data.reader)": [[11, "quapy.data.reader.from_sparse"]], "from_text() (in module quapy.data.reader)": [[11, "quapy.data.reader.from_text"]], "index() (in module quapy.data.preprocessing)": [[11, "quapy.data.preprocessing.index"]], "join() (quapy.data.base.labelledcollection class method)": [[11, "quapy.data.base.LabelledCollection.join"]], "kfcv() (quapy.data.base.dataset class method)": [[11, "quapy.data.base.Dataset.kFCV"]], "kfcv() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.kFCV"]], "load() (quapy.data.base.dataset class method)": [[11, "quapy.data.base.Dataset.load"]], "load() (quapy.data.base.labelledcollection class method)": [[11, "quapy.data.base.LabelledCollection.load"]], "n_classes (quapy.data.base.dataset property)": [[11, "quapy.data.base.Dataset.n_classes"]], "n_classes (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.n_classes"]], "p (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.p"]], "prevalence() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.prevalence"]], "quapy.data": [[11, "module-quapy.data"]], "quapy.data.base": [[11, "module-quapy.data.base"]], "quapy.data.datasets": [[11, "module-quapy.data.datasets"]], "quapy.data.preprocessing": [[11, "module-quapy.data.preprocessing"]], "quapy.data.reader": [[11, "module-quapy.data.reader"]], "reduce() (quapy.data.base.dataset method)": [[11, "quapy.data.base.Dataset.reduce"]], "reduce_columns() (in module quapy.data.preprocessing)": [[11, "quapy.data.preprocessing.reduce_columns"]], "reindex_labels() (in module quapy.data.reader)": [[11, "quapy.data.reader.reindex_labels"]], "sampling() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.sampling"]], "sampling_from_index() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.sampling_from_index"]], "sampling_index() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.sampling_index"]], "split_random() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.split_random"]], "split_stratified() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.split_stratified"]], "standardize() (in module quapy.data.preprocessing)": [[11, "quapy.data.preprocessing.standardize"]], "stats() (quapy.data.base.dataset method)": [[11, "quapy.data.base.Dataset.stats"]], "stats() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.stats"]], "text2tfidf() (in module quapy.data.preprocessing)": [[11, "quapy.data.preprocessing.text2tfidf"]], "train_test (quapy.data.base.dataset property)": [[11, "quapy.data.base.Dataset.train_test"]], "transform() (quapy.data.preprocessing.indextransformer method)": [[11, "quapy.data.preprocessing.IndexTransformer.transform"]], "uniform_sampling() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.uniform_sampling"]], "uniform_sampling_index() (quapy.data.base.labelledcollection method)": [[11, "quapy.data.base.LabelledCollection.uniform_sampling_index"]], "vocabulary_size (quapy.data.base.dataset property)": [[11, "quapy.data.base.Dataset.vocabulary_size"]], "vocabulary_size() (quapy.data.preprocessing.indextransformer method)": [[11, "quapy.data.preprocessing.IndexTransformer.vocabulary_size"]], "warn() (in module quapy.data.datasets)": [[11, "quapy.data.datasets.warn"]], "y (quapy.data.base.labelledcollection property)": [[11, "quapy.data.base.LabelledCollection.y"]], "acc (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.ACC"]], "adjustedclassifyandcount (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.AdjustedClassifyAndCount"]], "aggregativecrispquantifier (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.AggregativeCrispQuantifier"]], "aggregativemedianestimator (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator"]], "aggregativequantifier (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.AggregativeQuantifier"]], "aggregativesoftquantifier (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.AggregativeSoftQuantifier"]], "bandwidth_method (quapy.method._kdey.kdebase attribute)": [[12, "quapy.method._kdey.KDEBase.BANDWIDTH_METHOD"]], "basequantifier (class in quapy.method.base)": [[12, "quapy.method.base.BaseQuantifier"]], "bayesiancc (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.BayesianCC"]], "binaryaggregativequantifier (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.BinaryAggregativeQuantifier"]], "binaryquantifier (class in quapy.method.base)": [[12, "quapy.method.base.BinaryQuantifier"]], "cc (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.CC"]], "classifyandcount (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.ClassifyAndCount"]], "dmx (class in quapy.method.non_aggregative)": [[12, "quapy.method.non_aggregative.DMx"]], "dmy (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.DMy"]], "distributionmatchingx (in module quapy.method.non_aggregative)": [[12, "quapy.method.non_aggregative.DistributionMatchingX"]], "distributionmatchingy (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.DistributionMatchingY"]], "dys (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.DyS"]], "eacc() (in module quapy.method.meta)": [[12, "quapy.method.meta.EACC"]], "ecc() (in module quapy.method.meta)": [[12, "quapy.method.meta.ECC"]], "eemq() (in module quapy.method.meta)": [[12, "quapy.method.meta.EEMQ"]], "ehdy() (in module quapy.method.meta)": [[12, "quapy.method.meta.EHDy"]], "em() (quapy.method.aggregative.emq class method)": [[12, "quapy.method.aggregative.EMQ.EM"]], "emq (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.EMQ"]], "emq_bcts() (quapy.method.aggregative.emq class method)": [[12, "quapy.method.aggregative.EMQ.EMQ_BCTS"]], "epacc() (in module quapy.method.meta)": [[12, "quapy.method.meta.EPACC"]], "epsilon (quapy.method.aggregative.emq attribute)": [[12, "quapy.method.aggregative.EMQ.EPSILON"]], "ensemble (class in quapy.method.meta)": [[12, "quapy.method.meta.Ensemble"]], "expectationmaximizationquantifier (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.ExpectationMaximizationQuantifier"]], "hdx() (quapy.method.non_aggregative.dmx class method)": [[12, "quapy.method.non_aggregative.DMx.HDx"]], "hdy (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.HDy"]], "hellingerdistancey (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.HellingerDistanceY"]], "kdebase (class in quapy.method._kdey)": [[12, "quapy.method._kdey.KDEBase"]], "kdeycs (class in quapy.method._kdey)": [[12, "quapy.method._kdey.KDEyCS"]], "kdeyhd (class in quapy.method._kdey)": [[12, "quapy.method._kdey.KDEyHD"]], "kdeyml (class in quapy.method._kdey)": [[12, "quapy.method._kdey.KDEyML"]], "max (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.MAX"]], "max_iter (quapy.method.aggregative.emq attribute)": [[12, "quapy.method.aggregative.EMQ.MAX_ITER"]], "methods (quapy.method.aggregative.acc attribute)": [[12, "quapy.method.aggregative.ACC.METHODS"]], "ms (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.MS"]], "ms2 (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.MS2"]], "maximumlikelihoodprevalenceestimation (class in quapy.method.non_aggregative)": [[12, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation"]], "medianestimator (class in quapy.method.meta)": [[12, "quapy.method.meta.MedianEstimator"]], "medianestimator2 (class in quapy.method.meta)": [[12, "quapy.method.meta.MedianEstimator2"]], "normalizations (quapy.method.aggregative.acc attribute)": [[12, "quapy.method.aggregative.ACC.NORMALIZATIONS"]], "onevsall (class in quapy.method.base)": [[12, "quapy.method.base.OneVsAll"]], "onevsallaggregative (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.OneVsAllAggregative"]], "onevsallgeneric (class in quapy.method.base)": [[12, "quapy.method.base.OneVsAllGeneric"]], "pacc (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.PACC"]], "pcc (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.PCC"]], "probabilisticadjustedclassifyandcount (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.ProbabilisticAdjustedClassifyAndCount"]], "probabilisticclassifyandcount (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.ProbabilisticClassifyAndCount"]], "quanetmodule (class in quapy.method._neural)": [[12, "quapy.method._neural.QuaNetModule"]], "quanettrainer (class in quapy.method._neural)": [[12, "quapy.method._neural.QuaNetTrainer"]], "readme (class in quapy.method.non_aggregative)": [[12, "quapy.method.non_aggregative.ReadMe"]], "sld (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.SLD"]], "smm (class in quapy.method.aggregative)": [[12, "quapy.method.aggregative.SMM"]], "solvers (quapy.method.aggregative.acc attribute)": [[12, "quapy.method.aggregative.ACC.SOLVERS"]], "t50 (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.T50"]], "thresholdoptimization (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.ThresholdOptimization"]], "valid_policies (quapy.method.meta.ensemble attribute)": [[12, "quapy.method.meta.Ensemble.VALID_POLICIES"]], "x (class in quapy.method._threshold_optim)": [[12, "quapy.method._threshold_optim.X"]], "aggregate() (quapy.method._kdey.kdeycs method)": [[12, "quapy.method._kdey.KDEyCS.aggregate"]], "aggregate() (quapy.method._kdey.kdeyhd method)": [[12, "quapy.method._kdey.KDEyHD.aggregate"]], "aggregate() (quapy.method._kdey.kdeyml method)": [[12, "quapy.method._kdey.KDEyML.aggregate"]], "aggregate() (quapy.method._threshold_optim.ms method)": [[12, "quapy.method._threshold_optim.MS.aggregate"]], "aggregate() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.aggregate"]], "aggregate() (quapy.method.aggregative.acc method)": [[12, "quapy.method.aggregative.ACC.aggregate"]], "aggregate() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.aggregate"]], "aggregate() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.aggregate"]], "aggregate() (quapy.method.aggregative.cc method)": [[12, "quapy.method.aggregative.CC.aggregate"]], "aggregate() (quapy.method.aggregative.dmy method)": [[12, "quapy.method.aggregative.DMy.aggregate"]], "aggregate() (quapy.method.aggregative.dys method)": [[12, "quapy.method.aggregative.DyS.aggregate"]], "aggregate() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.aggregate"]], "aggregate() (quapy.method.aggregative.hdy method)": [[12, "quapy.method.aggregative.HDy.aggregate"]], "aggregate() (quapy.method.aggregative.onevsallaggregative method)": [[12, "quapy.method.aggregative.OneVsAllAggregative.aggregate"]], "aggregate() (quapy.method.aggregative.pacc method)": [[12, "quapy.method.aggregative.PACC.aggregate"]], "aggregate() (quapy.method.aggregative.pcc method)": [[12, "quapy.method.aggregative.PCC.aggregate"]], "aggregate() (quapy.method.aggregative.smm method)": [[12, "quapy.method.aggregative.SMM.aggregate"]], "aggregate_with_threshold() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.aggregate_with_threshold"]], "aggregation_fit() (quapy.method._kdey.kdeycs method)": [[12, "quapy.method._kdey.KDEyCS.aggregation_fit"]], "aggregation_fit() (quapy.method._kdey.kdeyhd method)": [[12, "quapy.method._kdey.KDEyHD.aggregation_fit"]], "aggregation_fit() (quapy.method._kdey.kdeyml method)": [[12, "quapy.method._kdey.KDEyML.aggregation_fit"]], "aggregation_fit() (quapy.method._threshold_optim.ms method)": [[12, "quapy.method._threshold_optim.MS.aggregation_fit"]], "aggregation_fit() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.acc method)": [[12, "quapy.method.aggregative.ACC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.cc method)": [[12, "quapy.method.aggregative.CC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.dmy method)": [[12, "quapy.method.aggregative.DMy.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.dys method)": [[12, "quapy.method.aggregative.DyS.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.hdy method)": [[12, "quapy.method.aggregative.HDy.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.pacc method)": [[12, "quapy.method.aggregative.PACC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.pcc method)": [[12, "quapy.method.aggregative.PCC.aggregation_fit"]], "aggregation_fit() (quapy.method.aggregative.smm method)": [[12, "quapy.method.aggregative.SMM.aggregation_fit"]], "aggregative (quapy.method.meta.ensemble property)": [[12, "quapy.method.meta.Ensemble.aggregative"]], "classes_ (quapy.method._neural.quanettrainer property)": [[12, "quapy.method._neural.QuaNetTrainer.classes_"]], "classes_ (quapy.method.aggregative.aggregativequantifier property)": [[12, "quapy.method.aggregative.AggregativeQuantifier.classes_"]], "classes_ (quapy.method.base.onevsallgeneric property)": [[12, "quapy.method.base.OneVsAllGeneric.classes_"]], "classifier (quapy.method.aggregative.aggregativequantifier property)": [[12, "quapy.method.aggregative.AggregativeQuantifier.classifier"]], "classifier_fit_predict() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.classifier_fit_predict"]], "classify() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.classify"]], "classify() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.classify"]], "classify() (quapy.method.aggregative.onevsallaggregative method)": [[12, "quapy.method.aggregative.OneVsAllAggregative.classify"]], "clean_checkpoint() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.clean_checkpoint"]], "clean_checkpoint_dir() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.clean_checkpoint_dir"]], "condition() (quapy.method._threshold_optim.max method)": [[12, "quapy.method._threshold_optim.MAX.condition"]], "condition() (quapy.method._threshold_optim.ms method)": [[12, "quapy.method._threshold_optim.MS.condition"]], "condition() (quapy.method._threshold_optim.t50 method)": [[12, "quapy.method._threshold_optim.T50.condition"]], "condition() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.condition"]], "condition() (quapy.method._threshold_optim.x method)": [[12, "quapy.method._threshold_optim.X.condition"]], "device (quapy.method._neural.quanetmodule property)": [[12, "quapy.method._neural.QuaNetModule.device"]], "discard() (quapy.method._threshold_optim.ms2 method)": [[12, "quapy.method._threshold_optim.MS2.discard"]], "discard() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.discard"]], "ensemblefactory() (in module quapy.method.meta)": [[12, "quapy.method.meta.ensembleFactory"]], "fit() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.fit"]], "fit() (quapy.method.aggregative.aggregativemedianestimator method)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator.fit"]], "fit() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.fit"]], "fit() (quapy.method.aggregative.binaryaggregativequantifier method)": [[12, "quapy.method.aggregative.BinaryAggregativeQuantifier.fit"]], "fit() (quapy.method.base.basequantifier method)": [[12, "quapy.method.base.BaseQuantifier.fit"]], "fit() (quapy.method.base.onevsallgeneric method)": [[12, "quapy.method.base.OneVsAllGeneric.fit"]], "fit() (quapy.method.meta.ensemble method)": [[12, "quapy.method.meta.Ensemble.fit"]], "fit() (quapy.method.meta.medianestimator method)": [[12, "quapy.method.meta.MedianEstimator.fit"]], "fit() (quapy.method.meta.medianestimator2 method)": [[12, "quapy.method.meta.MedianEstimator2.fit"]], "fit() (quapy.method.non_aggregative.dmx method)": [[12, "quapy.method.non_aggregative.DMx.fit"]], "fit() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[12, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.fit"]], "fit() (quapy.method.non_aggregative.readme method)": [[12, "quapy.method.non_aggregative.ReadMe.fit"]], "forward() (quapy.method._neural.quanetmodule method)": [[12, "quapy.method._neural.QuaNetModule.forward"]], "getptecondestim() (quapy.method.aggregative.acc class method)": [[12, "quapy.method.aggregative.ACC.getPteCondEstim"]], "getptecondestim() (quapy.method.aggregative.pacc class method)": [[12, "quapy.method.aggregative.PACC.getPteCondEstim"]], "get_conditional_probability_samples() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.get_conditional_probability_samples"]], "get_kde_function() (quapy.method._kdey.kdebase method)": [[12, "quapy.method._kdey.KDEBase.get_kde_function"]], "get_mixture_components() (quapy.method._kdey.kdebase method)": [[12, "quapy.method._kdey.KDEBase.get_mixture_components"]], "get_params() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.get_params"]], "get_params() (quapy.method.aggregative.aggregativemedianestimator method)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator.get_params"]], "get_params() (quapy.method.meta.ensemble method)": [[12, "quapy.method.meta.Ensemble.get_params"]], "get_params() (quapy.method.meta.medianestimator method)": [[12, "quapy.method.meta.MedianEstimator.get_params"]], "get_params() (quapy.method.meta.medianestimator2 method)": [[12, "quapy.method.meta.MedianEstimator2.get_params"]], "get_prevalence_samples() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.get_prevalence_samples"]], "get_probability_distribution() (in module quapy.method.meta)": [[12, "quapy.method.meta.get_probability_distribution"]], "gram_matrix_mix_sum() (quapy.method._kdey.kdeycs method)": [[12, "quapy.method._kdey.KDEyCS.gram_matrix_mix_sum"]], "mae_loss() (in module quapy.method._neural)": [[12, "quapy.method._neural.mae_loss"]], "neg_label (quapy.method.aggregative.binaryaggregativequantifier property)": [[12, "quapy.method.aggregative.BinaryAggregativeQuantifier.neg_label"]], "newelm() (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.newELM"]], "newinvariantratioestimation() (quapy.method.aggregative.acc class method)": [[12, "quapy.method.aggregative.ACC.newInvariantRatioEstimation"]], "newonevsall() (in module quapy.method.base)": [[12, "quapy.method.base.newOneVsAll"]], "newsvmae() (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.newSVMAE"]], "newsvmkld() (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.newSVMKLD"]], "newsvmq() (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.newSVMQ"]], "newsvmrae() (in module quapy.method.aggregative)": [[12, "quapy.method.aggregative.newSVMRAE"]], "pdf() (quapy.method._kdey.kdebase method)": [[12, "quapy.method._kdey.KDEBase.pdf"]], "pos_label (quapy.method.aggregative.binaryaggregativequantifier property)": [[12, "quapy.method.aggregative.BinaryAggregativeQuantifier.pos_label"]], "predict_proba() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.predict_proba"]], "probabilistic (quapy.method.meta.ensemble property)": [[12, "quapy.method.meta.Ensemble.probabilistic"]], "quantify() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.quantify"]], "quantify() (quapy.method.aggregative.aggregativemedianestimator method)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator.quantify"]], "quantify() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.quantify"]], "quantify() (quapy.method.base.basequantifier method)": [[12, "quapy.method.base.BaseQuantifier.quantify"]], "quantify() (quapy.method.base.onevsallgeneric method)": [[12, "quapy.method.base.OneVsAllGeneric.quantify"]], "quantify() (quapy.method.meta.ensemble method)": [[12, "quapy.method.meta.Ensemble.quantify"]], "quantify() (quapy.method.meta.medianestimator method)": [[12, "quapy.method.meta.MedianEstimator.quantify"]], "quantify() (quapy.method.meta.medianestimator2 method)": [[12, "quapy.method.meta.MedianEstimator2.quantify"]], "quantify() (quapy.method.non_aggregative.dmx method)": [[12, "quapy.method.non_aggregative.DMx.quantify"]], "quantify() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[12, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.quantify"]], "quantify() (quapy.method.non_aggregative.readme method)": [[12, "quapy.method.non_aggregative.ReadMe.quantify"]], "quapy.method": [[12, "module-quapy.method"]], "quapy.method._kdey": [[12, "module-quapy.method._kdey"]], "quapy.method._neural": [[12, "module-quapy.method._neural"]], "quapy.method._threshold_optim": [[12, "module-quapy.method._threshold_optim"]], "quapy.method.aggregative": [[12, "module-quapy.method.aggregative"]], "quapy.method.base": [[12, "module-quapy.method.base"]], "quapy.method.meta": [[12, "module-quapy.method.meta"]], "quapy.method.non_aggregative": [[12, "module-quapy.method.non_aggregative"]], "sample_from_posterior() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.sample_from_posterior"]], "set_fit_request() (quapy.method._kdey.kdeycs method)": [[12, "quapy.method._kdey.KDEyCS.set_fit_request"]], "set_fit_request() (quapy.method._kdey.kdeyhd method)": [[12, "quapy.method._kdey.KDEyHD.set_fit_request"]], "set_fit_request() (quapy.method._kdey.kdeyml method)": [[12, "quapy.method._kdey.KDEyML.set_fit_request"]], "set_fit_request() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.max method)": [[12, "quapy.method._threshold_optim.MAX.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.ms method)": [[12, "quapy.method._threshold_optim.MS.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.ms2 method)": [[12, "quapy.method._threshold_optim.MS2.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.t50 method)": [[12, "quapy.method._threshold_optim.T50.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.thresholdoptimization method)": [[12, "quapy.method._threshold_optim.ThresholdOptimization.set_fit_request"]], "set_fit_request() (quapy.method._threshold_optim.x method)": [[12, "quapy.method._threshold_optim.X.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.acc method)": [[12, "quapy.method.aggregative.ACC.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.aggregativecrispquantifier method)": [[12, "quapy.method.aggregative.AggregativeCrispQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.aggregativemedianestimator method)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.aggregativequantifier method)": [[12, "quapy.method.aggregative.AggregativeQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.aggregativesoftquantifier method)": [[12, "quapy.method.aggregative.AggregativeSoftQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.bayesiancc method)": [[12, "quapy.method.aggregative.BayesianCC.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.binaryaggregativequantifier method)": [[12, "quapy.method.aggregative.BinaryAggregativeQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.cc method)": [[12, "quapy.method.aggregative.CC.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.dmy method)": [[12, "quapy.method.aggregative.DMy.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.dys method)": [[12, "quapy.method.aggregative.DyS.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.hdy method)": [[12, "quapy.method.aggregative.HDy.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.onevsallaggregative method)": [[12, "quapy.method.aggregative.OneVsAllAggregative.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.pacc method)": [[12, "quapy.method.aggregative.PACC.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.pcc method)": [[12, "quapy.method.aggregative.PCC.set_fit_request"]], "set_fit_request() (quapy.method.aggregative.smm method)": [[12, "quapy.method.aggregative.SMM.set_fit_request"]], "set_fit_request() (quapy.method.base.basequantifier method)": [[12, "quapy.method.base.BaseQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.base.binaryquantifier method)": [[12, "quapy.method.base.BinaryQuantifier.set_fit_request"]], "set_fit_request() (quapy.method.base.onevsallgeneric method)": [[12, "quapy.method.base.OneVsAllGeneric.set_fit_request"]], "set_fit_request() (quapy.method.meta.ensemble method)": [[12, "quapy.method.meta.Ensemble.set_fit_request"]], "set_fit_request() (quapy.method.meta.medianestimator method)": [[12, "quapy.method.meta.MedianEstimator.set_fit_request"]], "set_fit_request() (quapy.method.meta.medianestimator2 method)": [[12, "quapy.method.meta.MedianEstimator2.set_fit_request"]], "set_fit_request() (quapy.method.non_aggregative.dmx method)": [[12, "quapy.method.non_aggregative.DMx.set_fit_request"]], "set_fit_request() (quapy.method.non_aggregative.maximumlikelihoodprevalenceestimation method)": [[12, "quapy.method.non_aggregative.MaximumLikelihoodPrevalenceEstimation.set_fit_request"]], "set_fit_request() (quapy.method.non_aggregative.readme method)": [[12, "quapy.method.non_aggregative.ReadMe.set_fit_request"]], "set_params() (quapy.method._neural.quanettrainer method)": [[12, "quapy.method._neural.QuaNetTrainer.set_params"]], "set_params() (quapy.method.aggregative.aggregativemedianestimator method)": [[12, "quapy.method.aggregative.AggregativeMedianEstimator.set_params"]], "set_params() (quapy.method.meta.ensemble method)": [[12, "quapy.method.meta.Ensemble.set_params"]], "set_params() (quapy.method.meta.medianestimator method)": [[12, "quapy.method.meta.MedianEstimator.set_params"]], "set_params() (quapy.method.meta.medianestimator2 method)": [[12, "quapy.method.meta.MedianEstimator2.set_params"]], "set_predict_proba_request() (quapy.method.aggregative.emq method)": [[12, "quapy.method.aggregative.EMQ.set_predict_proba_request"]], "std_constrained_linear_ls() (quapy.method.non_aggregative.readme method)": [[12, "quapy.method.non_aggregative.ReadMe.std_constrained_linear_ls"]], "training (quapy.method._neural.quanetmodule attribute)": [[12, "quapy.method._neural.QuaNetModule.training"]], "val_split (quapy.method.aggregative.aggregativequantifier property)": [[12, "quapy.method.aggregative.AggregativeQuantifier.val_split"]], "val_split_ (quapy.method.aggregative.aggregativequantifier attribute)": [[12, "quapy.method.aggregative.AggregativeQuantifier.val_split_"]]}})